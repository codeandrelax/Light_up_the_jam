
Light_up_the_jam_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004140  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080042d8  080042d8  000142d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004358  08004358  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004358  08004358  00014358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004360  08004360  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004360  08004360  00014360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004364  08004364  00014364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000758  20000014  0800437c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000076c  0800437c  0002076c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000098b7  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018ef  00000000  00000000  000298fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  0002b1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006e8  00000000  00000000  0002b960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014b9a  00000000  00000000  0002c048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000941b  00000000  00000000  00040be2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081e46  00000000  00000000  00049ffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cbe43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d64  00000000  00000000  000cbe94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080042c0 	.word	0x080042c0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	080042c0 	.word	0x080042c0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	db0b      	blt.n	8000506 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	f003 021f 	and.w	r2, r3, #31
 80004f4:	4907      	ldr	r1, [pc, #28]	; (8000514 <__NVIC_EnableIRQ+0x38>)
 80004f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004fa:	095b      	lsrs	r3, r3, #5
 80004fc:	2001      	movs	r0, #1
 80004fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	e000e100 	.word	0xe000e100

08000518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	6039      	str	r1, [r7, #0]
 8000522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000528:	2b00      	cmp	r3, #0
 800052a:	db0a      	blt.n	8000542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	b2da      	uxtb	r2, r3
 8000530:	490c      	ldr	r1, [pc, #48]	; (8000564 <__NVIC_SetPriority+0x4c>)
 8000532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000536:	0112      	lsls	r2, r2, #4
 8000538:	b2d2      	uxtb	r2, r2
 800053a:	440b      	add	r3, r1
 800053c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000540:	e00a      	b.n	8000558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	b2da      	uxtb	r2, r3
 8000546:	4908      	ldr	r1, [pc, #32]	; (8000568 <__NVIC_SetPriority+0x50>)
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	f003 030f 	and.w	r3, r3, #15
 800054e:	3b04      	subs	r3, #4
 8000550:	0112      	lsls	r2, r2, #4
 8000552:	b2d2      	uxtb	r2, r2
 8000554:	440b      	add	r3, r1
 8000556:	761a      	strb	r2, [r3, #24]
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	e000e100 	.word	0xe000e100
 8000568:	e000ed00 	.word	0xe000ed00

0800056c <effectOneColorDim>:
									channel_param->one_color_b);
	}
}

void effectOneColorDim(struct channelParams *channel_param)
{
 800056c:	b590      	push	{r4, r7, lr}
 800056e:	b087      	sub	sp, #28
 8000570:	af02      	add	r7, sp, #8
 8000572:	6078      	str	r0, [r7, #4]
	if(channel_param->one_color_dim_r_flag == 1)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	7b9b      	ldrb	r3, [r3, #14]
 8000578:	2b01      	cmp	r3, #1
 800057a:	d129      	bne.n	80005d0 <effectOneColorDim+0x64>
	{
		if(channel_param->one_color_dim_r_dir == 0)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	7c9b      	ldrb	r3, [r3, #18]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d114      	bne.n	80005ae <effectOneColorDim+0x42>
		{
			channel_param->one_color_dim_r += channel_param->one_color_dim_increment;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	7ada      	ldrb	r2, [r3, #11]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	7c5b      	ldrb	r3, [r3, #17]
 800058c:	4413      	add	r3, r2
 800058e:	b2da      	uxtb	r2, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	72da      	strb	r2, [r3, #11]
			if(channel_param->one_color_dim_r >= 255 - channel_param->one_color_dim_increment)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	7adb      	ldrb	r3, [r3, #11]
 8000598:	461a      	mov	r2, r3
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	7c5b      	ldrb	r3, [r3, #17]
 800059e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80005a2:	429a      	cmp	r2, r3
 80005a4:	db14      	blt.n	80005d0 <effectOneColorDim+0x64>
			{
				channel_param->one_color_dim_r_dir = 1;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	2201      	movs	r2, #1
 80005aa:	749a      	strb	r2, [r3, #18]
 80005ac:	e010      	b.n	80005d0 <effectOneColorDim+0x64>
			}
		}
		else
		{
			channel_param->one_color_dim_r -= channel_param->one_color_dim_increment;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	7ada      	ldrb	r2, [r3, #11]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	7c5b      	ldrb	r3, [r3, #17]
 80005b6:	1ad3      	subs	r3, r2, r3
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	72da      	strb	r2, [r3, #11]
			if(channel_param->one_color_dim_r <= channel_param->one_color_dim_increment)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	7ada      	ldrb	r2, [r3, #11]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	7c5b      	ldrb	r3, [r3, #17]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d802      	bhi.n	80005d0 <effectOneColorDim+0x64>
			{
				channel_param->one_color_dim_r_dir = 0;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2200      	movs	r2, #0
 80005ce:	749a      	strb	r2, [r3, #18]
			}
		}
	}

	if(channel_param->one_color_dim_g_flag == 1)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	7bdb      	ldrb	r3, [r3, #15]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d129      	bne.n	800062c <effectOneColorDim+0xc0>
	{
		if(channel_param->one_color_dim_g_dir == 0)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	7cdb      	ldrb	r3, [r3, #19]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d114      	bne.n	800060a <effectOneColorDim+0x9e>
		{
			channel_param->one_color_dim_g += channel_param->one_color_dim_increment;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	7b1a      	ldrb	r2, [r3, #12]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	7c5b      	ldrb	r3, [r3, #17]
 80005e8:	4413      	add	r3, r2
 80005ea:	b2da      	uxtb	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	731a      	strb	r2, [r3, #12]
			if(channel_param->one_color_dim_g >= 255 - channel_param->one_color_dim_increment)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	7b1b      	ldrb	r3, [r3, #12]
 80005f4:	461a      	mov	r2, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	7c5b      	ldrb	r3, [r3, #17]
 80005fa:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80005fe:	429a      	cmp	r2, r3
 8000600:	db14      	blt.n	800062c <effectOneColorDim+0xc0>
			{
				channel_param->one_color_dim_g_dir = 1;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2201      	movs	r2, #1
 8000606:	74da      	strb	r2, [r3, #19]
 8000608:	e010      	b.n	800062c <effectOneColorDim+0xc0>
			}
		}
		else
		{
			channel_param->one_color_dim_g -= channel_param->one_color_dim_increment;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	7b1a      	ldrb	r2, [r3, #12]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	7c5b      	ldrb	r3, [r3, #17]
 8000612:	1ad3      	subs	r3, r2, r3
 8000614:	b2da      	uxtb	r2, r3
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	731a      	strb	r2, [r3, #12]
			if(channel_param->one_color_dim_g <= channel_param->one_color_dim_increment)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	7b1a      	ldrb	r2, [r3, #12]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	7c5b      	ldrb	r3, [r3, #17]
 8000622:	429a      	cmp	r2, r3
 8000624:	d802      	bhi.n	800062c <effectOneColorDim+0xc0>
			{
				channel_param->one_color_dim_g_dir = 0;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2200      	movs	r2, #0
 800062a:	74da      	strb	r2, [r3, #19]
			}
		}
	}

	if(channel_param->one_color_dim_b_flag == 1)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	7c1b      	ldrb	r3, [r3, #16]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d129      	bne.n	8000688 <effectOneColorDim+0x11c>
	{
		if(channel_param->one_color_dim_b_dir == 0)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	7d1b      	ldrb	r3, [r3, #20]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d114      	bne.n	8000666 <effectOneColorDim+0xfa>
		{
			channel_param->one_color_dim_b += channel_param->one_color_dim_increment;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	7b5a      	ldrb	r2, [r3, #13]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	7c5b      	ldrb	r3, [r3, #17]
 8000644:	4413      	add	r3, r2
 8000646:	b2da      	uxtb	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	735a      	strb	r2, [r3, #13]
			if(channel_param->one_color_dim_b >= 255 - channel_param->one_color_dim_increment)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	7b5b      	ldrb	r3, [r3, #13]
 8000650:	461a      	mov	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	7c5b      	ldrb	r3, [r3, #17]
 8000656:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800065a:	429a      	cmp	r2, r3
 800065c:	db14      	blt.n	8000688 <effectOneColorDim+0x11c>
			{
				channel_param->one_color_dim_b_dir = 1;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2201      	movs	r2, #1
 8000662:	751a      	strb	r2, [r3, #20]
 8000664:	e010      	b.n	8000688 <effectOneColorDim+0x11c>
			}
		}
		else
		{
			channel_param->one_color_dim_b -= channel_param->one_color_dim_increment;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	7b5a      	ldrb	r2, [r3, #13]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	7c5b      	ldrb	r3, [r3, #17]
 800066e:	1ad3      	subs	r3, r2, r3
 8000670:	b2da      	uxtb	r2, r3
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	735a      	strb	r2, [r3, #13]
			if(channel_param->one_color_dim_b <= channel_param->one_color_dim_increment)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	7b5a      	ldrb	r2, [r3, #13]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	7c5b      	ldrb	r3, [r3, #17]
 800067e:	429a      	cmp	r2, r3
 8000680:	d802      	bhi.n	8000688 <effectOneColorDim+0x11c>
			{
				channel_param->one_color_dim_b_dir = 0;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2200      	movs	r2, #0
 8000686:	751a      	strb	r2, [r3, #20]
			}
		}
	}

	for(int i = 0; i < LED_NUMBER; i++)
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	e012      	b.n	80006b4 <effectOneColorDim+0x148>
	{
		setLEDcolor(LED_COLOR_BUFFER, channel_param->channel
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	7859      	ldrb	r1, [r3, #1]
 8000692:	68f8      	ldr	r0, [r7, #12]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	7adc      	ldrb	r4, [r3, #11]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	7b1b      	ldrb	r3, [r3, #12]
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	7b52      	ldrb	r2, [r2, #13]
 80006a0:	9201      	str	r2, [sp, #4]
 80006a2:	9300      	str	r3, [sp, #0]
 80006a4:	4623      	mov	r3, r4
 80006a6:	4602      	mov	r2, r0
 80006a8:	4806      	ldr	r0, [pc, #24]	; (80006c4 <effectOneColorDim+0x158>)
 80006aa:	f000 f879 	bl	80007a0 <setLEDcolor>
	for(int i = 0; i < LED_NUMBER; i++)
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	3301      	adds	r3, #1
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	2b1e      	cmp	r3, #30
 80006b8:	dde9      	ble.n	800068e <effectOneColorDim+0x122>
									, i,
									channel_param->one_color_dim_r,
									channel_param->one_color_dim_g,
									channel_param->one_color_dim_b);
	}
}
 80006ba:	bf00      	nop
 80006bc:	bf00      	nop
 80006be:	3714      	adds	r7, #20
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd90      	pop	{r4, r7, pc}
 80006c4:	20000030 	.word	0x20000030

080006c8 <effectUpDownColorChange>:
		channel_param->up_down_add_or_sub = 0;
	}
}

void effectUpDownColorChange(struct channelParams *channel_param)
{
 80006c8:	b5b0      	push	{r4, r5, r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af02      	add	r7, sp, #8
 80006ce:	6078      	str	r0, [r7, #4]
	for(int i = channel_param->up_down_current; i < channel_param->up_down_length + channel_param->up_down_current; i++)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	7d9b      	ldrb	r3, [r3, #22]
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	e022      	b.n	800071e <effectUpDownColorChange+0x56>
	{
		setLEDcolor(LED_COLOR_BUFFER, channel_param->channel
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	7859      	ldrb	r1, [r3, #1]
 80006dc:	68f8      	ldr	r0, [r7, #12]
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	461a      	mov	r2, r3
 80006e4:	0052      	lsls	r2, r2, #1
 80006e6:	4413      	add	r3, r2
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	3b80      	subs	r3, #128	; 0x80
 80006ec:	b2dc      	uxtb	r4, r3
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	461a      	mov	r2, r3
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	1ad3      	subs	r3, r2, r3
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	3b80      	subs	r3, #128	; 0x80
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	68fa      	ldr	r2, [r7, #12]
 8000700:	b2d2      	uxtb	r2, r2
 8000702:	4615      	mov	r5, r2
 8000704:	006d      	lsls	r5, r5, #1
 8000706:	442a      	add	r2, r5
 8000708:	b2d2      	uxtb	r2, r2
 800070a:	9201      	str	r2, [sp, #4]
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	4623      	mov	r3, r4
 8000710:	4602      	mov	r2, r0
 8000712:	481d      	ldr	r0, [pc, #116]	; (8000788 <effectUpDownColorChange+0xc0>)
 8000714:	f000 f844 	bl	80007a0 <setLEDcolor>
	for(int i = channel_param->up_down_current; i < channel_param->up_down_length + channel_param->up_down_current; i++)
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	3301      	adds	r3, #1
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	7d5b      	ldrb	r3, [r3, #21]
 8000722:	461a      	mov	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	7d9b      	ldrb	r3, [r3, #22]
 8000728:	4413      	add	r3, r2
 800072a:	68fa      	ldr	r2, [r7, #12]
 800072c:	429a      	cmp	r2, r3
 800072e:	dbd3      	blt.n	80006d8 <effectUpDownColorChange+0x10>
									128 + i * 3,
									128 - i * 3,
									i * 3);
	}

	if(channel_param->up_down_add_or_sub == 0)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	7ddb      	ldrb	r3, [r3, #23]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d105      	bne.n	8000744 <effectUpDownColorChange+0x7c>
	{
		channel_param->up_down_current++;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	7d9b      	ldrb	r3, [r3, #22]
 800073c:	3301      	adds	r3, #1
 800073e:	b2da      	uxtb	r2, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	759a      	strb	r2, [r3, #22]
	}
	if(channel_param->up_down_add_or_sub == 1)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	7ddb      	ldrb	r3, [r3, #23]
 8000748:	2b01      	cmp	r3, #1
 800074a:	d105      	bne.n	8000758 <effectUpDownColorChange+0x90>
	{
		channel_param->up_down_current--;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	7d9b      	ldrb	r3, [r3, #22]
 8000750:	3b01      	subs	r3, #1
 8000752:	b2da      	uxtb	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	759a      	strb	r2, [r3, #22]
	}

	if(channel_param->up_down_current >= LED_NUMBER - channel_param->up_down_length)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	7d9b      	ldrb	r3, [r3, #22]
 800075c:	461a      	mov	r2, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	7d5b      	ldrb	r3, [r3, #21]
 8000762:	f1c3 031f 	rsb	r3, r3, #31
 8000766:	429a      	cmp	r2, r3
 8000768:	db02      	blt.n	8000770 <effectUpDownColorChange+0xa8>
	{
		channel_param->up_down_add_or_sub = 1;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2201      	movs	r2, #1
 800076e:	75da      	strb	r2, [r3, #23]
	}
	if(channel_param->up_down_current <= 0)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	7d9b      	ldrb	r3, [r3, #22]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d102      	bne.n	800077e <effectUpDownColorChange+0xb6>
	{
		channel_param->up_down_add_or_sub = 0;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2200      	movs	r2, #0
 800077c:	75da      	strb	r2, [r3, #23]
	}
}
 800077e:	bf00      	nop
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bdb0      	pop	{r4, r5, r7, pc}
 8000786:	bf00      	nop
 8000788:	20000030 	.word	0x20000030

0800078c <effectNothing>:

void effectNothing(struct channelParams *channel_param)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	return;
 8000794:	bf00      	nop
}
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <setLEDcolor>:
										0);
	i = (i+1)%LED_NUMBER;
}

void setLEDcolor(uint16_t* buffer, uint8_t channel, uint32_t ledNumber, uint8_t g, uint8_t r, uint8_t b)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b087      	sub	sp, #28
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	607a      	str	r2, [r7, #4]
 80007aa:	461a      	mov	r2, r3
 80007ac:	460b      	mov	r3, r1
 80007ae:	72fb      	strb	r3, [r7, #11]
 80007b0:	4613      	mov	r3, r2
 80007b2:	72bb      	strb	r3, [r7, #10]
	//This function can be optimized
	uint16_t channelSelector = 1 << channel;
 80007b4:	7afb      	ldrb	r3, [r7, #11]
 80007b6:	2201      	movs	r2, #1
 80007b8:	fa02 f303 	lsl.w	r3, r2, r3
 80007bc:	82bb      	strh	r3, [r7, #20]

	for(uint8_t i = 0; i < 8; i ++)
 80007be:	2300      	movs	r3, #0
 80007c0:	75fb      	strb	r3, [r7, #23]
 80007c2:	e073      	b.n	80008ac <setLEDcolor+0x10c>
	{
		if(r & (((uint8_t)(0x80)) >> i))
 80007c4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80007c8:	7dfb      	ldrb	r3, [r7, #23]
 80007ca:	2180      	movs	r1, #128	; 0x80
 80007cc:	fa41 f303 	asr.w	r3, r1, r3
 80007d0:	4013      	ands	r3, r2
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d01c      	beq.n	8000810 <setLEDcolor+0x70>
			buffer[ledNumber * 24 + i + 1] 		|= channelSelector;
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	4613      	mov	r3, r2
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	4413      	add	r3, r2
 80007de:	00db      	lsls	r3, r3, #3
 80007e0:	461a      	mov	r2, r3
 80007e2:	7dfb      	ldrb	r3, [r7, #23]
 80007e4:	4413      	add	r3, r2
 80007e6:	3301      	adds	r3, #1
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	68fa      	ldr	r2, [r7, #12]
 80007ec:	4413      	add	r3, r2
 80007ee:	8819      	ldrh	r1, [r3, #0]
 80007f0:	687a      	ldr	r2, [r7, #4]
 80007f2:	4613      	mov	r3, r2
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	4413      	add	r3, r2
 80007f8:	00db      	lsls	r3, r3, #3
 80007fa:	461a      	mov	r2, r3
 80007fc:	7dfb      	ldrb	r3, [r7, #23]
 80007fe:	4413      	add	r3, r2
 8000800:	3301      	adds	r3, #1
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	68fa      	ldr	r2, [r7, #12]
 8000806:	4413      	add	r3, r2
 8000808:	8aba      	ldrh	r2, [r7, #20]
 800080a:	430a      	orrs	r2, r1
 800080c:	b292      	uxth	r2, r2
 800080e:	801a      	strh	r2, [r3, #0]

		if(g & (((uint8_t)(0x80)) >> i))
 8000810:	7aba      	ldrb	r2, [r7, #10]
 8000812:	7dfb      	ldrb	r3, [r7, #23]
 8000814:	2180      	movs	r1, #128	; 0x80
 8000816:	fa41 f303 	asr.w	r3, r1, r3
 800081a:	4013      	ands	r3, r2
 800081c:	2b00      	cmp	r3, #0
 800081e:	d01c      	beq.n	800085a <setLEDcolor+0xba>
			buffer[ledNumber * 24 + i + 8 + 1]  |= channelSelector;
 8000820:	687a      	ldr	r2, [r7, #4]
 8000822:	4613      	mov	r3, r2
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	4413      	add	r3, r2
 8000828:	00db      	lsls	r3, r3, #3
 800082a:	461a      	mov	r2, r3
 800082c:	7dfb      	ldrb	r3, [r7, #23]
 800082e:	4413      	add	r3, r2
 8000830:	3309      	adds	r3, #9
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	68fa      	ldr	r2, [r7, #12]
 8000836:	4413      	add	r3, r2
 8000838:	8819      	ldrh	r1, [r3, #0]
 800083a:	687a      	ldr	r2, [r7, #4]
 800083c:	4613      	mov	r3, r2
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	4413      	add	r3, r2
 8000842:	00db      	lsls	r3, r3, #3
 8000844:	461a      	mov	r2, r3
 8000846:	7dfb      	ldrb	r3, [r7, #23]
 8000848:	4413      	add	r3, r2
 800084a:	3309      	adds	r3, #9
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	68fa      	ldr	r2, [r7, #12]
 8000850:	4413      	add	r3, r2
 8000852:	8aba      	ldrh	r2, [r7, #20]
 8000854:	430a      	orrs	r2, r1
 8000856:	b292      	uxth	r2, r2
 8000858:	801a      	strh	r2, [r3, #0]

		if(b & (((uint8_t)(0x80)) >> i))
 800085a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800085e:	7dfb      	ldrb	r3, [r7, #23]
 8000860:	2180      	movs	r1, #128	; 0x80
 8000862:	fa41 f303 	asr.w	r3, r1, r3
 8000866:	4013      	ands	r3, r2
 8000868:	2b00      	cmp	r3, #0
 800086a:	d01c      	beq.n	80008a6 <setLEDcolor+0x106>
			buffer[ledNumber * 24 + i + 16 + 1] |= channelSelector;
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	4613      	mov	r3, r2
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	4413      	add	r3, r2
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	461a      	mov	r2, r3
 8000878:	7dfb      	ldrb	r3, [r7, #23]
 800087a:	4413      	add	r3, r2
 800087c:	3311      	adds	r3, #17
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	68fa      	ldr	r2, [r7, #12]
 8000882:	4413      	add	r3, r2
 8000884:	8819      	ldrh	r1, [r3, #0]
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	4613      	mov	r3, r2
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	4413      	add	r3, r2
 800088e:	00db      	lsls	r3, r3, #3
 8000890:	461a      	mov	r2, r3
 8000892:	7dfb      	ldrb	r3, [r7, #23]
 8000894:	4413      	add	r3, r2
 8000896:	3311      	adds	r3, #17
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	68fa      	ldr	r2, [r7, #12]
 800089c:	4413      	add	r3, r2
 800089e:	8aba      	ldrh	r2, [r7, #20]
 80008a0:	430a      	orrs	r2, r1
 80008a2:	b292      	uxth	r2, r2
 80008a4:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 8; i ++)
 80008a6:	7dfb      	ldrb	r3, [r7, #23]
 80008a8:	3301      	adds	r3, #1
 80008aa:	75fb      	strb	r3, [r7, #23]
 80008ac:	7dfb      	ldrb	r3, [r7, #23]
 80008ae:	2b07      	cmp	r3, #7
 80008b0:	d988      	bls.n	80007c4 <setLEDcolor+0x24>
	}
}
 80008b2:	bf00      	nop
 80008b4:	bf00      	nop
 80008b6:	371c      	adds	r7, #28
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <initDMA>:

void initDMA(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 80008c4:	4b34      	ldr	r3, [pc, #208]	; (8000998 <initDMA+0xd8>)
 80008c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c8:	4a33      	ldr	r2, [pc, #204]	; (8000998 <initDMA+0xd8>)
 80008ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008ce:	6313      	str	r3, [r2, #48]	; 0x30

	DMA2->LIFCR = 0xffffffff;
 80008d0:	4b32      	ldr	r3, [pc, #200]	; (800099c <initDMA+0xdc>)
 80008d2:	f04f 32ff 	mov.w	r2, #4294967295
 80008d6:	609a      	str	r2, [r3, #8]
	//DMA2->HIFCR = 0xffffffff;

	//DMA2 Stream 1 channel 0
	//DMA2->LIFCR |= (DMA_LIFCR_CTCIF1);

	DMA2_Stream1->CR |= DMA_SxCR_CHSEL_2 |
 80008d8:	4b31      	ldr	r3, [pc, #196]	; (80009a0 <initDMA+0xe0>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a30      	ldr	r2, [pc, #192]	; (80009a0 <initDMA+0xe0>)
 80008de:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 80008e2:	f443 5321 	orr.w	r3, r3, #10304	; 0x2840
 80008e6:	6013      	str	r3, [r2, #0]
						DMA_SxCR_PSIZE_0 |
						   //DMA_SxCR_MINC |
						   //DMA_SxCR_CIRC |
						  DMA_SxCR_DIR_0;

	DMA2_Stream1->NDTR = LED_COLOR_BUFFER_SIZE;
 80008e8:	4b2d      	ldr	r3, [pc, #180]	; (80009a0 <initDMA+0xe0>)
 80008ea:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 80008ee:	605a      	str	r2, [r3, #4]
	DMA2_Stream1->PAR = (uint32_t*)&(GPIOB->ODR);
 80008f0:	4b2b      	ldr	r3, [pc, #172]	; (80009a0 <initDMA+0xe0>)
 80008f2:	4a2c      	ldr	r2, [pc, #176]	; (80009a4 <initDMA+0xe4>)
 80008f4:	609a      	str	r2, [r3, #8]
	DMA2_Stream1->M0AR = (uint16_t*)&LED_ON;//(uint16_t*)LED_TOGGLE;
 80008f6:	4b2a      	ldr	r3, [pc, #168]	; (80009a0 <initDMA+0xe0>)
 80008f8:	4a2b      	ldr	r2, [pc, #172]	; (80009a8 <initDMA+0xe8>)
 80008fa:	60da      	str	r2, [r3, #12]
	DMA2_Stream1->FCR = 0;
 80008fc:	4b28      	ldr	r3, [pc, #160]	; (80009a0 <initDMA+0xe0>)
 80008fe:	2200      	movs	r2, #0
 8000900:	615a      	str	r2, [r3, #20]
	DMA2_Stream1->CR |= DMA_SxCR_EN;
 8000902:	4b27      	ldr	r3, [pc, #156]	; (80009a0 <initDMA+0xe0>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a26      	ldr	r2, [pc, #152]	; (80009a0 <initDMA+0xe0>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6013      	str	r3, [r2, #0]

	//DMA2 Stream2 channel
	//DMA2->LIFCR |= (DMA_LIFCR_CTCIF2);

	DMA2_Stream2->CR |= DMA_SxCR_CHSEL_2 |
 800090e:	4b27      	ldr	r3, [pc, #156]	; (80009ac <initDMA+0xec>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a26      	ldr	r2, [pc, #152]	; (80009ac <initDMA+0xec>)
 8000914:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 8000918:	f443 5331 	orr.w	r3, r3, #11328	; 0x2c40
 800091c:	6013      	str	r3, [r2, #0]
						DMA_SxCR_PSIZE_0 |
						   DMA_SxCR_MINC |
						 //DMA_SxCR_CIRC |
						   DMA_SxCR_DIR_0;

	DMA2_Stream6-> CR |= (DMA_SxCR_TCIE);
 800091e:	4b24      	ldr	r3, [pc, #144]	; (80009b0 <initDMA+0xf0>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a23      	ldr	r2, [pc, #140]	; (80009b0 <initDMA+0xf0>)
 8000924:	f043 0310 	orr.w	r3, r3, #16
 8000928:	6013      	str	r3, [r2, #0]
	DMA2_Stream2->NDTR = LED_COLOR_BUFFER_SIZE;
 800092a:	4b20      	ldr	r3, [pc, #128]	; (80009ac <initDMA+0xec>)
 800092c:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8000930:	605a      	str	r2, [r3, #4]
	DMA2_Stream2->PAR = (uint32_t*)&(GPIOB->ODR);
 8000932:	4b1e      	ldr	r3, [pc, #120]	; (80009ac <initDMA+0xec>)
 8000934:	4a1b      	ldr	r2, [pc, #108]	; (80009a4 <initDMA+0xe4>)
 8000936:	609a      	str	r2, [r3, #8]
	DMA2_Stream2->M0AR = (uint16_t*)LED_COLOR_BUFFER;
 8000938:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <initDMA+0xec>)
 800093a:	4a1e      	ldr	r2, [pc, #120]	; (80009b4 <initDMA+0xf4>)
 800093c:	60da      	str	r2, [r3, #12]

	NVIC_SetPriority(DMA2_Stream6_IRQn, 0);
 800093e:	2100      	movs	r1, #0
 8000940:	2045      	movs	r0, #69	; 0x45
 8000942:	f7ff fde9 	bl	8000518 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000946:	2045      	movs	r0, #69	; 0x45
 8000948:	f7ff fdc8 	bl	80004dc <__NVIC_EnableIRQ>

	DMA2_Stream1->FCR = 0;
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <initDMA+0xe0>)
 800094e:	2200      	movs	r2, #0
 8000950:	615a      	str	r2, [r3, #20]
	DMA2_Stream2->CR |= DMA_SxCR_EN;
 8000952:	4b16      	ldr	r3, [pc, #88]	; (80009ac <initDMA+0xec>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a15      	ldr	r2, [pc, #84]	; (80009ac <initDMA+0xec>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6013      	str	r3, [r2, #0]

	//DMA2 Stream6 channel 6
	//DMA2->HIFCR |= (DMA_HIFCR_CTCIF6);

	DMA2_Stream6->CR |= DMA_SxCR_CHSEL_2 |
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <initDMA+0xf0>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a13      	ldr	r2, [pc, #76]	; (80009b0 <initDMA+0xf0>)
 8000964:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 8000968:	f443 5321 	orr.w	r3, r3, #10304	; 0x2840
 800096c:	6013      	str	r3, [r2, #0]
						DMA_SxCR_PSIZE_0 |
						   //DMA_SxCR_MINC |
						   //DMA_SxCR_CIRC |
						  DMA_SxCR_DIR_0;

	DMA2_Stream6->NDTR = LED_COLOR_BUFFER_SIZE;
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <initDMA+0xf0>)
 8000970:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8000974:	605a      	str	r2, [r3, #4]
	DMA2_Stream6->PAR = (uint32_t*)&(GPIOB->ODR);
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <initDMA+0xf0>)
 8000978:	4a0a      	ldr	r2, [pc, #40]	; (80009a4 <initDMA+0xe4>)
 800097a:	609a      	str	r2, [r3, #8]
	DMA2_Stream6->M0AR = (uint16_t*)&LED_OFF;
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <initDMA+0xf0>)
 800097e:	4a0e      	ldr	r2, [pc, #56]	; (80009b8 <initDMA+0xf8>)
 8000980:	60da      	str	r2, [r3, #12]
	DMA2_Stream1->FCR = 0;
 8000982:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <initDMA+0xe0>)
 8000984:	2200      	movs	r2, #0
 8000986:	615a      	str	r2, [r3, #20]
	DMA2_Stream6->CR |= DMA_SxCR_EN;
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <initDMA+0xf0>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a08      	ldr	r2, [pc, #32]	; (80009b0 <initDMA+0xf0>)
 800098e:	f043 0301 	orr.w	r3, r3, #1
 8000992:	6013      	str	r3, [r2, #0]

}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40023800 	.word	0x40023800
 800099c:	40026400 	.word	0x40026400
 80009a0:	40026428 	.word	0x40026428
 80009a4:	40020414 	.word	0x40020414
 80009a8:	08004328 	.word	0x08004328
 80009ac:	40026440 	.word	0x40026440
 80009b0:	400264a0 	.word	0x400264a0
 80009b4:	20000030 	.word	0x20000030
 80009b8:	0800432a 	.word	0x0800432a

080009bc <initTIM1>:

void initTIM1(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <initTIM1+0x44>)
 80009c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c4:	4a0e      	ldr	r2, [pc, #56]	; (8000a00 <initTIM1+0x44>)
 80009c6:	f043 0301 	orr.w	r3, r3, #1
 80009ca:	6453      	str	r3, [r2, #68]	; 0x44

	//TIM1->CR1 |= TIM_CR1_DIR;
	TIM1->DIER |= TIM_DIER_CC1DE | TIM_DIER_CC2DE | TIM_DIER_CC3DE;//TIM_DIER_CC1IE;
 80009cc:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <initTIM1+0x48>)
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	4a0c      	ldr	r2, [pc, #48]	; (8000a04 <initTIM1+0x48>)
 80009d2:	f443 6360 	orr.w	r3, r3, #3584	; 0xe00
 80009d6:	60d3      	str	r3, [r2, #12]

	TIM1->PSC = 0;
 80009d8:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <initTIM1+0x48>)
 80009da:	2200      	movs	r2, #0
 80009dc:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->ARR = 63;
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <initTIM1+0x48>)
 80009e0:	223f      	movs	r2, #63	; 0x3f
 80009e2:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM1->CCR1 = 0;
 80009e4:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <initTIM1+0x48>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 21;
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <initTIM1+0x48>)
 80009ec:	2215      	movs	r2, #21
 80009ee:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 42;
 80009f0:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <initTIM1+0x48>)
 80009f2:	222a      	movs	r2, #42	; 0x2a
 80009f4:	63da      	str	r2, [r3, #60]	; 0x3c

	//TIM1->CR1 |= TIM_CR1_CEN;
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40010000 	.word	0x40010000

08000a08 <initTIM2>:

void initTIM2(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <initTIM2+0x4c>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a10:	4a10      	ldr	r2, [pc, #64]	; (8000a54 <initTIM2+0x4c>)
 8000a12:	f043 0301 	orr.w	r3, r3, #1
 8000a16:	6413      	str	r3, [r2, #64]	; 0x40

	TIM2->ARR = (1 << 22);//period of around 80 mS
 8000a18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a1c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000a20:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->DIER |= TIM_DIER_UIE;
 8000a22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	60d3      	str	r3, [r2, #12]

	NVIC_SetPriority (TIM2_IRQn, 1);
 8000a32:	2101      	movs	r1, #1
 8000a34:	201c      	movs	r0, #28
 8000a36:	f7ff fd6f 	bl	8000518 <__NVIC_SetPriority>
	NVIC_EnableIRQ (TIM2_IRQn);
 8000a3a:	201c      	movs	r0, #28
 8000a3c:	f7ff fd4e 	bl	80004dc <__NVIC_EnableIRQ>

	TIM2->CR1 &= ~(TIM_CR1_CEN);//At the beginning TIM2 is not enabled
 8000a40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a4a:	f023 0301 	bic.w	r3, r3, #1
 8000a4e:	6013      	str	r3, [r2, #0]
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40023800 	.word	0x40023800

08000a58 <DMA2_Stream6_IRQHandler>:

void DMA2_Stream6_IRQHandler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
	if(DMA2->HISR & DMA_HIFCR_CTCIF6)
 8000a5c:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <DMA2_Stream6_IRQHandler+0x48>)
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d016      	beq.n	8000a96 <DMA2_Stream6_IRQHandler+0x3e>
	{
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
		TIM1->CR1 &= ~(TIM_CR1_CEN);
 8000a68:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <DMA2_Stream6_IRQHandler+0x4c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a0d      	ldr	r2, [pc, #52]	; (8000aa4 <DMA2_Stream6_IRQHandler+0x4c>)
 8000a6e:	f023 0301 	bic.w	r3, r3, #1
 8000a72:	6013      	str	r3, [r2, #0]

		//Set update buffer flag
		//buffer update must be done in less than TIM2 overflow period
		UPDATE_BUFFER_FLAG = 1;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <DMA2_Stream6_IRQHandler+0x50>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	701a      	strb	r2, [r3, #0]

		TIM2->CR1  |= TIM_CR1_CEN;
 8000a7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6013      	str	r3, [r2, #0]
		DMA2->HIFCR |= (DMA_HIFCR_CTCIF6);
 8000a8a:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <DMA2_Stream6_IRQHandler+0x48>)
 8000a8c:	68db      	ldr	r3, [r3, #12]
 8000a8e:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <DMA2_Stream6_IRQHandler+0x48>)
 8000a90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a94:	60d3      	str	r3, [r2, #12]
	}
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	40026400 	.word	0x40026400
 8000aa4:	40010000 	.word	0x40010000
 8000aa8:	20000600 	.word	0x20000600

08000aac <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
	if(TIM2->SR & TIM_SR_UIF)
 8000ab0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ab4:	691b      	ldr	r3, [r3, #16]
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d02b      	beq.n	8000b16 <TIM2_IRQHandler+0x6a>
	{
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
		TIM2->SR &= ~(TIM_SR_UIF);
 8000abe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ac2:	691b      	ldr	r3, [r3, #16]
 8000ac4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ac8:	f023 0301 	bic.w	r3, r3, #1
 8000acc:	6113      	str	r3, [r2, #16]
		TIM2->CR1 &= ~(TIM_CR1_CEN);
 8000ace:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ad8:	f023 0301 	bic.w	r3, r3, #1
 8000adc:	6013      	str	r3, [r2, #0]

		DMA2->LIFCR = 0xffffffff;
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <TIM2_IRQHandler+0x74>)
 8000ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae4:	609a      	str	r2, [r3, #8]

		DMA2_Stream1->CR |= DMA_SxCR_EN;
 8000ae6:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <TIM2_IRQHandler+0x78>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a0e      	ldr	r2, [pc, #56]	; (8000b24 <TIM2_IRQHandler+0x78>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6013      	str	r3, [r2, #0]
		DMA2_Stream2->CR |= DMA_SxCR_EN;
 8000af2:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <TIM2_IRQHandler+0x7c>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a0c      	ldr	r2, [pc, #48]	; (8000b28 <TIM2_IRQHandler+0x7c>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6013      	str	r3, [r2, #0]
		DMA2_Stream6->CR |= DMA_SxCR_EN;
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <TIM2_IRQHandler+0x80>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <TIM2_IRQHandler+0x80>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6013      	str	r3, [r2, #0]

		//UART clear buffer


		TIM1->CR1 |= TIM_CR1_CEN;
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <TIM2_IRQHandler+0x84>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a08      	ldr	r2, [pc, #32]	; (8000b30 <TIM2_IRQHandler+0x84>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6013      	str	r3, [r2, #0]
	}
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	40026400 	.word	0x40026400
 8000b24:	40026428 	.word	0x40026428
 8000b28:	40026440 	.word	0x40026440
 8000b2c:	400264a0 	.word	0x400264a0
 8000b30:	40010000 	.word	0x40010000

08000b34 <startLEDBufferTransmission>:

void startLEDBufferTransmission(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
	TIM1->CR1 |= (TIM_CR1_CEN);
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <startLEDBufferTransmission+0x1c>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <startLEDBufferTransmission+0x1c>)
 8000b3e:	f043 0301 	orr.w	r3, r3, #1
 8000b42:	6013      	str	r3, [r2, #0]
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	40010000 	.word	0x40010000

08000b54 <strcmp_v>:
void (*effectSelector)(void) = effect3Select;

uint8_t strcmp_v(const int8_t* first, const int8_t* second);

uint8_t strcmp_v(const int8_t* first, const int8_t* second)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	73fb      	strb	r3, [r7, #15]
	while(first[i] == second[i] && i < 3)
 8000b62:	e002      	b.n	8000b6a <strcmp_v+0x16>
	{
		i++;
 8000b64:	7bfb      	ldrb	r3, [r7, #15]
 8000b66:	3301      	adds	r3, #1
 8000b68:	73fb      	strb	r3, [r7, #15]
	while(first[i] == second[i] && i < 3)
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	4413      	add	r3, r2
 8000b70:	f993 2000 	ldrsb.w	r2, [r3]
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
 8000b76:	6839      	ldr	r1, [r7, #0]
 8000b78:	440b      	add	r3, r1
 8000b7a:	f993 3000 	ldrsb.w	r3, [r3]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d102      	bne.n	8000b88 <strcmp_v+0x34>
 8000b82:	7bfb      	ldrb	r3, [r7, #15]
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d9ed      	bls.n	8000b64 <strcmp_v+0x10>
	}
	return i == 3 ? 1 : 0;
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	2b03      	cmp	r3, #3
 8000b8c:	bf0c      	ite	eq
 8000b8e:	2301      	moveq	r3, #1
 8000b90:	2300      	movne	r3, #0
 8000b92:	b2db      	uxtb	r3, r3
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	if(strcmp_v(effect1, received_string))
 8000ba8:	4936      	ldr	r1, [pc, #216]	; (8000c84 <HAL_UART_RxCpltCallback+0xe4>)
 8000baa:	4837      	ldr	r0, [pc, #220]	; (8000c88 <HAL_UART_RxCpltCallback+0xe8>)
 8000bac:	f7ff ffd2 	bl	8000b54 <strcmp_v>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d00b      	beq.n	8000bce <HAL_UART_RxCpltCallback+0x2e>
	{
		HAL_UART_Transmit(&huart1, "Efekat 1\n", sizeof("Efekat 1\n"), 100);
 8000bb6:	2364      	movs	r3, #100	; 0x64
 8000bb8:	220a      	movs	r2, #10
 8000bba:	4934      	ldr	r1, [pc, #208]	; (8000c8c <HAL_UART_RxCpltCallback+0xec>)
 8000bbc:	4834      	ldr	r0, [pc, #208]	; (8000c90 <HAL_UART_RxCpltCallback+0xf0>)
 8000bbe:	f002 fb28 	bl	8003212 <HAL_UART_Transmit>
		effectSelector = effect1Select;
 8000bc2:	4b34      	ldr	r3, [pc, #208]	; (8000c94 <HAL_UART_RxCpltCallback+0xf4>)
 8000bc4:	4a34      	ldr	r2, [pc, #208]	; (8000c98 <HAL_UART_RxCpltCallback+0xf8>)
 8000bc6:	601a      	str	r2, [r3, #0]
		effectSelectorFlag = 1;
 8000bc8:	4b34      	ldr	r3, [pc, #208]	; (8000c9c <HAL_UART_RxCpltCallback+0xfc>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	701a      	strb	r2, [r3, #0]
	}

	if(strcmp_v(effect2, received_string))
 8000bce:	492d      	ldr	r1, [pc, #180]	; (8000c84 <HAL_UART_RxCpltCallback+0xe4>)
 8000bd0:	4833      	ldr	r0, [pc, #204]	; (8000ca0 <HAL_UART_RxCpltCallback+0x100>)
 8000bd2:	f7ff ffbf 	bl	8000b54 <strcmp_v>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d00b      	beq.n	8000bf4 <HAL_UART_RxCpltCallback+0x54>
	{
		HAL_UART_Transmit(&huart1, "Efekat 2\n", sizeof("Efekat 2\n"), 100);
 8000bdc:	2364      	movs	r3, #100	; 0x64
 8000bde:	220a      	movs	r2, #10
 8000be0:	4930      	ldr	r1, [pc, #192]	; (8000ca4 <HAL_UART_RxCpltCallback+0x104>)
 8000be2:	482b      	ldr	r0, [pc, #172]	; (8000c90 <HAL_UART_RxCpltCallback+0xf0>)
 8000be4:	f002 fb15 	bl	8003212 <HAL_UART_Transmit>
		effectSelector = effect2Select;
 8000be8:	4b2a      	ldr	r3, [pc, #168]	; (8000c94 <HAL_UART_RxCpltCallback+0xf4>)
 8000bea:	4a2f      	ldr	r2, [pc, #188]	; (8000ca8 <HAL_UART_RxCpltCallback+0x108>)
 8000bec:	601a      	str	r2, [r3, #0]
		effectSelectorFlag = 1;
 8000bee:	4b2b      	ldr	r3, [pc, #172]	; (8000c9c <HAL_UART_RxCpltCallback+0xfc>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	701a      	strb	r2, [r3, #0]
	}

	if(strcmp_v(effect3, received_string))
 8000bf4:	4923      	ldr	r1, [pc, #140]	; (8000c84 <HAL_UART_RxCpltCallback+0xe4>)
 8000bf6:	482d      	ldr	r0, [pc, #180]	; (8000cac <HAL_UART_RxCpltCallback+0x10c>)
 8000bf8:	f7ff ffac 	bl	8000b54 <strcmp_v>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d00b      	beq.n	8000c1a <HAL_UART_RxCpltCallback+0x7a>
	{
		HAL_UART_Transmit(&huart1, "Efekat 3\n", sizeof("Efekat 3\n"), 100);
 8000c02:	2364      	movs	r3, #100	; 0x64
 8000c04:	220a      	movs	r2, #10
 8000c06:	492a      	ldr	r1, [pc, #168]	; (8000cb0 <HAL_UART_RxCpltCallback+0x110>)
 8000c08:	4821      	ldr	r0, [pc, #132]	; (8000c90 <HAL_UART_RxCpltCallback+0xf0>)
 8000c0a:	f002 fb02 	bl	8003212 <HAL_UART_Transmit>
		effectSelector = effect3Select;
 8000c0e:	4b21      	ldr	r3, [pc, #132]	; (8000c94 <HAL_UART_RxCpltCallback+0xf4>)
 8000c10:	4a28      	ldr	r2, [pc, #160]	; (8000cb4 <HAL_UART_RxCpltCallback+0x114>)
 8000c12:	601a      	str	r2, [r3, #0]
		effectSelectorFlag = 1;
 8000c14:	4b21      	ldr	r3, [pc, #132]	; (8000c9c <HAL_UART_RxCpltCallback+0xfc>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	701a      	strb	r2, [r3, #0]
	}

	if(strcmp_v(effect4, received_string))
 8000c1a:	491a      	ldr	r1, [pc, #104]	; (8000c84 <HAL_UART_RxCpltCallback+0xe4>)
 8000c1c:	4826      	ldr	r0, [pc, #152]	; (8000cb8 <HAL_UART_RxCpltCallback+0x118>)
 8000c1e:	f7ff ff99 	bl	8000b54 <strcmp_v>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d00b      	beq.n	8000c40 <HAL_UART_RxCpltCallback+0xa0>
	{
		HAL_UART_Transmit(&huart1, "Efekat 4\n", sizeof("Efekat 4\n"), 100);
 8000c28:	2364      	movs	r3, #100	; 0x64
 8000c2a:	220a      	movs	r2, #10
 8000c2c:	4923      	ldr	r1, [pc, #140]	; (8000cbc <HAL_UART_RxCpltCallback+0x11c>)
 8000c2e:	4818      	ldr	r0, [pc, #96]	; (8000c90 <HAL_UART_RxCpltCallback+0xf0>)
 8000c30:	f002 faef 	bl	8003212 <HAL_UART_Transmit>
		effectSelector = effect4Select;
 8000c34:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <HAL_UART_RxCpltCallback+0xf4>)
 8000c36:	4a22      	ldr	r2, [pc, #136]	; (8000cc0 <HAL_UART_RxCpltCallback+0x120>)
 8000c38:	601a      	str	r2, [r3, #0]
		effectSelectorFlag = 1;
 8000c3a:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <HAL_UART_RxCpltCallback+0xfc>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	701a      	strb	r2, [r3, #0]
	}

	if(strcmp_v(effect5, received_string))
 8000c40:	4910      	ldr	r1, [pc, #64]	; (8000c84 <HAL_UART_RxCpltCallback+0xe4>)
 8000c42:	4820      	ldr	r0, [pc, #128]	; (8000cc4 <HAL_UART_RxCpltCallback+0x124>)
 8000c44:	f7ff ff86 	bl	8000b54 <strcmp_v>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d00b      	beq.n	8000c66 <HAL_UART_RxCpltCallback+0xc6>
	{
		HAL_UART_Transmit(&huart1, "Efekat 5\n", sizeof("Efekat 5\n"), 100);
 8000c4e:	2364      	movs	r3, #100	; 0x64
 8000c50:	220a      	movs	r2, #10
 8000c52:	491d      	ldr	r1, [pc, #116]	; (8000cc8 <HAL_UART_RxCpltCallback+0x128>)
 8000c54:	480e      	ldr	r0, [pc, #56]	; (8000c90 <HAL_UART_RxCpltCallback+0xf0>)
 8000c56:	f002 fadc 	bl	8003212 <HAL_UART_Transmit>
		effectSelector = effect5Select;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <HAL_UART_RxCpltCallback+0xf4>)
 8000c5c:	4a1b      	ldr	r2, [pc, #108]	; (8000ccc <HAL_UART_RxCpltCallback+0x12c>)
 8000c5e:	601a      	str	r2, [r3, #0]
		effectSelectorFlag = 1;
 8000c60:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <HAL_UART_RxCpltCallback+0xfc>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	701a      	strb	r2, [r3, #0]
	}

	HAL_UART_Transmit(&huart1, "Interrupt\n", sizeof("Interrupt\n"), 100);
 8000c66:	2364      	movs	r3, #100	; 0x64
 8000c68:	220b      	movs	r2, #11
 8000c6a:	4919      	ldr	r1, [pc, #100]	; (8000cd0 <HAL_UART_RxCpltCallback+0x130>)
 8000c6c:	4808      	ldr	r0, [pc, #32]	; (8000c90 <HAL_UART_RxCpltCallback+0xf0>)
 8000c6e:	f002 fad0 	bl	8003212 <HAL_UART_Transmit>
    HAL_UART_Receive_IT(&huart1, received_string, 3);
 8000c72:	2203      	movs	r2, #3
 8000c74:	4903      	ldr	r1, [pc, #12]	; (8000c84 <HAL_UART_RxCpltCallback+0xe4>)
 8000c76:	4806      	ldr	r0, [pc, #24]	; (8000c90 <HAL_UART_RxCpltCallback+0xf0>)
 8000c78:	f002 fb5d 	bl	8003336 <HAL_UART_Receive_IT>
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000648 	.word	0x20000648
 8000c88:	0800432c 	.word	0x0800432c
 8000c8c:	080042d8 	.word	0x080042d8
 8000c90:	20000604 	.word	0x20000604
 8000c94:	20000004 	.word	0x20000004
 8000c98:	08000da9 	.word	0x08000da9
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	08004330 	.word	0x08004330
 8000ca4:	080042e4 	.word	0x080042e4
 8000ca8:	08000ea9 	.word	0x08000ea9
 8000cac:	08004334 	.word	0x08004334
 8000cb0:	080042f0 	.word	0x080042f0
 8000cb4:	08001139 	.word	0x08001139
 8000cb8:	08004338 	.word	0x08004338
 8000cbc:	080042fc 	.word	0x080042fc
 8000cc0:	0800155d 	.word	0x0800155d
 8000cc4:	0800433c 	.word	0x0800433c
 8000cc8:	08004308 	.word	0x08004308
 8000ccc:	08001981 	.word	0x08001981
 8000cd0:	08004314 	.word	0x08004314

08000cd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
	HAL_Init();
 8000cda:	f001 fa41 	bl	8002160 <HAL_Init>
	SystemClock_Config();
 8000cde:	f001 f861 	bl	8001da4 <SystemClock_Config>

	MX_GPIO_Init();
 8000ce2:	f001 f8f1 	bl	8001ec8 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000ce6:	f001 f8c5 	bl	8001e74 <MX_USART1_UART_Init>

	HAL_UART_Transmit(&huart1, "Begin\n", 6, 100);
 8000cea:	2364      	movs	r3, #100	; 0x64
 8000cec:	2206      	movs	r2, #6
 8000cee:	4926      	ldr	r1, [pc, #152]	; (8000d88 <main+0xb4>)
 8000cf0:	4826      	ldr	r0, [pc, #152]	; (8000d8c <main+0xb8>)
 8000cf2:	f002 fa8e 	bl	8003212 <HAL_UART_Transmit>
	HAL_UART_Receive_IT (&huart1, received_string, 3);
 8000cf6:	2203      	movs	r2, #3
 8000cf8:	4925      	ldr	r1, [pc, #148]	; (8000d90 <main+0xbc>)
 8000cfa:	4824      	ldr	r0, [pc, #144]	; (8000d8c <main+0xb8>)
 8000cfc:	f002 fb1b 	bl	8003336 <HAL_UART_Receive_IT>

	initDMA();
 8000d00:	f7ff fdde 	bl	80008c0 <initDMA>
	initTIM1();
 8000d04:	f7ff fe5a 	bl	80009bc <initTIM1>
	initTIM2();
 8000d08:	f7ff fe7e 	bl	8000a08 <initTIM2>

	startLEDBufferTransmission();
 8000d0c:	f7ff ff12 	bl	8000b34 <startLEDBufferTransmission>

	static uint8_t color = 0;

	while (1)
	{
		effectSelector();
 8000d10:	4b20      	ldr	r3, [pc, #128]	; (8000d94 <main+0xc0>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4798      	blx	r3
		if(UPDATE_BUFFER_FLAG == 1)
 8000d16:	4b20      	ldr	r3, [pc, #128]	; (8000d98 <main+0xc4>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d1f8      	bne.n	8000d10 <main+0x3c>
		{
			//Clear buffer

			for(int i = 0; i < LED_COLOR_BUFFER_SIZE; i++)
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	e007      	b.n	8000d34 <main+0x60>
			{
			  LED_COLOR_BUFFER[i] = 0;
 8000d24:	4a1d      	ldr	r2, [pc, #116]	; (8000d9c <main+0xc8>)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int i = 0; i < LED_COLOR_BUFFER_SIZE; i++)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	3301      	adds	r3, #1
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f5b3 7f3a 	cmp.w	r3, #744	; 0x2e8
 8000d3a:	dbf3      	blt.n	8000d24 <main+0x50>
			}

			for(int i = 0; i < 10; i++)
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	e014      	b.n	8000d6c <main+0x98>
			{
			  channel_params_array[i].effectExecutor(&channel_params_array[i]);
 8000d42:	4917      	ldr	r1, [pc, #92]	; (8000da0 <main+0xcc>)
 8000d44:	683a      	ldr	r2, [r7, #0]
 8000d46:	4613      	mov	r3, r2
 8000d48:	00db      	lsls	r3, r3, #3
 8000d4a:	1a9b      	subs	r3, r3, r2
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	440b      	add	r3, r1
 8000d50:	3304      	adds	r3, #4
 8000d52:	6819      	ldr	r1, [r3, #0]
 8000d54:	683a      	ldr	r2, [r7, #0]
 8000d56:	4613      	mov	r3, r2
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	1a9b      	subs	r3, r3, r2
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	4a10      	ldr	r2, [pc, #64]	; (8000da0 <main+0xcc>)
 8000d60:	4413      	add	r3, r2
 8000d62:	4618      	mov	r0, r3
 8000d64:	4788      	blx	r1
			for(int i = 0; i < 10; i++)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	2b09      	cmp	r3, #9
 8000d70:	dde7      	ble.n	8000d42 <main+0x6e>
			}

			color ++;
 8000d72:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <main+0xd0>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	3301      	adds	r3, #1
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <main+0xd0>)
 8000d7c:	701a      	strb	r2, [r3, #0]

			UPDATE_BUFFER_FLAG = 0;
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <main+0xc4>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	701a      	strb	r2, [r3, #0]
		effectSelector();
 8000d84:	e7c4      	b.n	8000d10 <main+0x3c>
 8000d86:	bf00      	nop
 8000d88:	08004320 	.word	0x08004320
 8000d8c:	20000604 	.word	0x20000604
 8000d90:	20000648 	.word	0x20000648
 8000d94:	20000004 	.word	0x20000004
 8000d98:	20000600 	.word	0x20000600
 8000d9c:	20000030 	.word	0x20000030
 8000da0:	2000064c 	.word	0x2000064c
 8000da4:	20000764 	.word	0x20000764

08000da8 <effect1Select>:
		}
	}
}

void effect1Select(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
	if(effectSelectorFlag == 1)
 8000dac:	4b3b      	ldr	r3, [pc, #236]	; (8000e9c <effect1Select+0xf4>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d16e      	bne.n	8000e92 <effect1Select+0xea>
	{
		channel_params_array[0].channel = 0;
 8000db4:	4b3a      	ldr	r3, [pc, #232]	; (8000ea0 <effect1Select+0xf8>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	705a      	strb	r2, [r3, #1]
		channel_params_array[0].EEFECT = NO_EFFECT;
 8000dba:	4b39      	ldr	r3, [pc, #228]	; (8000ea0 <effect1Select+0xf8>)
 8000dbc:	2203      	movs	r2, #3
 8000dbe:	701a      	strb	r2, [r3, #0]
		channel_params_array[0].effectExecutor = &effectNothing;
 8000dc0:	4b37      	ldr	r3, [pc, #220]	; (8000ea0 <effect1Select+0xf8>)
 8000dc2:	4a38      	ldr	r2, [pc, #224]	; (8000ea4 <effect1Select+0xfc>)
 8000dc4:	605a      	str	r2, [r3, #4]

		channel_params_array[1].channel = 1;
 8000dc6:	4b36      	ldr	r3, [pc, #216]	; (8000ea0 <effect1Select+0xf8>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	775a      	strb	r2, [r3, #29]
		channel_params_array[1].EEFECT = NO_EFFECT;
 8000dcc:	4b34      	ldr	r3, [pc, #208]	; (8000ea0 <effect1Select+0xf8>)
 8000dce:	2203      	movs	r2, #3
 8000dd0:	771a      	strb	r2, [r3, #28]
		channel_params_array[1].effectExecutor = &effectNothing;
 8000dd2:	4b33      	ldr	r3, [pc, #204]	; (8000ea0 <effect1Select+0xf8>)
 8000dd4:	4a33      	ldr	r2, [pc, #204]	; (8000ea4 <effect1Select+0xfc>)
 8000dd6:	621a      	str	r2, [r3, #32]

		channel_params_array[2].channel = 2;
 8000dd8:	4b31      	ldr	r3, [pc, #196]	; (8000ea0 <effect1Select+0xf8>)
 8000dda:	2202      	movs	r2, #2
 8000ddc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		channel_params_array[2].EEFECT = NO_EFFECT;
 8000de0:	4b2f      	ldr	r3, [pc, #188]	; (8000ea0 <effect1Select+0xf8>)
 8000de2:	2203      	movs	r2, #3
 8000de4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		channel_params_array[2].effectExecutor = &effectNothing;
 8000de8:	4b2d      	ldr	r3, [pc, #180]	; (8000ea0 <effect1Select+0xf8>)
 8000dea:	4a2e      	ldr	r2, [pc, #184]	; (8000ea4 <effect1Select+0xfc>)
 8000dec:	63da      	str	r2, [r3, #60]	; 0x3c

		channel_params_array[3].channel = 3;
 8000dee:	4b2c      	ldr	r3, [pc, #176]	; (8000ea0 <effect1Select+0xf8>)
 8000df0:	2203      	movs	r2, #3
 8000df2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		channel_params_array[3].EEFECT = NO_EFFECT;
 8000df6:	4b2a      	ldr	r3, [pc, #168]	; (8000ea0 <effect1Select+0xf8>)
 8000df8:	2203      	movs	r2, #3
 8000dfa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		channel_params_array[3].effectExecutor = &effectNothing;
 8000dfe:	4b28      	ldr	r3, [pc, #160]	; (8000ea0 <effect1Select+0xf8>)
 8000e00:	4a28      	ldr	r2, [pc, #160]	; (8000ea4 <effect1Select+0xfc>)
 8000e02:	659a      	str	r2, [r3, #88]	; 0x58

		channel_params_array[4].channel = 4;
 8000e04:	4b26      	ldr	r3, [pc, #152]	; (8000ea0 <effect1Select+0xf8>)
 8000e06:	2204      	movs	r2, #4
 8000e08:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		channel_params_array[4].EEFECT = NO_EFFECT;
 8000e0c:	4b24      	ldr	r3, [pc, #144]	; (8000ea0 <effect1Select+0xf8>)
 8000e0e:	2203      	movs	r2, #3
 8000e10:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
		channel_params_array[4].effectExecutor = &effectNothing;
 8000e14:	4b22      	ldr	r3, [pc, #136]	; (8000ea0 <effect1Select+0xf8>)
 8000e16:	4a23      	ldr	r2, [pc, #140]	; (8000ea4 <effect1Select+0xfc>)
 8000e18:	675a      	str	r2, [r3, #116]	; 0x74

		channel_params_array[5].channel = 5;
 8000e1a:	4b21      	ldr	r3, [pc, #132]	; (8000ea0 <effect1Select+0xf8>)
 8000e1c:	2205      	movs	r2, #5
 8000e1e:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		channel_params_array[5].EEFECT = NO_EFFECT;
 8000e22:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <effect1Select+0xf8>)
 8000e24:	2203      	movs	r2, #3
 8000e26:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		channel_params_array[5].effectExecutor = &effectNothing;
 8000e2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <effect1Select+0xf8>)
 8000e2c:	4a1d      	ldr	r2, [pc, #116]	; (8000ea4 <effect1Select+0xfc>)
 8000e2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

		channel_params_array[6].channel = 6;
 8000e32:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <effect1Select+0xf8>)
 8000e34:	2206      	movs	r2, #6
 8000e36:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
		channel_params_array[6].EEFECT = NO_EFFECT;
 8000e3a:	4b19      	ldr	r3, [pc, #100]	; (8000ea0 <effect1Select+0xf8>)
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		channel_params_array[6].effectExecutor = &effectNothing;
 8000e42:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <effect1Select+0xf8>)
 8000e44:	4a17      	ldr	r2, [pc, #92]	; (8000ea4 <effect1Select+0xfc>)
 8000e46:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

		channel_params_array[7].channel = 7;
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <effect1Select+0xf8>)
 8000e4c:	2207      	movs	r2, #7
 8000e4e:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
		channel_params_array[7].EEFECT = NO_EFFECT;
 8000e52:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <effect1Select+0xf8>)
 8000e54:	2203      	movs	r2, #3
 8000e56:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
		channel_params_array[7].effectExecutor = &effectNothing;
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <effect1Select+0xf8>)
 8000e5c:	4a11      	ldr	r2, [pc, #68]	; (8000ea4 <effect1Select+0xfc>)
 8000e5e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

		channel_params_array[8].channel = 8;
 8000e62:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <effect1Select+0xf8>)
 8000e64:	2208      	movs	r2, #8
 8000e66:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
		channel_params_array[8].EEFECT = NO_EFFECT;
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <effect1Select+0xf8>)
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
		channel_params_array[8].effectExecutor = &effectNothing;
 8000e72:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <effect1Select+0xf8>)
 8000e74:	4a0b      	ldr	r2, [pc, #44]	; (8000ea4 <effect1Select+0xfc>)
 8000e76:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

		channel_params_array[9].channel = 9;
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <effect1Select+0xf8>)
 8000e7c:	2209      	movs	r2, #9
 8000e7e:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
		channel_params_array[9].EEFECT = NO_EFFECT;
 8000e82:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <effect1Select+0xf8>)
 8000e84:	2203      	movs	r2, #3
 8000e86:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
		channel_params_array[9].effectExecutor = &effectNothing;
 8000e8a:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <effect1Select+0xf8>)
 8000e8c:	4a05      	ldr	r2, [pc, #20]	; (8000ea4 <effect1Select+0xfc>)
 8000e8e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	}
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	20000000 	.word	0x20000000
 8000ea0:	2000064c 	.word	0x2000064c
 8000ea4:	0800078d 	.word	0x0800078d

08000ea8 <effect2Select>:

void effect2Select(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
	if(effectSelectorFlag == 1)
 8000eac:	4b9f      	ldr	r3, [pc, #636]	; (800112c <effect2Select+0x284>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	f040 8135 	bne.w	8001120 <effect2Select+0x278>
	{
		channel_params_array[0].channel = 0;
 8000eb6:	4b9e      	ldr	r3, [pc, #632]	; (8001130 <effect2Select+0x288>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	705a      	strb	r2, [r3, #1]
		channel_params_array[0].EEFECT = UP_DOWN_EFFECT_COLOR_CHANGE;
 8000ebc:	4b9c      	ldr	r3, [pc, #624]	; (8001130 <effect2Select+0x288>)
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	701a      	strb	r2, [r3, #0]
		channel_params_array[0].effectExecutor = &effectUpDownColorChange;
 8000ec2:	4b9b      	ldr	r3, [pc, #620]	; (8001130 <effect2Select+0x288>)
 8000ec4:	4a9b      	ldr	r2, [pc, #620]	; (8001134 <effect2Select+0x28c>)
 8000ec6:	605a      	str	r2, [r3, #4]
		channel_params_array[0].up_down_color_r = 128;
 8000ec8:	4b99      	ldr	r3, [pc, #612]	; (8001130 <effect2Select+0x288>)
 8000eca:	2280      	movs	r2, #128	; 0x80
 8000ecc:	761a      	strb	r2, [r3, #24]
		channel_params_array[0].up_down_color_g = 255;
 8000ece:	4b98      	ldr	r3, [pc, #608]	; (8001130 <effect2Select+0x288>)
 8000ed0:	22ff      	movs	r2, #255	; 0xff
 8000ed2:	765a      	strb	r2, [r3, #25]
		channel_params_array[0].up_down_color_b = 0;
 8000ed4:	4b96      	ldr	r3, [pc, #600]	; (8001130 <effect2Select+0x288>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	769a      	strb	r2, [r3, #26]
		channel_params_array[0].up_down_length = 5;
 8000eda:	4b95      	ldr	r3, [pc, #596]	; (8001130 <effect2Select+0x288>)
 8000edc:	2205      	movs	r2, #5
 8000ede:	755a      	strb	r2, [r3, #21]
		channel_params_array[0].up_down_current = 8;
 8000ee0:	4b93      	ldr	r3, [pc, #588]	; (8001130 <effect2Select+0x288>)
 8000ee2:	2208      	movs	r2, #8
 8000ee4:	759a      	strb	r2, [r3, #22]

		channel_params_array[1].channel = 1;
 8000ee6:	4b92      	ldr	r3, [pc, #584]	; (8001130 <effect2Select+0x288>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	775a      	strb	r2, [r3, #29]
		channel_params_array[1].EEFECT = UP_DOWN_EFFECT_COLOR_CHANGE;
 8000eec:	4b90      	ldr	r3, [pc, #576]	; (8001130 <effect2Select+0x288>)
 8000eee:	2202      	movs	r2, #2
 8000ef0:	771a      	strb	r2, [r3, #28]
		channel_params_array[1].effectExecutor = &effectUpDownColorChange;
 8000ef2:	4b8f      	ldr	r3, [pc, #572]	; (8001130 <effect2Select+0x288>)
 8000ef4:	4a8f      	ldr	r2, [pc, #572]	; (8001134 <effect2Select+0x28c>)
 8000ef6:	621a      	str	r2, [r3, #32]
		channel_params_array[1].up_down_color_r = 128;
 8000ef8:	4b8d      	ldr	r3, [pc, #564]	; (8001130 <effect2Select+0x288>)
 8000efa:	2280      	movs	r2, #128	; 0x80
 8000efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		channel_params_array[1].up_down_color_g = 255;
 8000f00:	4b8b      	ldr	r3, [pc, #556]	; (8001130 <effect2Select+0x288>)
 8000f02:	22ff      	movs	r2, #255	; 0xff
 8000f04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		channel_params_array[1].up_down_color_b = 0;
 8000f08:	4b89      	ldr	r3, [pc, #548]	; (8001130 <effect2Select+0x288>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		channel_params_array[1].up_down_length = 5;
 8000f10:	4b87      	ldr	r3, [pc, #540]	; (8001130 <effect2Select+0x288>)
 8000f12:	2205      	movs	r2, #5
 8000f14:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		channel_params_array[1].up_down_current = 12;
 8000f18:	4b85      	ldr	r3, [pc, #532]	; (8001130 <effect2Select+0x288>)
 8000f1a:	220c      	movs	r2, #12
 8000f1c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

		channel_params_array[2].channel = 2;
 8000f20:	4b83      	ldr	r3, [pc, #524]	; (8001130 <effect2Select+0x288>)
 8000f22:	2202      	movs	r2, #2
 8000f24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		channel_params_array[2].EEFECT = UP_DOWN_EFFECT_COLOR_CHANGE;
 8000f28:	4b81      	ldr	r3, [pc, #516]	; (8001130 <effect2Select+0x288>)
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		channel_params_array[2].effectExecutor = &effectUpDownColorChange;
 8000f30:	4b7f      	ldr	r3, [pc, #508]	; (8001130 <effect2Select+0x288>)
 8000f32:	4a80      	ldr	r2, [pc, #512]	; (8001134 <effect2Select+0x28c>)
 8000f34:	63da      	str	r2, [r3, #60]	; 0x3c
		channel_params_array[2].up_down_color_r = 128;
 8000f36:	4b7e      	ldr	r3, [pc, #504]	; (8001130 <effect2Select+0x288>)
 8000f38:	2280      	movs	r2, #128	; 0x80
 8000f3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		channel_params_array[2].up_down_color_g = 255;
 8000f3e:	4b7c      	ldr	r3, [pc, #496]	; (8001130 <effect2Select+0x288>)
 8000f40:	22ff      	movs	r2, #255	; 0xff
 8000f42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		channel_params_array[2].up_down_color_b = 0;
 8000f46:	4b7a      	ldr	r3, [pc, #488]	; (8001130 <effect2Select+0x288>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		channel_params_array[2].up_down_length = 5;
 8000f4e:	4b78      	ldr	r3, [pc, #480]	; (8001130 <effect2Select+0x288>)
 8000f50:	2205      	movs	r2, #5
 8000f52:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		channel_params_array[2].up_down_current = 16;
 8000f56:	4b76      	ldr	r3, [pc, #472]	; (8001130 <effect2Select+0x288>)
 8000f58:	2210      	movs	r2, #16
 8000f5a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

		channel_params_array[3].channel = 3;
 8000f5e:	4b74      	ldr	r3, [pc, #464]	; (8001130 <effect2Select+0x288>)
 8000f60:	2203      	movs	r2, #3
 8000f62:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		channel_params_array[3].EEFECT = UP_DOWN_EFFECT_COLOR_CHANGE;
 8000f66:	4b72      	ldr	r3, [pc, #456]	; (8001130 <effect2Select+0x288>)
 8000f68:	2202      	movs	r2, #2
 8000f6a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		channel_params_array[3].effectExecutor = &effectUpDownColorChange;
 8000f6e:	4b70      	ldr	r3, [pc, #448]	; (8001130 <effect2Select+0x288>)
 8000f70:	4a70      	ldr	r2, [pc, #448]	; (8001134 <effect2Select+0x28c>)
 8000f72:	659a      	str	r2, [r3, #88]	; 0x58
		channel_params_array[3].up_down_color_r = 128;
 8000f74:	4b6e      	ldr	r3, [pc, #440]	; (8001130 <effect2Select+0x288>)
 8000f76:	2280      	movs	r2, #128	; 0x80
 8000f78:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		channel_params_array[3].up_down_color_g = 255;
 8000f7c:	4b6c      	ldr	r3, [pc, #432]	; (8001130 <effect2Select+0x288>)
 8000f7e:	22ff      	movs	r2, #255	; 0xff
 8000f80:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
		channel_params_array[3].up_down_color_b = 0;
 8000f84:	4b6a      	ldr	r3, [pc, #424]	; (8001130 <effect2Select+0x288>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
		channel_params_array[3].up_down_length = 5;
 8000f8c:	4b68      	ldr	r3, [pc, #416]	; (8001130 <effect2Select+0x288>)
 8000f8e:	2205      	movs	r2, #5
 8000f90:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
		channel_params_array[3].up_down_current = 20;
 8000f94:	4b66      	ldr	r3, [pc, #408]	; (8001130 <effect2Select+0x288>)
 8000f96:	2214      	movs	r2, #20
 8000f98:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

		channel_params_array[4].channel = 4;
 8000f9c:	4b64      	ldr	r3, [pc, #400]	; (8001130 <effect2Select+0x288>)
 8000f9e:	2204      	movs	r2, #4
 8000fa0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		channel_params_array[4].EEFECT = UP_DOWN_EFFECT_COLOR_CHANGE;
 8000fa4:	4b62      	ldr	r3, [pc, #392]	; (8001130 <effect2Select+0x288>)
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
		channel_params_array[4].effectExecutor = &effectUpDownColorChange;
 8000fac:	4b60      	ldr	r3, [pc, #384]	; (8001130 <effect2Select+0x288>)
 8000fae:	4a61      	ldr	r2, [pc, #388]	; (8001134 <effect2Select+0x28c>)
 8000fb0:	675a      	str	r2, [r3, #116]	; 0x74
		channel_params_array[4].up_down_color_r = 128;
 8000fb2:	4b5f      	ldr	r3, [pc, #380]	; (8001130 <effect2Select+0x288>)
 8000fb4:	2280      	movs	r2, #128	; 0x80
 8000fb6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		channel_params_array[4].up_down_color_g = 255;
 8000fba:	4b5d      	ldr	r3, [pc, #372]	; (8001130 <effect2Select+0x288>)
 8000fbc:	22ff      	movs	r2, #255	; 0xff
 8000fbe:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
		channel_params_array[4].up_down_color_b = 0;
 8000fc2:	4b5b      	ldr	r3, [pc, #364]	; (8001130 <effect2Select+0x288>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
		channel_params_array[4].up_down_length = 5;
 8000fca:	4b59      	ldr	r3, [pc, #356]	; (8001130 <effect2Select+0x288>)
 8000fcc:	2205      	movs	r2, #5
 8000fce:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
		channel_params_array[4].up_down_current = 24;
 8000fd2:	4b57      	ldr	r3, [pc, #348]	; (8001130 <effect2Select+0x288>)
 8000fd4:	2218      	movs	r2, #24
 8000fd6:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86

		channel_params_array[5].channel = 5;
 8000fda:	4b55      	ldr	r3, [pc, #340]	; (8001130 <effect2Select+0x288>)
 8000fdc:	2205      	movs	r2, #5
 8000fde:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		channel_params_array[5].EEFECT = UP_DOWN_EFFECT_COLOR_CHANGE;
 8000fe2:	4b53      	ldr	r3, [pc, #332]	; (8001130 <effect2Select+0x288>)
 8000fe4:	2202      	movs	r2, #2
 8000fe6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		channel_params_array[5].effectExecutor = &effectUpDownColorChange;
 8000fea:	4b51      	ldr	r3, [pc, #324]	; (8001130 <effect2Select+0x288>)
 8000fec:	4a51      	ldr	r2, [pc, #324]	; (8001134 <effect2Select+0x28c>)
 8000fee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		channel_params_array[5].up_down_color_r = 128;
 8000ff2:	4b4f      	ldr	r3, [pc, #316]	; (8001130 <effect2Select+0x288>)
 8000ff4:	2280      	movs	r2, #128	; 0x80
 8000ff6:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
		channel_params_array[5].up_down_color_g = 255;
 8000ffa:	4b4d      	ldr	r3, [pc, #308]	; (8001130 <effect2Select+0x288>)
 8000ffc:	22ff      	movs	r2, #255	; 0xff
 8000ffe:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
		channel_params_array[5].up_down_color_b = 0;
 8001002:	4b4b      	ldr	r3, [pc, #300]	; (8001130 <effect2Select+0x288>)
 8001004:	2200      	movs	r2, #0
 8001006:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
		channel_params_array[5].up_down_length = 5;
 800100a:	4b49      	ldr	r3, [pc, #292]	; (8001130 <effect2Select+0x288>)
 800100c:	2205      	movs	r2, #5
 800100e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
		channel_params_array[5].up_down_current = 24;
 8001012:	4b47      	ldr	r3, [pc, #284]	; (8001130 <effect2Select+0x288>)
 8001014:	2218      	movs	r2, #24
 8001016:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2

		channel_params_array[6].channel = 6;
 800101a:	4b45      	ldr	r3, [pc, #276]	; (8001130 <effect2Select+0x288>)
 800101c:	2206      	movs	r2, #6
 800101e:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
		channel_params_array[6].EEFECT = UP_DOWN_EFFECT_COLOR_CHANGE;
 8001022:	4b43      	ldr	r3, [pc, #268]	; (8001130 <effect2Select+0x288>)
 8001024:	2202      	movs	r2, #2
 8001026:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		channel_params_array[6].effectExecutor = &effectUpDownColorChange;
 800102a:	4b41      	ldr	r3, [pc, #260]	; (8001130 <effect2Select+0x288>)
 800102c:	4a41      	ldr	r2, [pc, #260]	; (8001134 <effect2Select+0x28c>)
 800102e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		channel_params_array[6].up_down_color_r = 128;
 8001032:	4b3f      	ldr	r3, [pc, #252]	; (8001130 <effect2Select+0x288>)
 8001034:	2280      	movs	r2, #128	; 0x80
 8001036:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		channel_params_array[6].up_down_color_g = 255;
 800103a:	4b3d      	ldr	r3, [pc, #244]	; (8001130 <effect2Select+0x288>)
 800103c:	22ff      	movs	r2, #255	; 0xff
 800103e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
		channel_params_array[6].up_down_color_b = 0;
 8001042:	4b3b      	ldr	r3, [pc, #236]	; (8001130 <effect2Select+0x288>)
 8001044:	2200      	movs	r2, #0
 8001046:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
		channel_params_array[6].up_down_length = 5;
 800104a:	4b39      	ldr	r3, [pc, #228]	; (8001130 <effect2Select+0x288>)
 800104c:	2205      	movs	r2, #5
 800104e:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
		channel_params_array[6].up_down_current = 20;
 8001052:	4b37      	ldr	r3, [pc, #220]	; (8001130 <effect2Select+0x288>)
 8001054:	2214      	movs	r2, #20
 8001056:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe

		channel_params_array[7].channel = 7;
 800105a:	4b35      	ldr	r3, [pc, #212]	; (8001130 <effect2Select+0x288>)
 800105c:	2207      	movs	r2, #7
 800105e:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
		channel_params_array[7].EEFECT = UP_DOWN_EFFECT_COLOR_CHANGE;
 8001062:	4b33      	ldr	r3, [pc, #204]	; (8001130 <effect2Select+0x288>)
 8001064:	2202      	movs	r2, #2
 8001066:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
		channel_params_array[7].effectExecutor = &effectUpDownColorChange;
 800106a:	4b31      	ldr	r3, [pc, #196]	; (8001130 <effect2Select+0x288>)
 800106c:	4a31      	ldr	r2, [pc, #196]	; (8001134 <effect2Select+0x28c>)
 800106e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		channel_params_array[7].up_down_color_r = 128;
 8001072:	4b2f      	ldr	r3, [pc, #188]	; (8001130 <effect2Select+0x288>)
 8001074:	2280      	movs	r2, #128	; 0x80
 8001076:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
		channel_params_array[7].up_down_color_g = 255;
 800107a:	4b2d      	ldr	r3, [pc, #180]	; (8001130 <effect2Select+0x288>)
 800107c:	22ff      	movs	r2, #255	; 0xff
 800107e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
		channel_params_array[7].up_down_color_b = 0;
 8001082:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <effect2Select+0x288>)
 8001084:	2200      	movs	r2, #0
 8001086:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
		channel_params_array[7].up_down_length = 5;
 800108a:	4b29      	ldr	r3, [pc, #164]	; (8001130 <effect2Select+0x288>)
 800108c:	2205      	movs	r2, #5
 800108e:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
		channel_params_array[7].up_down_current = 16;
 8001092:	4b27      	ldr	r3, [pc, #156]	; (8001130 <effect2Select+0x288>)
 8001094:	2210      	movs	r2, #16
 8001096:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda

		channel_params_array[8].channel = 8;
 800109a:	4b25      	ldr	r3, [pc, #148]	; (8001130 <effect2Select+0x288>)
 800109c:	2208      	movs	r2, #8
 800109e:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
		channel_params_array[8].EEFECT = UP_DOWN_EFFECT_COLOR_CHANGE;
 80010a2:	4b23      	ldr	r3, [pc, #140]	; (8001130 <effect2Select+0x288>)
 80010a4:	2202      	movs	r2, #2
 80010a6:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
		channel_params_array[8].effectExecutor = &effectUpDownColorChange;
 80010aa:	4b21      	ldr	r3, [pc, #132]	; (8001130 <effect2Select+0x288>)
 80010ac:	4a21      	ldr	r2, [pc, #132]	; (8001134 <effect2Select+0x28c>)
 80010ae:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		channel_params_array[8].up_down_color_r = 128;
 80010b2:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <effect2Select+0x288>)
 80010b4:	2280      	movs	r2, #128	; 0x80
 80010b6:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		channel_params_array[8].up_down_color_g = 255;
 80010ba:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <effect2Select+0x288>)
 80010bc:	22ff      	movs	r2, #255	; 0xff
 80010be:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
		channel_params_array[8].up_down_color_b = 0;
 80010c2:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <effect2Select+0x288>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
		channel_params_array[8].up_down_length = 5;
 80010ca:	4b19      	ldr	r3, [pc, #100]	; (8001130 <effect2Select+0x288>)
 80010cc:	2205      	movs	r2, #5
 80010ce:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
		channel_params_array[2].up_down_current = 12;
 80010d2:	4b17      	ldr	r3, [pc, #92]	; (8001130 <effect2Select+0x288>)
 80010d4:	220c      	movs	r2, #12
 80010d6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

		channel_params_array[9].channel = 9;
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <effect2Select+0x288>)
 80010dc:	2209      	movs	r2, #9
 80010de:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
		channel_params_array[9].EEFECT = UP_DOWN_EFFECT_COLOR_CHANGE;
 80010e2:	4b13      	ldr	r3, [pc, #76]	; (8001130 <effect2Select+0x288>)
 80010e4:	2202      	movs	r2, #2
 80010e6:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
		channel_params_array[9].effectExecutor = &effectUpDownColorChange;
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <effect2Select+0x288>)
 80010ec:	4a11      	ldr	r2, [pc, #68]	; (8001134 <effect2Select+0x28c>)
 80010ee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		channel_params_array[9].up_down_color_r = 128;
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <effect2Select+0x288>)
 80010f4:	2280      	movs	r2, #128	; 0x80
 80010f6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
		channel_params_array[9].up_down_color_g = 255;
 80010fa:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <effect2Select+0x288>)
 80010fc:	22ff      	movs	r2, #255	; 0xff
 80010fe:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		channel_params_array[9].up_down_color_b = 0;
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <effect2Select+0x288>)
 8001104:	2200      	movs	r2, #0
 8001106:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
		channel_params_array[9].up_down_length = 5;
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <effect2Select+0x288>)
 800110c:	2205      	movs	r2, #5
 800110e:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
		channel_params_array[9].up_down_current = 8;
 8001112:	4b07      	ldr	r3, [pc, #28]	; (8001130 <effect2Select+0x288>)
 8001114:	2208      	movs	r2, #8
 8001116:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112

		effectSelectorFlag = 0;
 800111a:	4b04      	ldr	r3, [pc, #16]	; (800112c <effect2Select+0x284>)
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
	}
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20000000 	.word	0x20000000
 8001130:	2000064c 	.word	0x2000064c
 8001134:	080006c9 	.word	0x080006c9

08001138 <effect3Select>:

void effect3Select(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
	if(effectSelectorFlag == 1)
 800113c:	4bc3      	ldr	r3, [pc, #780]	; (800144c <effect3Select+0x314>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b01      	cmp	r3, #1
 8001142:	f040 8200 	bne.w	8001546 <effect3Select+0x40e>
	{
		channel_params_array[0].channel = 0;
 8001146:	4bc2      	ldr	r3, [pc, #776]	; (8001450 <effect3Select+0x318>)
 8001148:	2200      	movs	r2, #0
 800114a:	705a      	strb	r2, [r3, #1]
		channel_params_array[0].EEFECT = ONE_COLOR_EFFECT_DIM;
 800114c:	4bc0      	ldr	r3, [pc, #768]	; (8001450 <effect3Select+0x318>)
 800114e:	2203      	movs	r2, #3
 8001150:	701a      	strb	r2, [r3, #0]
		channel_params_array[0].effectExecutor = &effectOneColorDim;
 8001152:	4bbf      	ldr	r3, [pc, #764]	; (8001450 <effect3Select+0x318>)
 8001154:	4abf      	ldr	r2, [pc, #764]	; (8001454 <effect3Select+0x31c>)
 8001156:	605a      	str	r2, [r3, #4]
		channel_params_array[0].one_color_dim_r = 0;
 8001158:	4bbd      	ldr	r3, [pc, #756]	; (8001450 <effect3Select+0x318>)
 800115a:	2200      	movs	r2, #0
 800115c:	72da      	strb	r2, [r3, #11]
		channel_params_array[0].one_color_dim_g = 255;
 800115e:	4bbc      	ldr	r3, [pc, #752]	; (8001450 <effect3Select+0x318>)
 8001160:	22ff      	movs	r2, #255	; 0xff
 8001162:	731a      	strb	r2, [r3, #12]
		channel_params_array[0].one_color_dim_b = 128;
 8001164:	4bba      	ldr	r3, [pc, #744]	; (8001450 <effect3Select+0x318>)
 8001166:	2280      	movs	r2, #128	; 0x80
 8001168:	735a      	strb	r2, [r3, #13]
		channel_params_array[0].one_color_dim_r_flag = 1;
 800116a:	4bb9      	ldr	r3, [pc, #740]	; (8001450 <effect3Select+0x318>)
 800116c:	2201      	movs	r2, #1
 800116e:	739a      	strb	r2, [r3, #14]
		channel_params_array[0].one_color_dim_g_flag = 1;
 8001170:	4bb7      	ldr	r3, [pc, #732]	; (8001450 <effect3Select+0x318>)
 8001172:	2201      	movs	r2, #1
 8001174:	73da      	strb	r2, [r3, #15]
		channel_params_array[0].one_color_dim_b_flag = 1;
 8001176:	4bb6      	ldr	r3, [pc, #728]	; (8001450 <effect3Select+0x318>)
 8001178:	2201      	movs	r2, #1
 800117a:	741a      	strb	r2, [r3, #16]
		channel_params_array[0].one_color_dim_increment = 1;
 800117c:	4bb4      	ldr	r3, [pc, #720]	; (8001450 <effect3Select+0x318>)
 800117e:	2201      	movs	r2, #1
 8001180:	745a      	strb	r2, [r3, #17]
		channel_params_array[0].one_color_dim_r_dir = 0;
 8001182:	4bb3      	ldr	r3, [pc, #716]	; (8001450 <effect3Select+0x318>)
 8001184:	2200      	movs	r2, #0
 8001186:	749a      	strb	r2, [r3, #18]
		channel_params_array[0].one_color_dim_g_dir = 0;
 8001188:	4bb1      	ldr	r3, [pc, #708]	; (8001450 <effect3Select+0x318>)
 800118a:	2200      	movs	r2, #0
 800118c:	74da      	strb	r2, [r3, #19]
		channel_params_array[0].one_color_dim_b_dir = 0;
 800118e:	4bb0      	ldr	r3, [pc, #704]	; (8001450 <effect3Select+0x318>)
 8001190:	2200      	movs	r2, #0
 8001192:	751a      	strb	r2, [r3, #20]

		channel_params_array[1].channel = 1;
 8001194:	4bae      	ldr	r3, [pc, #696]	; (8001450 <effect3Select+0x318>)
 8001196:	2201      	movs	r2, #1
 8001198:	775a      	strb	r2, [r3, #29]
		channel_params_array[1].EEFECT = ONE_COLOR_EFFECT_DIM;
 800119a:	4bad      	ldr	r3, [pc, #692]	; (8001450 <effect3Select+0x318>)
 800119c:	2203      	movs	r2, #3
 800119e:	771a      	strb	r2, [r3, #28]
		channel_params_array[1].effectExecutor = &effectOneColorDim;
 80011a0:	4bab      	ldr	r3, [pc, #684]	; (8001450 <effect3Select+0x318>)
 80011a2:	4aac      	ldr	r2, [pc, #688]	; (8001454 <effect3Select+0x31c>)
 80011a4:	621a      	str	r2, [r3, #32]
		channel_params_array[1].one_color_dim_r = 255;
 80011a6:	4baa      	ldr	r3, [pc, #680]	; (8001450 <effect3Select+0x318>)
 80011a8:	22ff      	movs	r2, #255	; 0xff
 80011aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		channel_params_array[1].one_color_dim_g = 0;
 80011ae:	4ba8      	ldr	r3, [pc, #672]	; (8001450 <effect3Select+0x318>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		channel_params_array[1].one_color_dim_b = 128;
 80011b6:	4ba6      	ldr	r3, [pc, #664]	; (8001450 <effect3Select+0x318>)
 80011b8:	2280      	movs	r2, #128	; 0x80
 80011ba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		channel_params_array[1].one_color_dim_r_flag = 1;
 80011be:	4ba4      	ldr	r3, [pc, #656]	; (8001450 <effect3Select+0x318>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		channel_params_array[1].one_color_dim_g_flag = 1;
 80011c6:	4ba2      	ldr	r3, [pc, #648]	; (8001450 <effect3Select+0x318>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		channel_params_array[1].one_color_dim_b_flag = 1;
 80011ce:	4ba0      	ldr	r3, [pc, #640]	; (8001450 <effect3Select+0x318>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		channel_params_array[1].one_color_dim_increment = 1;
 80011d6:	4b9e      	ldr	r3, [pc, #632]	; (8001450 <effect3Select+0x318>)
 80011d8:	2201      	movs	r2, #1
 80011da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		channel_params_array[1].one_color_dim_r_dir = 0;
 80011de:	4b9c      	ldr	r3, [pc, #624]	; (8001450 <effect3Select+0x318>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		channel_params_array[1].one_color_dim_g_dir = 0;
 80011e6:	4b9a      	ldr	r3, [pc, #616]	; (8001450 <effect3Select+0x318>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		channel_params_array[1].one_color_dim_b_dir = 0;
 80011ee:	4b98      	ldr	r3, [pc, #608]	; (8001450 <effect3Select+0x318>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

		channel_params_array[2].channel = 2;
 80011f6:	4b96      	ldr	r3, [pc, #600]	; (8001450 <effect3Select+0x318>)
 80011f8:	2202      	movs	r2, #2
 80011fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		channel_params_array[2].EEFECT = ONE_COLOR_EFFECT_DIM;
 80011fe:	4b94      	ldr	r3, [pc, #592]	; (8001450 <effect3Select+0x318>)
 8001200:	2203      	movs	r2, #3
 8001202:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		channel_params_array[2].effectExecutor = &effectOneColorDim;
 8001206:	4b92      	ldr	r3, [pc, #584]	; (8001450 <effect3Select+0x318>)
 8001208:	4a92      	ldr	r2, [pc, #584]	; (8001454 <effect3Select+0x31c>)
 800120a:	63da      	str	r2, [r3, #60]	; 0x3c
		channel_params_array[2].one_color_dim_r = 128;
 800120c:	4b90      	ldr	r3, [pc, #576]	; (8001450 <effect3Select+0x318>)
 800120e:	2280      	movs	r2, #128	; 0x80
 8001210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
		channel_params_array[2].one_color_dim_g = 128;
 8001214:	4b8e      	ldr	r3, [pc, #568]	; (8001450 <effect3Select+0x318>)
 8001216:	2280      	movs	r2, #128	; 0x80
 8001218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		channel_params_array[2].one_color_dim_b = 128;
 800121c:	4b8c      	ldr	r3, [pc, #560]	; (8001450 <effect3Select+0x318>)
 800121e:	2280      	movs	r2, #128	; 0x80
 8001220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		channel_params_array[2].one_color_dim_r_flag = 1;
 8001224:	4b8a      	ldr	r3, [pc, #552]	; (8001450 <effect3Select+0x318>)
 8001226:	2201      	movs	r2, #1
 8001228:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		channel_params_array[2].one_color_dim_g_flag = 1;
 800122c:	4b88      	ldr	r3, [pc, #544]	; (8001450 <effect3Select+0x318>)
 800122e:	2201      	movs	r2, #1
 8001230:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
		channel_params_array[2].one_color_dim_b_flag = 1;
 8001234:	4b86      	ldr	r3, [pc, #536]	; (8001450 <effect3Select+0x318>)
 8001236:	2201      	movs	r2, #1
 8001238:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		channel_params_array[2].one_color_dim_increment = 1;
 800123c:	4b84      	ldr	r3, [pc, #528]	; (8001450 <effect3Select+0x318>)
 800123e:	2201      	movs	r2, #1
 8001240:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		channel_params_array[2].one_color_dim_r_dir = 0;
 8001244:	4b82      	ldr	r3, [pc, #520]	; (8001450 <effect3Select+0x318>)
 8001246:	2200      	movs	r2, #0
 8001248:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		channel_params_array[2].one_color_dim_g_dir = 0;
 800124c:	4b80      	ldr	r3, [pc, #512]	; (8001450 <effect3Select+0x318>)
 800124e:	2200      	movs	r2, #0
 8001250:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		channel_params_array[2].one_color_dim_b_dir = 0;
 8001254:	4b7e      	ldr	r3, [pc, #504]	; (8001450 <effect3Select+0x318>)
 8001256:	2200      	movs	r2, #0
 8001258:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

		channel_params_array[3].channel = 3;
 800125c:	4b7c      	ldr	r3, [pc, #496]	; (8001450 <effect3Select+0x318>)
 800125e:	2203      	movs	r2, #3
 8001260:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		channel_params_array[3].EEFECT = ONE_COLOR_EFFECT_DIM;
 8001264:	4b7a      	ldr	r3, [pc, #488]	; (8001450 <effect3Select+0x318>)
 8001266:	2203      	movs	r2, #3
 8001268:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		channel_params_array[3].effectExecutor = &effectOneColorDim;
 800126c:	4b78      	ldr	r3, [pc, #480]	; (8001450 <effect3Select+0x318>)
 800126e:	4a79      	ldr	r2, [pc, #484]	; (8001454 <effect3Select+0x31c>)
 8001270:	659a      	str	r2, [r3, #88]	; 0x58
		channel_params_array[3].one_color_dim_r = 0;
 8001272:	4b77      	ldr	r3, [pc, #476]	; (8001450 <effect3Select+0x318>)
 8001274:	2200      	movs	r2, #0
 8001276:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
		channel_params_array[3].one_color_dim_g = 0;
 800127a:	4b75      	ldr	r3, [pc, #468]	; (8001450 <effect3Select+0x318>)
 800127c:	2200      	movs	r2, #0
 800127e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		channel_params_array[3].one_color_dim_b = 128;
 8001282:	4b73      	ldr	r3, [pc, #460]	; (8001450 <effect3Select+0x318>)
 8001284:	2280      	movs	r2, #128	; 0x80
 8001286:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
		channel_params_array[3].one_color_dim_r_flag = 1;
 800128a:	4b71      	ldr	r3, [pc, #452]	; (8001450 <effect3Select+0x318>)
 800128c:	2201      	movs	r2, #1
 800128e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
		channel_params_array[3].one_color_dim_g_flag = 1;
 8001292:	4b6f      	ldr	r3, [pc, #444]	; (8001450 <effect3Select+0x318>)
 8001294:	2201      	movs	r2, #1
 8001296:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
		channel_params_array[3].one_color_dim_b_flag = 1;
 800129a:	4b6d      	ldr	r3, [pc, #436]	; (8001450 <effect3Select+0x318>)
 800129c:	2201      	movs	r2, #1
 800129e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
		channel_params_array[3].one_color_dim_increment = 1;
 80012a2:	4b6b      	ldr	r3, [pc, #428]	; (8001450 <effect3Select+0x318>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
		channel_params_array[3].one_color_dim_r_dir = 0;
 80012aa:	4b69      	ldr	r3, [pc, #420]	; (8001450 <effect3Select+0x318>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
		channel_params_array[3].one_color_dim_g_dir = 0;
 80012b2:	4b67      	ldr	r3, [pc, #412]	; (8001450 <effect3Select+0x318>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
		channel_params_array[3].one_color_dim_b_dir = 0;
 80012ba:	4b65      	ldr	r3, [pc, #404]	; (8001450 <effect3Select+0x318>)
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

		channel_params_array[4].channel = 4;
 80012c2:	4b63      	ldr	r3, [pc, #396]	; (8001450 <effect3Select+0x318>)
 80012c4:	2204      	movs	r2, #4
 80012c6:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		channel_params_array[4].EEFECT = ONE_COLOR_EFFECT_DIM;
 80012ca:	4b61      	ldr	r3, [pc, #388]	; (8001450 <effect3Select+0x318>)
 80012cc:	2203      	movs	r2, #3
 80012ce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
		channel_params_array[4].effectExecutor = &effectOneColorDim;
 80012d2:	4b5f      	ldr	r3, [pc, #380]	; (8001450 <effect3Select+0x318>)
 80012d4:	4a5f      	ldr	r2, [pc, #380]	; (8001454 <effect3Select+0x31c>)
 80012d6:	675a      	str	r2, [r3, #116]	; 0x74
		channel_params_array[4].one_color_dim_r = 0;
 80012d8:	4b5d      	ldr	r3, [pc, #372]	; (8001450 <effect3Select+0x318>)
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
		channel_params_array[4].one_color_dim_g = 255;
 80012e0:	4b5b      	ldr	r3, [pc, #364]	; (8001450 <effect3Select+0x318>)
 80012e2:	22ff      	movs	r2, #255	; 0xff
 80012e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
		channel_params_array[4].one_color_dim_b = 0;
 80012e8:	4b59      	ldr	r3, [pc, #356]	; (8001450 <effect3Select+0x318>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
		channel_params_array[4].one_color_dim_r_flag = 1;
 80012f0:	4b57      	ldr	r3, [pc, #348]	; (8001450 <effect3Select+0x318>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		channel_params_array[4].one_color_dim_g_flag = 1;
 80012f8:	4b55      	ldr	r3, [pc, #340]	; (8001450 <effect3Select+0x318>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
		channel_params_array[4].one_color_dim_b_flag = 1;
 8001300:	4b53      	ldr	r3, [pc, #332]	; (8001450 <effect3Select+0x318>)
 8001302:	2201      	movs	r2, #1
 8001304:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		channel_params_array[4].one_color_dim_increment = 1;
 8001308:	4b51      	ldr	r3, [pc, #324]	; (8001450 <effect3Select+0x318>)
 800130a:	2201      	movs	r2, #1
 800130c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		channel_params_array[4].one_color_dim_r_dir = 0;
 8001310:	4b4f      	ldr	r3, [pc, #316]	; (8001450 <effect3Select+0x318>)
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		channel_params_array[4].one_color_dim_g_dir = 0;
 8001318:	4b4d      	ldr	r3, [pc, #308]	; (8001450 <effect3Select+0x318>)
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		channel_params_array[4].one_color_dim_b_dir = 0;
 8001320:	4b4b      	ldr	r3, [pc, #300]	; (8001450 <effect3Select+0x318>)
 8001322:	2200      	movs	r2, #0
 8001324:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

		channel_params_array[5].channel = 5;
 8001328:	4b49      	ldr	r3, [pc, #292]	; (8001450 <effect3Select+0x318>)
 800132a:	2205      	movs	r2, #5
 800132c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		channel_params_array[5].EEFECT = ONE_COLOR_EFFECT_DIM;
 8001330:	4b47      	ldr	r3, [pc, #284]	; (8001450 <effect3Select+0x318>)
 8001332:	2203      	movs	r2, #3
 8001334:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		channel_params_array[5].effectExecutor = &effectOneColorDim;
 8001338:	4b45      	ldr	r3, [pc, #276]	; (8001450 <effect3Select+0x318>)
 800133a:	4a46      	ldr	r2, [pc, #280]	; (8001454 <effect3Select+0x31c>)
 800133c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		channel_params_array[5].one_color_dim_r = 0;
 8001340:	4b43      	ldr	r3, [pc, #268]	; (8001450 <effect3Select+0x318>)
 8001342:	2200      	movs	r2, #0
 8001344:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
		channel_params_array[5].one_color_dim_g = 128;
 8001348:	4b41      	ldr	r3, [pc, #260]	; (8001450 <effect3Select+0x318>)
 800134a:	2280      	movs	r2, #128	; 0x80
 800134c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		channel_params_array[5].one_color_dim_b = 128;
 8001350:	4b3f      	ldr	r3, [pc, #252]	; (8001450 <effect3Select+0x318>)
 8001352:	2280      	movs	r2, #128	; 0x80
 8001354:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
		channel_params_array[5].one_color_dim_r_flag = 1;
 8001358:	4b3d      	ldr	r3, [pc, #244]	; (8001450 <effect3Select+0x318>)
 800135a:	2201      	movs	r2, #1
 800135c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
		channel_params_array[5].one_color_dim_g_flag = 1;
 8001360:	4b3b      	ldr	r3, [pc, #236]	; (8001450 <effect3Select+0x318>)
 8001362:	2201      	movs	r2, #1
 8001364:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
		channel_params_array[5].one_color_dim_b_flag = 1;
 8001368:	4b39      	ldr	r3, [pc, #228]	; (8001450 <effect3Select+0x318>)
 800136a:	2201      	movs	r2, #1
 800136c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		channel_params_array[5].one_color_dim_increment = 1;
 8001370:	4b37      	ldr	r3, [pc, #220]	; (8001450 <effect3Select+0x318>)
 8001372:	2201      	movs	r2, #1
 8001374:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
		channel_params_array[5].one_color_dim_r_dir = 0;
 8001378:	4b35      	ldr	r3, [pc, #212]	; (8001450 <effect3Select+0x318>)
 800137a:	2200      	movs	r2, #0
 800137c:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
		channel_params_array[5].one_color_dim_g_dir = 0;
 8001380:	4b33      	ldr	r3, [pc, #204]	; (8001450 <effect3Select+0x318>)
 8001382:	2200      	movs	r2, #0
 8001384:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
		channel_params_array[5].one_color_dim_b_dir = 0;
 8001388:	4b31      	ldr	r3, [pc, #196]	; (8001450 <effect3Select+0x318>)
 800138a:	2200      	movs	r2, #0
 800138c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

		channel_params_array[6].channel = 6;
 8001390:	4b2f      	ldr	r3, [pc, #188]	; (8001450 <effect3Select+0x318>)
 8001392:	2206      	movs	r2, #6
 8001394:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
		channel_params_array[6].EEFECT = ONE_COLOR_EFFECT_DIM;
 8001398:	4b2d      	ldr	r3, [pc, #180]	; (8001450 <effect3Select+0x318>)
 800139a:	2203      	movs	r2, #3
 800139c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		channel_params_array[6].effectExecutor = &effectOneColorDim;
 80013a0:	4b2b      	ldr	r3, [pc, #172]	; (8001450 <effect3Select+0x318>)
 80013a2:	4a2c      	ldr	r2, [pc, #176]	; (8001454 <effect3Select+0x31c>)
 80013a4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		channel_params_array[6].one_color_dim_r = 255;
 80013a8:	4b29      	ldr	r3, [pc, #164]	; (8001450 <effect3Select+0x318>)
 80013aa:	22ff      	movs	r2, #255	; 0xff
 80013ac:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
		channel_params_array[6].one_color_dim_g = 255;
 80013b0:	4b27      	ldr	r3, [pc, #156]	; (8001450 <effect3Select+0x318>)
 80013b2:	22ff      	movs	r2, #255	; 0xff
 80013b4:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		channel_params_array[6].one_color_dim_b = 0;
 80013b8:	4b25      	ldr	r3, [pc, #148]	; (8001450 <effect3Select+0x318>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
		channel_params_array[6].one_color_dim_r_flag = 1;
 80013c0:	4b23      	ldr	r3, [pc, #140]	; (8001450 <effect3Select+0x318>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
		channel_params_array[6].one_color_dim_g_flag = 1;
 80013c8:	4b21      	ldr	r3, [pc, #132]	; (8001450 <effect3Select+0x318>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
		channel_params_array[6].one_color_dim_b_flag = 1;
 80013d0:	4b1f      	ldr	r3, [pc, #124]	; (8001450 <effect3Select+0x318>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		channel_params_array[6].one_color_dim_increment = 1;
 80013d8:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <effect3Select+0x318>)
 80013da:	2201      	movs	r2, #1
 80013dc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
		channel_params_array[6].one_color_dim_r_dir = 0;
 80013e0:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <effect3Select+0x318>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		channel_params_array[6].one_color_dim_g_dir = 0;
 80013e8:	4b19      	ldr	r3, [pc, #100]	; (8001450 <effect3Select+0x318>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
		channel_params_array[6].one_color_dim_b_dir = 0;
 80013f0:	4b17      	ldr	r3, [pc, #92]	; (8001450 <effect3Select+0x318>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

		channel_params_array[7].channel = 7;
 80013f8:	4b15      	ldr	r3, [pc, #84]	; (8001450 <effect3Select+0x318>)
 80013fa:	2207      	movs	r2, #7
 80013fc:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
		channel_params_array[7].EEFECT = ONE_COLOR_EFFECT_DIM;
 8001400:	4b13      	ldr	r3, [pc, #76]	; (8001450 <effect3Select+0x318>)
 8001402:	2203      	movs	r2, #3
 8001404:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
		channel_params_array[7].effectExecutor = &effectOneColorDim;
 8001408:	4b11      	ldr	r3, [pc, #68]	; (8001450 <effect3Select+0x318>)
 800140a:	4a12      	ldr	r2, [pc, #72]	; (8001454 <effect3Select+0x31c>)
 800140c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		channel_params_array[7].one_color_dim_r = 0;
 8001410:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <effect3Select+0x318>)
 8001412:	2200      	movs	r2, #0
 8001414:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
		channel_params_array[7].one_color_dim_g = 255;
 8001418:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <effect3Select+0x318>)
 800141a:	22ff      	movs	r2, #255	; 0xff
 800141c:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
		channel_params_array[7].one_color_dim_b = 0;
 8001420:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <effect3Select+0x318>)
 8001422:	2200      	movs	r2, #0
 8001424:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
		channel_params_array[7].one_color_dim_r_flag = 1;
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <effect3Select+0x318>)
 800142a:	2201      	movs	r2, #1
 800142c:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
		channel_params_array[7].one_color_dim_g_flag = 1;
 8001430:	4b07      	ldr	r3, [pc, #28]	; (8001450 <effect3Select+0x318>)
 8001432:	2201      	movs	r2, #1
 8001434:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
		channel_params_array[7].one_color_dim_b_flag = 1;
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <effect3Select+0x318>)
 800143a:	2201      	movs	r2, #1
 800143c:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
		channel_params_array[7].one_color_dim_increment = 1;
 8001440:	4b03      	ldr	r3, [pc, #12]	; (8001450 <effect3Select+0x318>)
 8001442:	2201      	movs	r2, #1
 8001444:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
 8001448:	e006      	b.n	8001458 <effect3Select+0x320>
 800144a:	bf00      	nop
 800144c:	20000000 	.word	0x20000000
 8001450:	2000064c 	.word	0x2000064c
 8001454:	0800056d 	.word	0x0800056d
		channel_params_array[7].one_color_dim_r_dir = 0;
 8001458:	4b3d      	ldr	r3, [pc, #244]	; (8001550 <effect3Select+0x418>)
 800145a:	2200      	movs	r2, #0
 800145c:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
		channel_params_array[7].one_color_dim_g_dir = 0;
 8001460:	4b3b      	ldr	r3, [pc, #236]	; (8001550 <effect3Select+0x418>)
 8001462:	2200      	movs	r2, #0
 8001464:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
		channel_params_array[7].one_color_dim_b_dir = 0;
 8001468:	4b39      	ldr	r3, [pc, #228]	; (8001550 <effect3Select+0x418>)
 800146a:	2200      	movs	r2, #0
 800146c:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8

		channel_params_array[8].channel = 8;
 8001470:	4b37      	ldr	r3, [pc, #220]	; (8001550 <effect3Select+0x418>)
 8001472:	2208      	movs	r2, #8
 8001474:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
		channel_params_array[8].EEFECT = ONE_COLOR_EFFECT_DIM;
 8001478:	4b35      	ldr	r3, [pc, #212]	; (8001550 <effect3Select+0x418>)
 800147a:	2203      	movs	r2, #3
 800147c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
		channel_params_array[8].effectExecutor = &effectOneColorDim;
 8001480:	4b33      	ldr	r3, [pc, #204]	; (8001550 <effect3Select+0x418>)
 8001482:	4a34      	ldr	r2, [pc, #208]	; (8001554 <effect3Select+0x41c>)
 8001484:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		channel_params_array[8].one_color_dim_r = 0;
 8001488:	4b31      	ldr	r3, [pc, #196]	; (8001550 <effect3Select+0x418>)
 800148a:	2200      	movs	r2, #0
 800148c:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
		channel_params_array[8].one_color_dim_g = 255;
 8001490:	4b2f      	ldr	r3, [pc, #188]	; (8001550 <effect3Select+0x418>)
 8001492:	22ff      	movs	r2, #255	; 0xff
 8001494:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		channel_params_array[8].one_color_dim_b = 255;
 8001498:	4b2d      	ldr	r3, [pc, #180]	; (8001550 <effect3Select+0x418>)
 800149a:	22ff      	movs	r2, #255	; 0xff
 800149c:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
		channel_params_array[8].one_color_dim_r_flag = 1;
 80014a0:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <effect3Select+0x418>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
		channel_params_array[8].one_color_dim_g_flag = 1;
 80014a8:	4b29      	ldr	r3, [pc, #164]	; (8001550 <effect3Select+0x418>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
		channel_params_array[8].one_color_dim_b_flag = 1;
 80014b0:	4b27      	ldr	r3, [pc, #156]	; (8001550 <effect3Select+0x418>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
		channel_params_array[8].one_color_dim_increment = 1;
 80014b8:	4b25      	ldr	r3, [pc, #148]	; (8001550 <effect3Select+0x418>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
		channel_params_array[8].one_color_dim_r_dir = 0;
 80014c0:	4b23      	ldr	r3, [pc, #140]	; (8001550 <effect3Select+0x418>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
		channel_params_array[8].one_color_dim_g_dir = 0;
 80014c8:	4b21      	ldr	r3, [pc, #132]	; (8001550 <effect3Select+0x418>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3
		channel_params_array[8].one_color_dim_b_dir = 0;
 80014d0:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <effect3Select+0x418>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4

		channel_params_array[9].channel = 9;
 80014d8:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <effect3Select+0x418>)
 80014da:	2209      	movs	r2, #9
 80014dc:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
		channel_params_array[9].EEFECT = ONE_COLOR_EFFECT_DIM;
 80014e0:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <effect3Select+0x418>)
 80014e2:	2203      	movs	r2, #3
 80014e4:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
		channel_params_array[9].effectExecutor = &effectOneColorDim;
 80014e8:	4b19      	ldr	r3, [pc, #100]	; (8001550 <effect3Select+0x418>)
 80014ea:	4a1a      	ldr	r2, [pc, #104]	; (8001554 <effect3Select+0x41c>)
 80014ec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		channel_params_array[9].one_color_dim_r = 255;
 80014f0:	4b17      	ldr	r3, [pc, #92]	; (8001550 <effect3Select+0x418>)
 80014f2:	22ff      	movs	r2, #255	; 0xff
 80014f4:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
		channel_params_array[9].one_color_dim_g = 255;
 80014f8:	4b15      	ldr	r3, [pc, #84]	; (8001550 <effect3Select+0x418>)
 80014fa:	22ff      	movs	r2, #255	; 0xff
 80014fc:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		channel_params_array[9].one_color_dim_b = 255;
 8001500:	4b13      	ldr	r3, [pc, #76]	; (8001550 <effect3Select+0x418>)
 8001502:	22ff      	movs	r2, #255	; 0xff
 8001504:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
		channel_params_array[9].one_color_dim_r_flag = 1;
 8001508:	4b11      	ldr	r3, [pc, #68]	; (8001550 <effect3Select+0x418>)
 800150a:	2201      	movs	r2, #1
 800150c:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
		channel_params_array[9].one_color_dim_g_flag = 1;
 8001510:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <effect3Select+0x418>)
 8001512:	2201      	movs	r2, #1
 8001514:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
		channel_params_array[9].one_color_dim_b_flag = 1;
 8001518:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <effect3Select+0x418>)
 800151a:	2201      	movs	r2, #1
 800151c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
		channel_params_array[9].one_color_dim_increment = 1;
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <effect3Select+0x418>)
 8001522:	2201      	movs	r2, #1
 8001524:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
		channel_params_array[9].one_color_dim_r_dir = 0;
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <effect3Select+0x418>)
 800152a:	2200      	movs	r2, #0
 800152c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
		channel_params_array[9].one_color_dim_g_dir = 0;
 8001530:	4b07      	ldr	r3, [pc, #28]	; (8001550 <effect3Select+0x418>)
 8001532:	2200      	movs	r2, #0
 8001534:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
		channel_params_array[9].one_color_dim_b_dir = 0;
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <effect3Select+0x418>)
 800153a:	2200      	movs	r2, #0
 800153c:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

		effectSelectorFlag = 0;
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <effect3Select+0x420>)
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]
	}
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	2000064c 	.word	0x2000064c
 8001554:	0800056d 	.word	0x0800056d
 8001558:	20000000 	.word	0x20000000

0800155c <effect4Select>:

void effect4Select(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
	if(effectSelectorFlag == 1)
 8001560:	4bc3      	ldr	r3, [pc, #780]	; (8001870 <effect4Select+0x314>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b01      	cmp	r3, #1
 8001566:	f040 8200 	bne.w	800196a <effect4Select+0x40e>
	{
		channel_params_array[0].channel = 0;
 800156a:	4bc2      	ldr	r3, [pc, #776]	; (8001874 <effect4Select+0x318>)
 800156c:	2200      	movs	r2, #0
 800156e:	705a      	strb	r2, [r3, #1]
		channel_params_array[0].EEFECT = ONE_COLOR_EFFECT_DIM;
 8001570:	4bc0      	ldr	r3, [pc, #768]	; (8001874 <effect4Select+0x318>)
 8001572:	2203      	movs	r2, #3
 8001574:	701a      	strb	r2, [r3, #0]
		channel_params_array[0].effectExecutor = &effectOneColorDim;
 8001576:	4bbf      	ldr	r3, [pc, #764]	; (8001874 <effect4Select+0x318>)
 8001578:	4abf      	ldr	r2, [pc, #764]	; (8001878 <effect4Select+0x31c>)
 800157a:	605a      	str	r2, [r3, #4]
		channel_params_array[0].one_color_dim_r = 255;
 800157c:	4bbd      	ldr	r3, [pc, #756]	; (8001874 <effect4Select+0x318>)
 800157e:	22ff      	movs	r2, #255	; 0xff
 8001580:	72da      	strb	r2, [r3, #11]
		channel_params_array[0].one_color_dim_g = 0;
 8001582:	4bbc      	ldr	r3, [pc, #752]	; (8001874 <effect4Select+0x318>)
 8001584:	2200      	movs	r2, #0
 8001586:	731a      	strb	r2, [r3, #12]
		channel_params_array[0].one_color_dim_b = 0;
 8001588:	4bba      	ldr	r3, [pc, #744]	; (8001874 <effect4Select+0x318>)
 800158a:	2200      	movs	r2, #0
 800158c:	735a      	strb	r2, [r3, #13]
		channel_params_array[0].one_color_dim_r_flag = 1;
 800158e:	4bb9      	ldr	r3, [pc, #740]	; (8001874 <effect4Select+0x318>)
 8001590:	2201      	movs	r2, #1
 8001592:	739a      	strb	r2, [r3, #14]
		channel_params_array[0].one_color_dim_g_flag = 0;
 8001594:	4bb7      	ldr	r3, [pc, #732]	; (8001874 <effect4Select+0x318>)
 8001596:	2200      	movs	r2, #0
 8001598:	73da      	strb	r2, [r3, #15]
		channel_params_array[0].one_color_dim_b_flag = 0;
 800159a:	4bb6      	ldr	r3, [pc, #728]	; (8001874 <effect4Select+0x318>)
 800159c:	2200      	movs	r2, #0
 800159e:	741a      	strb	r2, [r3, #16]
		channel_params_array[0].one_color_dim_increment = 1;
 80015a0:	4bb4      	ldr	r3, [pc, #720]	; (8001874 <effect4Select+0x318>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	745a      	strb	r2, [r3, #17]
		channel_params_array[0].one_color_dim_r_dir = 0;
 80015a6:	4bb3      	ldr	r3, [pc, #716]	; (8001874 <effect4Select+0x318>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	749a      	strb	r2, [r3, #18]
		channel_params_array[0].one_color_dim_g_dir = 0;
 80015ac:	4bb1      	ldr	r3, [pc, #708]	; (8001874 <effect4Select+0x318>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	74da      	strb	r2, [r3, #19]
		channel_params_array[0].one_color_dim_b_dir = 0;
 80015b2:	4bb0      	ldr	r3, [pc, #704]	; (8001874 <effect4Select+0x318>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	751a      	strb	r2, [r3, #20]

		channel_params_array[1].channel = 1;
 80015b8:	4bae      	ldr	r3, [pc, #696]	; (8001874 <effect4Select+0x318>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	775a      	strb	r2, [r3, #29]
		channel_params_array[1].EEFECT = ONE_COLOR_EFFECT_DIM;
 80015be:	4bad      	ldr	r3, [pc, #692]	; (8001874 <effect4Select+0x318>)
 80015c0:	2203      	movs	r2, #3
 80015c2:	771a      	strb	r2, [r3, #28]
		channel_params_array[1].effectExecutor = &effectOneColorDim;
 80015c4:	4bab      	ldr	r3, [pc, #684]	; (8001874 <effect4Select+0x318>)
 80015c6:	4aac      	ldr	r2, [pc, #688]	; (8001878 <effect4Select+0x31c>)
 80015c8:	621a      	str	r2, [r3, #32]
		channel_params_array[1].one_color_dim_r = 225;
 80015ca:	4baa      	ldr	r3, [pc, #680]	; (8001874 <effect4Select+0x318>)
 80015cc:	22e1      	movs	r2, #225	; 0xe1
 80015ce:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		channel_params_array[1].one_color_dim_g = 0;
 80015d2:	4ba8      	ldr	r3, [pc, #672]	; (8001874 <effect4Select+0x318>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		channel_params_array[1].one_color_dim_b = 0;
 80015da:	4ba6      	ldr	r3, [pc, #664]	; (8001874 <effect4Select+0x318>)
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		channel_params_array[1].one_color_dim_r_flag = 1;
 80015e2:	4ba4      	ldr	r3, [pc, #656]	; (8001874 <effect4Select+0x318>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		channel_params_array[1].one_color_dim_g_flag = 0;
 80015ea:	4ba2      	ldr	r3, [pc, #648]	; (8001874 <effect4Select+0x318>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		channel_params_array[1].one_color_dim_b_flag = 0;
 80015f2:	4ba0      	ldr	r3, [pc, #640]	; (8001874 <effect4Select+0x318>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		channel_params_array[1].one_color_dim_increment = 1;
 80015fa:	4b9e      	ldr	r3, [pc, #632]	; (8001874 <effect4Select+0x318>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		channel_params_array[1].one_color_dim_r_dir = 0;
 8001602:	4b9c      	ldr	r3, [pc, #624]	; (8001874 <effect4Select+0x318>)
 8001604:	2200      	movs	r2, #0
 8001606:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		channel_params_array[1].one_color_dim_g_dir = 0;
 800160a:	4b9a      	ldr	r3, [pc, #616]	; (8001874 <effect4Select+0x318>)
 800160c:	2200      	movs	r2, #0
 800160e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		channel_params_array[1].one_color_dim_b_dir = 0;
 8001612:	4b98      	ldr	r3, [pc, #608]	; (8001874 <effect4Select+0x318>)
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

		channel_params_array[2].channel = 2;
 800161a:	4b96      	ldr	r3, [pc, #600]	; (8001874 <effect4Select+0x318>)
 800161c:	2202      	movs	r2, #2
 800161e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		channel_params_array[2].EEFECT = ONE_COLOR_EFFECT_DIM;
 8001622:	4b94      	ldr	r3, [pc, #592]	; (8001874 <effect4Select+0x318>)
 8001624:	2203      	movs	r2, #3
 8001626:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		channel_params_array[2].effectExecutor = &effectOneColorDim;
 800162a:	4b92      	ldr	r3, [pc, #584]	; (8001874 <effect4Select+0x318>)
 800162c:	4a92      	ldr	r2, [pc, #584]	; (8001878 <effect4Select+0x31c>)
 800162e:	63da      	str	r2, [r3, #60]	; 0x3c
		channel_params_array[2].one_color_dim_r = 200;
 8001630:	4b90      	ldr	r3, [pc, #576]	; (8001874 <effect4Select+0x318>)
 8001632:	22c8      	movs	r2, #200	; 0xc8
 8001634:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
		channel_params_array[2].one_color_dim_g = 0;
 8001638:	4b8e      	ldr	r3, [pc, #568]	; (8001874 <effect4Select+0x318>)
 800163a:	2200      	movs	r2, #0
 800163c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		channel_params_array[2].one_color_dim_b = 0;
 8001640:	4b8c      	ldr	r3, [pc, #560]	; (8001874 <effect4Select+0x318>)
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		channel_params_array[2].one_color_dim_r_flag = 1;
 8001648:	4b8a      	ldr	r3, [pc, #552]	; (8001874 <effect4Select+0x318>)
 800164a:	2201      	movs	r2, #1
 800164c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		channel_params_array[2].one_color_dim_g_flag = 0;
 8001650:	4b88      	ldr	r3, [pc, #544]	; (8001874 <effect4Select+0x318>)
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
		channel_params_array[2].one_color_dim_b_flag = 0;
 8001658:	4b86      	ldr	r3, [pc, #536]	; (8001874 <effect4Select+0x318>)
 800165a:	2200      	movs	r2, #0
 800165c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		channel_params_array[2].one_color_dim_increment = 1;
 8001660:	4b84      	ldr	r3, [pc, #528]	; (8001874 <effect4Select+0x318>)
 8001662:	2201      	movs	r2, #1
 8001664:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		channel_params_array[2].one_color_dim_r_dir = 0;
 8001668:	4b82      	ldr	r3, [pc, #520]	; (8001874 <effect4Select+0x318>)
 800166a:	2200      	movs	r2, #0
 800166c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		channel_params_array[2].one_color_dim_g_dir = 0;
 8001670:	4b80      	ldr	r3, [pc, #512]	; (8001874 <effect4Select+0x318>)
 8001672:	2200      	movs	r2, #0
 8001674:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		channel_params_array[2].one_color_dim_b_dir = 0;
 8001678:	4b7e      	ldr	r3, [pc, #504]	; (8001874 <effect4Select+0x318>)
 800167a:	2200      	movs	r2, #0
 800167c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

		channel_params_array[3].channel = 3;
 8001680:	4b7c      	ldr	r3, [pc, #496]	; (8001874 <effect4Select+0x318>)
 8001682:	2203      	movs	r2, #3
 8001684:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		channel_params_array[3].EEFECT = ONE_COLOR_EFFECT_DIM;
 8001688:	4b7a      	ldr	r3, [pc, #488]	; (8001874 <effect4Select+0x318>)
 800168a:	2203      	movs	r2, #3
 800168c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		channel_params_array[3].effectExecutor = &effectOneColorDim;
 8001690:	4b78      	ldr	r3, [pc, #480]	; (8001874 <effect4Select+0x318>)
 8001692:	4a79      	ldr	r2, [pc, #484]	; (8001878 <effect4Select+0x31c>)
 8001694:	659a      	str	r2, [r3, #88]	; 0x58
		channel_params_array[3].one_color_dim_r = 175;
 8001696:	4b77      	ldr	r3, [pc, #476]	; (8001874 <effect4Select+0x318>)
 8001698:	22af      	movs	r2, #175	; 0xaf
 800169a:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
		channel_params_array[3].one_color_dim_g = 0;
 800169e:	4b75      	ldr	r3, [pc, #468]	; (8001874 <effect4Select+0x318>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		channel_params_array[3].one_color_dim_b = 0;
 80016a6:	4b73      	ldr	r3, [pc, #460]	; (8001874 <effect4Select+0x318>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
		channel_params_array[3].one_color_dim_r_flag = 1;
 80016ae:	4b71      	ldr	r3, [pc, #452]	; (8001874 <effect4Select+0x318>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
		channel_params_array[3].one_color_dim_g_flag = 0;
 80016b6:	4b6f      	ldr	r3, [pc, #444]	; (8001874 <effect4Select+0x318>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
		channel_params_array[3].one_color_dim_b_flag = 0;
 80016be:	4b6d      	ldr	r3, [pc, #436]	; (8001874 <effect4Select+0x318>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
		channel_params_array[3].one_color_dim_increment = 1;
 80016c6:	4b6b      	ldr	r3, [pc, #428]	; (8001874 <effect4Select+0x318>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
		channel_params_array[3].one_color_dim_r_dir = 0;
 80016ce:	4b69      	ldr	r3, [pc, #420]	; (8001874 <effect4Select+0x318>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
		channel_params_array[3].one_color_dim_g_dir = 0;
 80016d6:	4b67      	ldr	r3, [pc, #412]	; (8001874 <effect4Select+0x318>)
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
		channel_params_array[3].one_color_dim_b_dir = 0;
 80016de:	4b65      	ldr	r3, [pc, #404]	; (8001874 <effect4Select+0x318>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

		channel_params_array[4].channel = 4;
 80016e6:	4b63      	ldr	r3, [pc, #396]	; (8001874 <effect4Select+0x318>)
 80016e8:	2204      	movs	r2, #4
 80016ea:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		channel_params_array[4].EEFECT = ONE_COLOR_EFFECT_DIM;
 80016ee:	4b61      	ldr	r3, [pc, #388]	; (8001874 <effect4Select+0x318>)
 80016f0:	2203      	movs	r2, #3
 80016f2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
		channel_params_array[4].effectExecutor = &effectOneColorDim;
 80016f6:	4b5f      	ldr	r3, [pc, #380]	; (8001874 <effect4Select+0x318>)
 80016f8:	4a5f      	ldr	r2, [pc, #380]	; (8001878 <effect4Select+0x31c>)
 80016fa:	675a      	str	r2, [r3, #116]	; 0x74
		channel_params_array[4].one_color_dim_r = 150;
 80016fc:	4b5d      	ldr	r3, [pc, #372]	; (8001874 <effect4Select+0x318>)
 80016fe:	2296      	movs	r2, #150	; 0x96
 8001700:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
		channel_params_array[4].one_color_dim_g = 0;
 8001704:	4b5b      	ldr	r3, [pc, #364]	; (8001874 <effect4Select+0x318>)
 8001706:	2200      	movs	r2, #0
 8001708:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
		channel_params_array[4].one_color_dim_b = 0;
 800170c:	4b59      	ldr	r3, [pc, #356]	; (8001874 <effect4Select+0x318>)
 800170e:	2200      	movs	r2, #0
 8001710:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
		channel_params_array[4].one_color_dim_r_flag = 1;
 8001714:	4b57      	ldr	r3, [pc, #348]	; (8001874 <effect4Select+0x318>)
 8001716:	2201      	movs	r2, #1
 8001718:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		channel_params_array[4].one_color_dim_g_flag = 0;
 800171c:	4b55      	ldr	r3, [pc, #340]	; (8001874 <effect4Select+0x318>)
 800171e:	2200      	movs	r2, #0
 8001720:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
		channel_params_array[4].one_color_dim_b_flag = 0;
 8001724:	4b53      	ldr	r3, [pc, #332]	; (8001874 <effect4Select+0x318>)
 8001726:	2200      	movs	r2, #0
 8001728:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		channel_params_array[4].one_color_dim_increment = 1;
 800172c:	4b51      	ldr	r3, [pc, #324]	; (8001874 <effect4Select+0x318>)
 800172e:	2201      	movs	r2, #1
 8001730:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		channel_params_array[4].one_color_dim_r_dir = 0;
 8001734:	4b4f      	ldr	r3, [pc, #316]	; (8001874 <effect4Select+0x318>)
 8001736:	2200      	movs	r2, #0
 8001738:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		channel_params_array[4].one_color_dim_g_dir = 0;
 800173c:	4b4d      	ldr	r3, [pc, #308]	; (8001874 <effect4Select+0x318>)
 800173e:	2200      	movs	r2, #0
 8001740:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		channel_params_array[4].one_color_dim_b_dir = 0;
 8001744:	4b4b      	ldr	r3, [pc, #300]	; (8001874 <effect4Select+0x318>)
 8001746:	2200      	movs	r2, #0
 8001748:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

		channel_params_array[5].channel = 5;
 800174c:	4b49      	ldr	r3, [pc, #292]	; (8001874 <effect4Select+0x318>)
 800174e:	2205      	movs	r2, #5
 8001750:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		channel_params_array[5].EEFECT = ONE_COLOR_EFFECT_DIM;
 8001754:	4b47      	ldr	r3, [pc, #284]	; (8001874 <effect4Select+0x318>)
 8001756:	2203      	movs	r2, #3
 8001758:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		channel_params_array[5].effectExecutor = &effectOneColorDim;
 800175c:	4b45      	ldr	r3, [pc, #276]	; (8001874 <effect4Select+0x318>)
 800175e:	4a46      	ldr	r2, [pc, #280]	; (8001878 <effect4Select+0x31c>)
 8001760:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		channel_params_array[5].one_color_dim_r = 125;
 8001764:	4b43      	ldr	r3, [pc, #268]	; (8001874 <effect4Select+0x318>)
 8001766:	227d      	movs	r2, #125	; 0x7d
 8001768:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
		channel_params_array[5].one_color_dim_g = 0;
 800176c:	4b41      	ldr	r3, [pc, #260]	; (8001874 <effect4Select+0x318>)
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		channel_params_array[5].one_color_dim_b = 0;
 8001774:	4b3f      	ldr	r3, [pc, #252]	; (8001874 <effect4Select+0x318>)
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
		channel_params_array[5].one_color_dim_r_flag = 1;
 800177c:	4b3d      	ldr	r3, [pc, #244]	; (8001874 <effect4Select+0x318>)
 800177e:	2201      	movs	r2, #1
 8001780:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
		channel_params_array[5].one_color_dim_g_flag = 0;
 8001784:	4b3b      	ldr	r3, [pc, #236]	; (8001874 <effect4Select+0x318>)
 8001786:	2200      	movs	r2, #0
 8001788:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
		channel_params_array[5].one_color_dim_b_flag = 0;
 800178c:	4b39      	ldr	r3, [pc, #228]	; (8001874 <effect4Select+0x318>)
 800178e:	2200      	movs	r2, #0
 8001790:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		channel_params_array[5].one_color_dim_increment = 1;
 8001794:	4b37      	ldr	r3, [pc, #220]	; (8001874 <effect4Select+0x318>)
 8001796:	2201      	movs	r2, #1
 8001798:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
		channel_params_array[5].one_color_dim_r_dir = 0;
 800179c:	4b35      	ldr	r3, [pc, #212]	; (8001874 <effect4Select+0x318>)
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
		channel_params_array[5].one_color_dim_g_dir = 0;
 80017a4:	4b33      	ldr	r3, [pc, #204]	; (8001874 <effect4Select+0x318>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
		channel_params_array[5].one_color_dim_b_dir = 0;
 80017ac:	4b31      	ldr	r3, [pc, #196]	; (8001874 <effect4Select+0x318>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

		channel_params_array[6].channel = 6;
 80017b4:	4b2f      	ldr	r3, [pc, #188]	; (8001874 <effect4Select+0x318>)
 80017b6:	2206      	movs	r2, #6
 80017b8:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
		channel_params_array[6].EEFECT = ONE_COLOR_EFFECT_DIM;
 80017bc:	4b2d      	ldr	r3, [pc, #180]	; (8001874 <effect4Select+0x318>)
 80017be:	2203      	movs	r2, #3
 80017c0:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		channel_params_array[6].effectExecutor = &effectOneColorDim;
 80017c4:	4b2b      	ldr	r3, [pc, #172]	; (8001874 <effect4Select+0x318>)
 80017c6:	4a2c      	ldr	r2, [pc, #176]	; (8001878 <effect4Select+0x31c>)
 80017c8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		channel_params_array[6].one_color_dim_r = 100;
 80017cc:	4b29      	ldr	r3, [pc, #164]	; (8001874 <effect4Select+0x318>)
 80017ce:	2264      	movs	r2, #100	; 0x64
 80017d0:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
		channel_params_array[6].one_color_dim_g = 0;
 80017d4:	4b27      	ldr	r3, [pc, #156]	; (8001874 <effect4Select+0x318>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		channel_params_array[6].one_color_dim_b = 0;
 80017dc:	4b25      	ldr	r3, [pc, #148]	; (8001874 <effect4Select+0x318>)
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
		channel_params_array[6].one_color_dim_r_flag = 1;
 80017e4:	4b23      	ldr	r3, [pc, #140]	; (8001874 <effect4Select+0x318>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
		channel_params_array[6].one_color_dim_g_flag = 0;
 80017ec:	4b21      	ldr	r3, [pc, #132]	; (8001874 <effect4Select+0x318>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
		channel_params_array[6].one_color_dim_b_flag = 0;
 80017f4:	4b1f      	ldr	r3, [pc, #124]	; (8001874 <effect4Select+0x318>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		channel_params_array[6].one_color_dim_increment = 1;
 80017fc:	4b1d      	ldr	r3, [pc, #116]	; (8001874 <effect4Select+0x318>)
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
		channel_params_array[6].one_color_dim_r_dir = 0;
 8001804:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <effect4Select+0x318>)
 8001806:	2200      	movs	r2, #0
 8001808:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		channel_params_array[6].one_color_dim_g_dir = 0;
 800180c:	4b19      	ldr	r3, [pc, #100]	; (8001874 <effect4Select+0x318>)
 800180e:	2200      	movs	r2, #0
 8001810:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
		channel_params_array[6].one_color_dim_b_dir = 0;
 8001814:	4b17      	ldr	r3, [pc, #92]	; (8001874 <effect4Select+0x318>)
 8001816:	2200      	movs	r2, #0
 8001818:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

		channel_params_array[7].channel = 7;
 800181c:	4b15      	ldr	r3, [pc, #84]	; (8001874 <effect4Select+0x318>)
 800181e:	2207      	movs	r2, #7
 8001820:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
		channel_params_array[7].EEFECT = ONE_COLOR_EFFECT_DIM;
 8001824:	4b13      	ldr	r3, [pc, #76]	; (8001874 <effect4Select+0x318>)
 8001826:	2203      	movs	r2, #3
 8001828:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
		channel_params_array[7].effectExecutor = &effectOneColorDim;
 800182c:	4b11      	ldr	r3, [pc, #68]	; (8001874 <effect4Select+0x318>)
 800182e:	4a12      	ldr	r2, [pc, #72]	; (8001878 <effect4Select+0x31c>)
 8001830:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		channel_params_array[7].one_color_dim_r = 75;
 8001834:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <effect4Select+0x318>)
 8001836:	224b      	movs	r2, #75	; 0x4b
 8001838:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
		channel_params_array[7].one_color_dim_g = 0;
 800183c:	4b0d      	ldr	r3, [pc, #52]	; (8001874 <effect4Select+0x318>)
 800183e:	2200      	movs	r2, #0
 8001840:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
		channel_params_array[7].one_color_dim_b = 0;
 8001844:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <effect4Select+0x318>)
 8001846:	2200      	movs	r2, #0
 8001848:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
		channel_params_array[7].one_color_dim_r_flag = 1;
 800184c:	4b09      	ldr	r3, [pc, #36]	; (8001874 <effect4Select+0x318>)
 800184e:	2201      	movs	r2, #1
 8001850:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
		channel_params_array[7].one_color_dim_g_flag = 0;
 8001854:	4b07      	ldr	r3, [pc, #28]	; (8001874 <effect4Select+0x318>)
 8001856:	2200      	movs	r2, #0
 8001858:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
		channel_params_array[7].one_color_dim_b_flag = 0;
 800185c:	4b05      	ldr	r3, [pc, #20]	; (8001874 <effect4Select+0x318>)
 800185e:	2200      	movs	r2, #0
 8001860:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
		channel_params_array[7].one_color_dim_increment = 1;
 8001864:	4b03      	ldr	r3, [pc, #12]	; (8001874 <effect4Select+0x318>)
 8001866:	2201      	movs	r2, #1
 8001868:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
 800186c:	e006      	b.n	800187c <effect4Select+0x320>
 800186e:	bf00      	nop
 8001870:	20000000 	.word	0x20000000
 8001874:	2000064c 	.word	0x2000064c
 8001878:	0800056d 	.word	0x0800056d
		channel_params_array[7].one_color_dim_r_dir = 0;
 800187c:	4b3d      	ldr	r3, [pc, #244]	; (8001974 <effect4Select+0x418>)
 800187e:	2200      	movs	r2, #0
 8001880:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
		channel_params_array[7].one_color_dim_g_dir = 0;
 8001884:	4b3b      	ldr	r3, [pc, #236]	; (8001974 <effect4Select+0x418>)
 8001886:	2200      	movs	r2, #0
 8001888:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
		channel_params_array[7].one_color_dim_b_dir = 0;
 800188c:	4b39      	ldr	r3, [pc, #228]	; (8001974 <effect4Select+0x418>)
 800188e:	2200      	movs	r2, #0
 8001890:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8

		channel_params_array[8].channel = 8;
 8001894:	4b37      	ldr	r3, [pc, #220]	; (8001974 <effect4Select+0x418>)
 8001896:	2208      	movs	r2, #8
 8001898:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
		channel_params_array[8].EEFECT = ONE_COLOR_EFFECT_DIM;
 800189c:	4b35      	ldr	r3, [pc, #212]	; (8001974 <effect4Select+0x418>)
 800189e:	2203      	movs	r2, #3
 80018a0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
		channel_params_array[8].effectExecutor = &effectOneColorDim;
 80018a4:	4b33      	ldr	r3, [pc, #204]	; (8001974 <effect4Select+0x418>)
 80018a6:	4a34      	ldr	r2, [pc, #208]	; (8001978 <effect4Select+0x41c>)
 80018a8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		channel_params_array[8].one_color_dim_r = 50;
 80018ac:	4b31      	ldr	r3, [pc, #196]	; (8001974 <effect4Select+0x418>)
 80018ae:	2232      	movs	r2, #50	; 0x32
 80018b0:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
		channel_params_array[8].one_color_dim_g = 0;
 80018b4:	4b2f      	ldr	r3, [pc, #188]	; (8001974 <effect4Select+0x418>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		channel_params_array[8].one_color_dim_b = 0;
 80018bc:	4b2d      	ldr	r3, [pc, #180]	; (8001974 <effect4Select+0x418>)
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
		channel_params_array[8].one_color_dim_r_flag = 1;
 80018c4:	4b2b      	ldr	r3, [pc, #172]	; (8001974 <effect4Select+0x418>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
		channel_params_array[8].one_color_dim_g_flag = 0;
 80018cc:	4b29      	ldr	r3, [pc, #164]	; (8001974 <effect4Select+0x418>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
		channel_params_array[8].one_color_dim_b_flag = 0;
 80018d4:	4b27      	ldr	r3, [pc, #156]	; (8001974 <effect4Select+0x418>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
		channel_params_array[8].one_color_dim_increment = 1;
 80018dc:	4b25      	ldr	r3, [pc, #148]	; (8001974 <effect4Select+0x418>)
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
		channel_params_array[8].one_color_dim_r_dir = 0;
 80018e4:	4b23      	ldr	r3, [pc, #140]	; (8001974 <effect4Select+0x418>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
		channel_params_array[8].one_color_dim_g_dir = 0;
 80018ec:	4b21      	ldr	r3, [pc, #132]	; (8001974 <effect4Select+0x418>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3
		channel_params_array[8].one_color_dim_b_dir = 0;
 80018f4:	4b1f      	ldr	r3, [pc, #124]	; (8001974 <effect4Select+0x418>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4

		channel_params_array[9].channel = 9;
 80018fc:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <effect4Select+0x418>)
 80018fe:	2209      	movs	r2, #9
 8001900:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
		channel_params_array[9].EEFECT = ONE_COLOR_EFFECT_DIM;
 8001904:	4b1b      	ldr	r3, [pc, #108]	; (8001974 <effect4Select+0x418>)
 8001906:	2203      	movs	r2, #3
 8001908:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
		channel_params_array[9].effectExecutor = &effectOneColorDim;
 800190c:	4b19      	ldr	r3, [pc, #100]	; (8001974 <effect4Select+0x418>)
 800190e:	4a1a      	ldr	r2, [pc, #104]	; (8001978 <effect4Select+0x41c>)
 8001910:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		channel_params_array[9].one_color_dim_r = 25;
 8001914:	4b17      	ldr	r3, [pc, #92]	; (8001974 <effect4Select+0x418>)
 8001916:	2219      	movs	r2, #25
 8001918:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
		channel_params_array[9].one_color_dim_g = 0;
 800191c:	4b15      	ldr	r3, [pc, #84]	; (8001974 <effect4Select+0x418>)
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		channel_params_array[9].one_color_dim_b = 0;
 8001924:	4b13      	ldr	r3, [pc, #76]	; (8001974 <effect4Select+0x418>)
 8001926:	2200      	movs	r2, #0
 8001928:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
		channel_params_array[9].one_color_dim_r_flag = 1;
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <effect4Select+0x418>)
 800192e:	2201      	movs	r2, #1
 8001930:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
		channel_params_array[9].one_color_dim_g_flag = 0;
 8001934:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <effect4Select+0x418>)
 8001936:	2200      	movs	r2, #0
 8001938:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
		channel_params_array[9].one_color_dim_b_flag = 0;
 800193c:	4b0d      	ldr	r3, [pc, #52]	; (8001974 <effect4Select+0x418>)
 800193e:	2200      	movs	r2, #0
 8001940:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
		channel_params_array[9].one_color_dim_increment = 1;
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <effect4Select+0x418>)
 8001946:	2201      	movs	r2, #1
 8001948:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
		channel_params_array[9].one_color_dim_r_dir = 0;
 800194c:	4b09      	ldr	r3, [pc, #36]	; (8001974 <effect4Select+0x418>)
 800194e:	2200      	movs	r2, #0
 8001950:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
		channel_params_array[9].one_color_dim_g_dir = 0;
 8001954:	4b07      	ldr	r3, [pc, #28]	; (8001974 <effect4Select+0x418>)
 8001956:	2200      	movs	r2, #0
 8001958:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
		channel_params_array[9].one_color_dim_b_dir = 0;
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <effect4Select+0x418>)
 800195e:	2200      	movs	r2, #0
 8001960:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

		effectSelectorFlag = 0;
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <effect4Select+0x420>)
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
	}
}
 800196a:	bf00      	nop
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	2000064c 	.word	0x2000064c
 8001978:	0800056d 	.word	0x0800056d
 800197c:	20000000 	.word	0x20000000

08001980 <effect5Select>:

void effect5Select(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
	if(effectSelectorFlag == 1)
 8001984:	4bc3      	ldr	r3, [pc, #780]	; (8001c94 <effect5Select+0x314>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b01      	cmp	r3, #1
 800198a:	f040 8200 	bne.w	8001d8e <effect5Select+0x40e>
	{

		channel_params_array[0].channel = 0;
 800198e:	4bc2      	ldr	r3, [pc, #776]	; (8001c98 <effect5Select+0x318>)
 8001990:	2200      	movs	r2, #0
 8001992:	705a      	strb	r2, [r3, #1]
		channel_params_array[0].EEFECT = ONE_COLOR_EFFECT_DIM;
 8001994:	4bc0      	ldr	r3, [pc, #768]	; (8001c98 <effect5Select+0x318>)
 8001996:	2203      	movs	r2, #3
 8001998:	701a      	strb	r2, [r3, #0]
		channel_params_array[0].effectExecutor = &effectOneColorDim;
 800199a:	4bbf      	ldr	r3, [pc, #764]	; (8001c98 <effect5Select+0x318>)
 800199c:	4abf      	ldr	r2, [pc, #764]	; (8001c9c <effect5Select+0x31c>)
 800199e:	605a      	str	r2, [r3, #4]
		channel_params_array[0].one_color_dim_r = 0;
 80019a0:	4bbd      	ldr	r3, [pc, #756]	; (8001c98 <effect5Select+0x318>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	72da      	strb	r2, [r3, #11]
		channel_params_array[0].one_color_dim_g = 255;
 80019a6:	4bbc      	ldr	r3, [pc, #752]	; (8001c98 <effect5Select+0x318>)
 80019a8:	22ff      	movs	r2, #255	; 0xff
 80019aa:	731a      	strb	r2, [r3, #12]
		channel_params_array[0].one_color_dim_b = 128;
 80019ac:	4bba      	ldr	r3, [pc, #744]	; (8001c98 <effect5Select+0x318>)
 80019ae:	2280      	movs	r2, #128	; 0x80
 80019b0:	735a      	strb	r2, [r3, #13]
		channel_params_array[0].one_color_dim_r_flag = 1;
 80019b2:	4bb9      	ldr	r3, [pc, #740]	; (8001c98 <effect5Select+0x318>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	739a      	strb	r2, [r3, #14]
		channel_params_array[0].one_color_dim_g_flag = 1;
 80019b8:	4bb7      	ldr	r3, [pc, #732]	; (8001c98 <effect5Select+0x318>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	73da      	strb	r2, [r3, #15]
		channel_params_array[0].one_color_dim_b_flag = 1;
 80019be:	4bb6      	ldr	r3, [pc, #728]	; (8001c98 <effect5Select+0x318>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	741a      	strb	r2, [r3, #16]
		channel_params_array[0].one_color_dim_increment = 10;
 80019c4:	4bb4      	ldr	r3, [pc, #720]	; (8001c98 <effect5Select+0x318>)
 80019c6:	220a      	movs	r2, #10
 80019c8:	745a      	strb	r2, [r3, #17]
		channel_params_array[0].one_color_dim_r_dir = 0;
 80019ca:	4bb3      	ldr	r3, [pc, #716]	; (8001c98 <effect5Select+0x318>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	749a      	strb	r2, [r3, #18]
		channel_params_array[0].one_color_dim_g_dir = 1;
 80019d0:	4bb1      	ldr	r3, [pc, #708]	; (8001c98 <effect5Select+0x318>)
 80019d2:	2201      	movs	r2, #1
 80019d4:	74da      	strb	r2, [r3, #19]
		channel_params_array[0].one_color_dim_b_dir = 0;
 80019d6:	4bb0      	ldr	r3, [pc, #704]	; (8001c98 <effect5Select+0x318>)
 80019d8:	2200      	movs	r2, #0
 80019da:	751a      	strb	r2, [r3, #20]

		channel_params_array[1].channel = 1;
 80019dc:	4bae      	ldr	r3, [pc, #696]	; (8001c98 <effect5Select+0x318>)
 80019de:	2201      	movs	r2, #1
 80019e0:	775a      	strb	r2, [r3, #29]
		channel_params_array[1].EEFECT = ONE_COLOR_EFFECT_DIM;
 80019e2:	4bad      	ldr	r3, [pc, #692]	; (8001c98 <effect5Select+0x318>)
 80019e4:	2203      	movs	r2, #3
 80019e6:	771a      	strb	r2, [r3, #28]
		channel_params_array[1].effectExecutor = &effectOneColorDim;
 80019e8:	4bab      	ldr	r3, [pc, #684]	; (8001c98 <effect5Select+0x318>)
 80019ea:	4aac      	ldr	r2, [pc, #688]	; (8001c9c <effect5Select+0x31c>)
 80019ec:	621a      	str	r2, [r3, #32]
		channel_params_array[1].one_color_dim_r = 255;
 80019ee:	4baa      	ldr	r3, [pc, #680]	; (8001c98 <effect5Select+0x318>)
 80019f0:	22ff      	movs	r2, #255	; 0xff
 80019f2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		channel_params_array[1].one_color_dim_g = 128;
 80019f6:	4ba8      	ldr	r3, [pc, #672]	; (8001c98 <effect5Select+0x318>)
 80019f8:	2280      	movs	r2, #128	; 0x80
 80019fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		channel_params_array[1].one_color_dim_b = 128;
 80019fe:	4ba6      	ldr	r3, [pc, #664]	; (8001c98 <effect5Select+0x318>)
 8001a00:	2280      	movs	r2, #128	; 0x80
 8001a02:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		channel_params_array[1].one_color_dim_r_flag = 1;
 8001a06:	4ba4      	ldr	r3, [pc, #656]	; (8001c98 <effect5Select+0x318>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		channel_params_array[1].one_color_dim_g_flag = 1;
 8001a0e:	4ba2      	ldr	r3, [pc, #648]	; (8001c98 <effect5Select+0x318>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		channel_params_array[1].one_color_dim_b_flag = 1;
 8001a16:	4ba0      	ldr	r3, [pc, #640]	; (8001c98 <effect5Select+0x318>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		channel_params_array[1].one_color_dim_increment = 4;
 8001a1e:	4b9e      	ldr	r3, [pc, #632]	; (8001c98 <effect5Select+0x318>)
 8001a20:	2204      	movs	r2, #4
 8001a22:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		channel_params_array[1].one_color_dim_r_dir = 1;
 8001a26:	4b9c      	ldr	r3, [pc, #624]	; (8001c98 <effect5Select+0x318>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		channel_params_array[1].one_color_dim_g_dir = 0;
 8001a2e:	4b9a      	ldr	r3, [pc, #616]	; (8001c98 <effect5Select+0x318>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		channel_params_array[1].one_color_dim_b_dir = 0;
 8001a36:	4b98      	ldr	r3, [pc, #608]	; (8001c98 <effect5Select+0x318>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

		channel_params_array[2].channel = 2;
 8001a3e:	4b96      	ldr	r3, [pc, #600]	; (8001c98 <effect5Select+0x318>)
 8001a40:	2202      	movs	r2, #2
 8001a42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		channel_params_array[2].EEFECT = ONE_COLOR_EFFECT_DIM;
 8001a46:	4b94      	ldr	r3, [pc, #592]	; (8001c98 <effect5Select+0x318>)
 8001a48:	2203      	movs	r2, #3
 8001a4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		channel_params_array[2].effectExecutor = &effectOneColorDim;
 8001a4e:	4b92      	ldr	r3, [pc, #584]	; (8001c98 <effect5Select+0x318>)
 8001a50:	4a92      	ldr	r2, [pc, #584]	; (8001c9c <effect5Select+0x31c>)
 8001a52:	63da      	str	r2, [r3, #60]	; 0x3c
		channel_params_array[2].one_color_dim_r = 128;
 8001a54:	4b90      	ldr	r3, [pc, #576]	; (8001c98 <effect5Select+0x318>)
 8001a56:	2280      	movs	r2, #128	; 0x80
 8001a58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
		channel_params_array[2].one_color_dim_g = 128;
 8001a5c:	4b8e      	ldr	r3, [pc, #568]	; (8001c98 <effect5Select+0x318>)
 8001a5e:	2280      	movs	r2, #128	; 0x80
 8001a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		channel_params_array[2].one_color_dim_b = 0;
 8001a64:	4b8c      	ldr	r3, [pc, #560]	; (8001c98 <effect5Select+0x318>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		channel_params_array[2].one_color_dim_r_flag = 1;
 8001a6c:	4b8a      	ldr	r3, [pc, #552]	; (8001c98 <effect5Select+0x318>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		channel_params_array[2].one_color_dim_g_flag = 1;
 8001a74:	4b88      	ldr	r3, [pc, #544]	; (8001c98 <effect5Select+0x318>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
		channel_params_array[2].one_color_dim_b_flag = 1;
 8001a7c:	4b86      	ldr	r3, [pc, #536]	; (8001c98 <effect5Select+0x318>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		channel_params_array[2].one_color_dim_increment = 1;
 8001a84:	4b84      	ldr	r3, [pc, #528]	; (8001c98 <effect5Select+0x318>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		channel_params_array[2].one_color_dim_r_dir = 0;
 8001a8c:	4b82      	ldr	r3, [pc, #520]	; (8001c98 <effect5Select+0x318>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		channel_params_array[2].one_color_dim_g_dir = 1;
 8001a94:	4b80      	ldr	r3, [pc, #512]	; (8001c98 <effect5Select+0x318>)
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		channel_params_array[2].one_color_dim_b_dir = 0;
 8001a9c:	4b7e      	ldr	r3, [pc, #504]	; (8001c98 <effect5Select+0x318>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

		channel_params_array[3].channel = 3;
 8001aa4:	4b7c      	ldr	r3, [pc, #496]	; (8001c98 <effect5Select+0x318>)
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		channel_params_array[3].EEFECT = ONE_COLOR_EFFECT_DIM;
 8001aac:	4b7a      	ldr	r3, [pc, #488]	; (8001c98 <effect5Select+0x318>)
 8001aae:	2203      	movs	r2, #3
 8001ab0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		channel_params_array[3].effectExecutor = &effectOneColorDim;
 8001ab4:	4b78      	ldr	r3, [pc, #480]	; (8001c98 <effect5Select+0x318>)
 8001ab6:	4a79      	ldr	r2, [pc, #484]	; (8001c9c <effect5Select+0x31c>)
 8001ab8:	659a      	str	r2, [r3, #88]	; 0x58
		channel_params_array[3].one_color_dim_r = 128;
 8001aba:	4b77      	ldr	r3, [pc, #476]	; (8001c98 <effect5Select+0x318>)
 8001abc:	2280      	movs	r2, #128	; 0x80
 8001abe:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
		channel_params_array[3].one_color_dim_g = 0;
 8001ac2:	4b75      	ldr	r3, [pc, #468]	; (8001c98 <effect5Select+0x318>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		channel_params_array[3].one_color_dim_b = 128;
 8001aca:	4b73      	ldr	r3, [pc, #460]	; (8001c98 <effect5Select+0x318>)
 8001acc:	2280      	movs	r2, #128	; 0x80
 8001ace:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
		channel_params_array[3].one_color_dim_r_flag = 1;
 8001ad2:	4b71      	ldr	r3, [pc, #452]	; (8001c98 <effect5Select+0x318>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
		channel_params_array[3].one_color_dim_g_flag = 1;
 8001ada:	4b6f      	ldr	r3, [pc, #444]	; (8001c98 <effect5Select+0x318>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
		channel_params_array[3].one_color_dim_b_flag = 1;
 8001ae2:	4b6d      	ldr	r3, [pc, #436]	; (8001c98 <effect5Select+0x318>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
		channel_params_array[3].one_color_dim_increment = 2;
 8001aea:	4b6b      	ldr	r3, [pc, #428]	; (8001c98 <effect5Select+0x318>)
 8001aec:	2202      	movs	r2, #2
 8001aee:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
		channel_params_array[3].one_color_dim_r_dir = 0;
 8001af2:	4b69      	ldr	r3, [pc, #420]	; (8001c98 <effect5Select+0x318>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
		channel_params_array[3].one_color_dim_g_dir = 0;
 8001afa:	4b67      	ldr	r3, [pc, #412]	; (8001c98 <effect5Select+0x318>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
		channel_params_array[3].one_color_dim_b_dir = 0;
 8001b02:	4b65      	ldr	r3, [pc, #404]	; (8001c98 <effect5Select+0x318>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

		channel_params_array[4].channel = 4;
 8001b0a:	4b63      	ldr	r3, [pc, #396]	; (8001c98 <effect5Select+0x318>)
 8001b0c:	2204      	movs	r2, #4
 8001b0e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		channel_params_array[4].EEFECT = ONE_COLOR_EFFECT_DIM;
 8001b12:	4b61      	ldr	r3, [pc, #388]	; (8001c98 <effect5Select+0x318>)
 8001b14:	2203      	movs	r2, #3
 8001b16:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
		channel_params_array[4].effectExecutor = &effectOneColorDim;
 8001b1a:	4b5f      	ldr	r3, [pc, #380]	; (8001c98 <effect5Select+0x318>)
 8001b1c:	4a5f      	ldr	r2, [pc, #380]	; (8001c9c <effect5Select+0x31c>)
 8001b1e:	675a      	str	r2, [r3, #116]	; 0x74
		channel_params_array[4].one_color_dim_r = 128;
 8001b20:	4b5d      	ldr	r3, [pc, #372]	; (8001c98 <effect5Select+0x318>)
 8001b22:	2280      	movs	r2, #128	; 0x80
 8001b24:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
		channel_params_array[4].one_color_dim_g = 255;
 8001b28:	4b5b      	ldr	r3, [pc, #364]	; (8001c98 <effect5Select+0x318>)
 8001b2a:	22ff      	movs	r2, #255	; 0xff
 8001b2c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
		channel_params_array[4].one_color_dim_b = 0;
 8001b30:	4b59      	ldr	r3, [pc, #356]	; (8001c98 <effect5Select+0x318>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
		channel_params_array[4].one_color_dim_r_flag = 1;
 8001b38:	4b57      	ldr	r3, [pc, #348]	; (8001c98 <effect5Select+0x318>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		channel_params_array[4].one_color_dim_g_flag = 1;
 8001b40:	4b55      	ldr	r3, [pc, #340]	; (8001c98 <effect5Select+0x318>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
		channel_params_array[4].one_color_dim_b_flag = 1;
 8001b48:	4b53      	ldr	r3, [pc, #332]	; (8001c98 <effect5Select+0x318>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		channel_params_array[4].one_color_dim_increment = 3;
 8001b50:	4b51      	ldr	r3, [pc, #324]	; (8001c98 <effect5Select+0x318>)
 8001b52:	2203      	movs	r2, #3
 8001b54:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		channel_params_array[4].one_color_dim_r_dir = 1;
 8001b58:	4b4f      	ldr	r3, [pc, #316]	; (8001c98 <effect5Select+0x318>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		channel_params_array[4].one_color_dim_g_dir = 0;
 8001b60:	4b4d      	ldr	r3, [pc, #308]	; (8001c98 <effect5Select+0x318>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		channel_params_array[4].one_color_dim_b_dir = 0;
 8001b68:	4b4b      	ldr	r3, [pc, #300]	; (8001c98 <effect5Select+0x318>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

		channel_params_array[5].channel = 5;
 8001b70:	4b49      	ldr	r3, [pc, #292]	; (8001c98 <effect5Select+0x318>)
 8001b72:	2205      	movs	r2, #5
 8001b74:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		channel_params_array[5].EEFECT = ONE_COLOR_EFFECT_DIM;
 8001b78:	4b47      	ldr	r3, [pc, #284]	; (8001c98 <effect5Select+0x318>)
 8001b7a:	2203      	movs	r2, #3
 8001b7c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		channel_params_array[5].effectExecutor = &effectOneColorDim;
 8001b80:	4b45      	ldr	r3, [pc, #276]	; (8001c98 <effect5Select+0x318>)
 8001b82:	4a46      	ldr	r2, [pc, #280]	; (8001c9c <effect5Select+0x31c>)
 8001b84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		channel_params_array[5].one_color_dim_r = 0;
 8001b88:	4b43      	ldr	r3, [pc, #268]	; (8001c98 <effect5Select+0x318>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
		channel_params_array[5].one_color_dim_g = 128;
 8001b90:	4b41      	ldr	r3, [pc, #260]	; (8001c98 <effect5Select+0x318>)
 8001b92:	2280      	movs	r2, #128	; 0x80
 8001b94:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		channel_params_array[5].one_color_dim_b = 128;
 8001b98:	4b3f      	ldr	r3, [pc, #252]	; (8001c98 <effect5Select+0x318>)
 8001b9a:	2280      	movs	r2, #128	; 0x80
 8001b9c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
		channel_params_array[5].one_color_dim_r_flag = 1;
 8001ba0:	4b3d      	ldr	r3, [pc, #244]	; (8001c98 <effect5Select+0x318>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
		channel_params_array[5].one_color_dim_g_flag = 1;
 8001ba8:	4b3b      	ldr	r3, [pc, #236]	; (8001c98 <effect5Select+0x318>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
		channel_params_array[5].one_color_dim_b_flag = 1;
 8001bb0:	4b39      	ldr	r3, [pc, #228]	; (8001c98 <effect5Select+0x318>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		channel_params_array[5].one_color_dim_increment = 1;
 8001bb8:	4b37      	ldr	r3, [pc, #220]	; (8001c98 <effect5Select+0x318>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
		channel_params_array[5].one_color_dim_r_dir = 0;
 8001bc0:	4b35      	ldr	r3, [pc, #212]	; (8001c98 <effect5Select+0x318>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
		channel_params_array[5].one_color_dim_g_dir = 0;
 8001bc8:	4b33      	ldr	r3, [pc, #204]	; (8001c98 <effect5Select+0x318>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
		channel_params_array[5].one_color_dim_b_dir = 0;
 8001bd0:	4b31      	ldr	r3, [pc, #196]	; (8001c98 <effect5Select+0x318>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

		channel_params_array[6].channel = 6;
 8001bd8:	4b2f      	ldr	r3, [pc, #188]	; (8001c98 <effect5Select+0x318>)
 8001bda:	2206      	movs	r2, #6
 8001bdc:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
		channel_params_array[6].EEFECT = ONE_COLOR_EFFECT_DIM;
 8001be0:	4b2d      	ldr	r3, [pc, #180]	; (8001c98 <effect5Select+0x318>)
 8001be2:	2203      	movs	r2, #3
 8001be4:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		channel_params_array[6].effectExecutor = &effectOneColorDim;
 8001be8:	4b2b      	ldr	r3, [pc, #172]	; (8001c98 <effect5Select+0x318>)
 8001bea:	4a2c      	ldr	r2, [pc, #176]	; (8001c9c <effect5Select+0x31c>)
 8001bec:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		channel_params_array[6].one_color_dim_r = 255;
 8001bf0:	4b29      	ldr	r3, [pc, #164]	; (8001c98 <effect5Select+0x318>)
 8001bf2:	22ff      	movs	r2, #255	; 0xff
 8001bf4:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
		channel_params_array[6].one_color_dim_g = 255;
 8001bf8:	4b27      	ldr	r3, [pc, #156]	; (8001c98 <effect5Select+0x318>)
 8001bfa:	22ff      	movs	r2, #255	; 0xff
 8001bfc:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		channel_params_array[6].one_color_dim_b = 0;
 8001c00:	4b25      	ldr	r3, [pc, #148]	; (8001c98 <effect5Select+0x318>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
		channel_params_array[6].one_color_dim_r_flag = 1;
 8001c08:	4b23      	ldr	r3, [pc, #140]	; (8001c98 <effect5Select+0x318>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
		channel_params_array[6].one_color_dim_g_flag = 1;
 8001c10:	4b21      	ldr	r3, [pc, #132]	; (8001c98 <effect5Select+0x318>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
		channel_params_array[6].one_color_dim_b_flag = 1;
 8001c18:	4b1f      	ldr	r3, [pc, #124]	; (8001c98 <effect5Select+0x318>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		channel_params_array[6].one_color_dim_increment = 3;
 8001c20:	4b1d      	ldr	r3, [pc, #116]	; (8001c98 <effect5Select+0x318>)
 8001c22:	2203      	movs	r2, #3
 8001c24:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
		channel_params_array[6].one_color_dim_r_dir = 0;
 8001c28:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <effect5Select+0x318>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		channel_params_array[6].one_color_dim_g_dir = 0;
 8001c30:	4b19      	ldr	r3, [pc, #100]	; (8001c98 <effect5Select+0x318>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
		channel_params_array[6].one_color_dim_b_dir = 0;
 8001c38:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <effect5Select+0x318>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

		channel_params_array[7].channel = 7;
 8001c40:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <effect5Select+0x318>)
 8001c42:	2207      	movs	r2, #7
 8001c44:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
		channel_params_array[7].EEFECT = ONE_COLOR_EFFECT_DIM;
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <effect5Select+0x318>)
 8001c4a:	2203      	movs	r2, #3
 8001c4c:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
		channel_params_array[7].effectExecutor = &effectOneColorDim;
 8001c50:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <effect5Select+0x318>)
 8001c52:	4a12      	ldr	r2, [pc, #72]	; (8001c9c <effect5Select+0x31c>)
 8001c54:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		channel_params_array[7].one_color_dim_r = 0;
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <effect5Select+0x318>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 20cf 	strb.w	r2, [r3, #207]	; 0xcf
		channel_params_array[7].one_color_dim_g = 255;
 8001c60:	4b0d      	ldr	r3, [pc, #52]	; (8001c98 <effect5Select+0x318>)
 8001c62:	22ff      	movs	r2, #255	; 0xff
 8001c64:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
		channel_params_array[7].one_color_dim_b = 0;
 8001c68:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <effect5Select+0x318>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
		channel_params_array[7].one_color_dim_r_flag = 1;
 8001c70:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <effect5Select+0x318>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
		channel_params_array[7].one_color_dim_g_flag = 1;
 8001c78:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <effect5Select+0x318>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
		channel_params_array[7].one_color_dim_b_flag = 1;
 8001c80:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <effect5Select+0x318>)
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
		channel_params_array[7].one_color_dim_increment = 3;
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <effect5Select+0x318>)
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
 8001c90:	e006      	b.n	8001ca0 <effect5Select+0x320>
 8001c92:	bf00      	nop
 8001c94:	20000000 	.word	0x20000000
 8001c98:	2000064c 	.word	0x2000064c
 8001c9c:	0800056d 	.word	0x0800056d
		channel_params_array[7].one_color_dim_r_dir = 0;
 8001ca0:	4b3d      	ldr	r3, [pc, #244]	; (8001d98 <effect5Select+0x418>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
		channel_params_array[7].one_color_dim_g_dir = 0;
 8001ca8:	4b3b      	ldr	r3, [pc, #236]	; (8001d98 <effect5Select+0x418>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
		channel_params_array[7].one_color_dim_b_dir = 0;
 8001cb0:	4b39      	ldr	r3, [pc, #228]	; (8001d98 <effect5Select+0x418>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8

		channel_params_array[8].channel = 8;
 8001cb8:	4b37      	ldr	r3, [pc, #220]	; (8001d98 <effect5Select+0x418>)
 8001cba:	2208      	movs	r2, #8
 8001cbc:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
		channel_params_array[8].EEFECT = ONE_COLOR_EFFECT_DIM;
 8001cc0:	4b35      	ldr	r3, [pc, #212]	; (8001d98 <effect5Select+0x418>)
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
		channel_params_array[8].effectExecutor = &effectOneColorDim;
 8001cc8:	4b33      	ldr	r3, [pc, #204]	; (8001d98 <effect5Select+0x418>)
 8001cca:	4a34      	ldr	r2, [pc, #208]	; (8001d9c <effect5Select+0x41c>)
 8001ccc:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		channel_params_array[8].one_color_dim_r = 0;
 8001cd0:	4b31      	ldr	r3, [pc, #196]	; (8001d98 <effect5Select+0x418>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
		channel_params_array[8].one_color_dim_g = 255;
 8001cd8:	4b2f      	ldr	r3, [pc, #188]	; (8001d98 <effect5Select+0x418>)
 8001cda:	22ff      	movs	r2, #255	; 0xff
 8001cdc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		channel_params_array[8].one_color_dim_b = 255;
 8001ce0:	4b2d      	ldr	r3, [pc, #180]	; (8001d98 <effect5Select+0x418>)
 8001ce2:	22ff      	movs	r2, #255	; 0xff
 8001ce4:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
		channel_params_array[8].one_color_dim_r_flag = 1;
 8001ce8:	4b2b      	ldr	r3, [pc, #172]	; (8001d98 <effect5Select+0x418>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
		channel_params_array[8].one_color_dim_g_flag = 1;
 8001cf0:	4b29      	ldr	r3, [pc, #164]	; (8001d98 <effect5Select+0x418>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
		channel_params_array[8].one_color_dim_b_flag = 1;
 8001cf8:	4b27      	ldr	r3, [pc, #156]	; (8001d98 <effect5Select+0x418>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
		channel_params_array[8].one_color_dim_increment = 2;
 8001d00:	4b25      	ldr	r3, [pc, #148]	; (8001d98 <effect5Select+0x418>)
 8001d02:	2202      	movs	r2, #2
 8001d04:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
		channel_params_array[8].one_color_dim_r_dir = 0;
 8001d08:	4b23      	ldr	r3, [pc, #140]	; (8001d98 <effect5Select+0x418>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
		channel_params_array[8].one_color_dim_g_dir = 0;
 8001d10:	4b21      	ldr	r3, [pc, #132]	; (8001d98 <effect5Select+0x418>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3
		channel_params_array[8].one_color_dim_b_dir = 0;
 8001d18:	4b1f      	ldr	r3, [pc, #124]	; (8001d98 <effect5Select+0x418>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4

		channel_params_array[9].channel = 9;
 8001d20:	4b1d      	ldr	r3, [pc, #116]	; (8001d98 <effect5Select+0x418>)
 8001d22:	2209      	movs	r2, #9
 8001d24:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
		channel_params_array[9].EEFECT = ONE_COLOR_EFFECT_DIM;
 8001d28:	4b1b      	ldr	r3, [pc, #108]	; (8001d98 <effect5Select+0x418>)
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
		channel_params_array[9].effectExecutor = &effectOneColorDim;
 8001d30:	4b19      	ldr	r3, [pc, #100]	; (8001d98 <effect5Select+0x418>)
 8001d32:	4a1a      	ldr	r2, [pc, #104]	; (8001d9c <effect5Select+0x41c>)
 8001d34:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		channel_params_array[9].one_color_dim_r = 0;
 8001d38:	4b17      	ldr	r3, [pc, #92]	; (8001d98 <effect5Select+0x418>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
		channel_params_array[9].one_color_dim_g = 255;
 8001d40:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <effect5Select+0x418>)
 8001d42:	22ff      	movs	r2, #255	; 0xff
 8001d44:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
		channel_params_array[9].one_color_dim_b = 255;
 8001d48:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <effect5Select+0x418>)
 8001d4a:	22ff      	movs	r2, #255	; 0xff
 8001d4c:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
		channel_params_array[9].one_color_dim_r_flag = 1;
 8001d50:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <effect5Select+0x418>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
		channel_params_array[9].one_color_dim_g_flag = 1;
 8001d58:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <effect5Select+0x418>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
		channel_params_array[9].one_color_dim_b_flag = 1;
 8001d60:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <effect5Select+0x418>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
		channel_params_array[9].one_color_dim_increment = 1;
 8001d68:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <effect5Select+0x418>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
		channel_params_array[9].one_color_dim_r_dir = 0;
 8001d70:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <effect5Select+0x418>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
		channel_params_array[9].one_color_dim_g_dir = 0;
 8001d78:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <effect5Select+0x418>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
		channel_params_array[9].one_color_dim_b_dir = 0;
 8001d80:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <effect5Select+0x418>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

		effectSelectorFlag = 0;
 8001d88:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <effect5Select+0x420>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	701a      	strb	r2, [r3, #0]
	}
}
 8001d8e:	bf00      	nop
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	2000064c 	.word	0x2000064c
 8001d9c:	0800056d 	.word	0x0800056d
 8001da0:	20000000 	.word	0x20000000

08001da4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b094      	sub	sp, #80	; 0x50
 8001da8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001daa:	f107 0320 	add.w	r3, r7, #32
 8001dae:	2230      	movs	r2, #48	; 0x30
 8001db0:	2100      	movs	r1, #0
 8001db2:	4618      	mov	r0, r3
 8001db4:	f002 fa7c 	bl	80042b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001db8:	f107 030c 	add.w	r3, r7, #12
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	4b27      	ldr	r3, [pc, #156]	; (8001e6c <SystemClock_Config+0xc8>)
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	4a26      	ldr	r2, [pc, #152]	; (8001e6c <SystemClock_Config+0xc8>)
 8001dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd8:	4b24      	ldr	r3, [pc, #144]	; (8001e6c <SystemClock_Config+0xc8>)
 8001dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001de4:	2300      	movs	r3, #0
 8001de6:	607b      	str	r3, [r7, #4]
 8001de8:	4b21      	ldr	r3, [pc, #132]	; (8001e70 <SystemClock_Config+0xcc>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a20      	ldr	r2, [pc, #128]	; (8001e70 <SystemClock_Config+0xcc>)
 8001dee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	4b1e      	ldr	r3, [pc, #120]	; (8001e70 <SystemClock_Config+0xcc>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dfc:	607b      	str	r3, [r7, #4]
 8001dfe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e00:	2301      	movs	r3, #1
 8001e02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001e14:	230c      	movs	r3, #12
 8001e16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001e18:	2390      	movs	r3, #144	; 0x90
 8001e1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001e1c:	2306      	movs	r3, #6
 8001e1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e20:	2304      	movs	r3, #4
 8001e22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e24:	f107 0320 	add.w	r3, r7, #32
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f000 fd4d 	bl	80028c8 <HAL_RCC_OscConfig>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e34:	f000 f8a6 	bl	8001f84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e38:	230f      	movs	r3, #15
 8001e3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e4c:	f107 030c 	add.w	r3, r7, #12
 8001e50:	2101      	movs	r1, #1
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 ffb0 	bl	8002db8 <HAL_RCC_ClockConfig>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001e5e:	f000 f891 	bl	8001f84 <Error_Handler>
  }
}
 8001e62:	bf00      	nop
 8001e64:	3750      	adds	r7, #80	; 0x50
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40007000 	.word	0x40007000

08001e74 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8001e78:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <MX_USART1_UART_Init+0x4c>)
 8001e7a:	4a12      	ldr	r2, [pc, #72]	; (8001ec4 <MX_USART1_UART_Init+0x50>)
 8001e7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001e7e:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <MX_USART1_UART_Init+0x4c>)
 8001e80:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e86:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <MX_USART1_UART_Init+0x4c>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <MX_USART1_UART_Init+0x4c>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e92:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <MX_USART1_UART_Init+0x4c>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e98:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <MX_USART1_UART_Init+0x4c>)
 8001e9a:	220c      	movs	r2, #12
 8001e9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e9e:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <MX_USART1_UART_Init+0x4c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <MX_USART1_UART_Init+0x4c>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001eaa:	4805      	ldr	r0, [pc, #20]	; (8001ec0 <MX_USART1_UART_Init+0x4c>)
 8001eac:	f001 f964 	bl	8003178 <HAL_UART_Init>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001eb6:	f000 f865 	bl	8001f84 <Error_Handler>
  }
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000604 	.word	0x20000604
 8001ec4:	40011000 	.word	0x40011000

08001ec8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b088      	sub	sp, #32
 8001ecc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ece:	f107 030c 	add.w	r3, r7, #12
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	605a      	str	r2, [r3, #4]
 8001ed8:	609a      	str	r2, [r3, #8]
 8001eda:	60da      	str	r2, [r3, #12]
 8001edc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60bb      	str	r3, [r7, #8]
 8001ee2:	4b26      	ldr	r3, [pc, #152]	; (8001f7c <MX_GPIO_Init+0xb4>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	4a25      	ldr	r2, [pc, #148]	; (8001f7c <MX_GPIO_Init+0xb4>)
 8001ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eec:	6313      	str	r3, [r2, #48]	; 0x30
 8001eee:	4b23      	ldr	r3, [pc, #140]	; (8001f7c <MX_GPIO_Init+0xb4>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	607b      	str	r3, [r7, #4]
 8001efe:	4b1f      	ldr	r3, [pc, #124]	; (8001f7c <MX_GPIO_Init+0xb4>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	4a1e      	ldr	r2, [pc, #120]	; (8001f7c <MX_GPIO_Init+0xb4>)
 8001f04:	f043 0302 	orr.w	r3, r3, #2
 8001f08:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0a:	4b1c      	ldr	r3, [pc, #112]	; (8001f7c <MX_GPIO_Init+0xb4>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	607b      	str	r3, [r7, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	603b      	str	r3, [r7, #0]
 8001f1a:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <MX_GPIO_Init+0xb4>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	4a17      	ldr	r2, [pc, #92]	; (8001f7c <MX_GPIO_Init+0xb4>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6313      	str	r3, [r2, #48]	; 0x30
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <MX_GPIO_Init+0xb4>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	603b      	str	r3, [r7, #0]
 8001f30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8001f32:	2200      	movs	r2, #0
 8001f34:	f240 31f7 	movw	r1, #1015	; 0x3f7
 8001f38:	4811      	ldr	r0, [pc, #68]	; (8001f80 <MX_GPIO_Init+0xb8>)
 8001f3a:	f000 fcab 	bl	8002894 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB0 PB1 PB2 PB4
                           PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8001f3e:	f240 33f7 	movw	r3, #1015	; 0x3f7
 8001f42:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f44:	2301      	movs	r3, #1
 8001f46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f50:	f107 030c 	add.w	r3, r7, #12
 8001f54:	4619      	mov	r1, r3
 8001f56:	480a      	ldr	r0, [pc, #40]	; (8001f80 <MX_GPIO_Init+0xb8>)
 8001f58:	f000 fb18 	bl	800258c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f5c:	2308      	movs	r3, #8
 8001f5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f60:	2303      	movs	r3, #3
 8001f62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f68:	f107 030c 	add.w	r3, r7, #12
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4804      	ldr	r0, [pc, #16]	; (8001f80 <MX_GPIO_Init+0xb8>)
 8001f70:	f000 fb0c 	bl	800258c <HAL_GPIO_Init>

}
 8001f74:	bf00      	nop
 8001f76:	3720      	adds	r7, #32
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40020400 	.word	0x40020400

08001f84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f88:	b672      	cpsid	i
}
 8001f8a:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f8c:	e7fe      	b.n	8001f8c <Error_Handler+0x8>
	...

08001f90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	607b      	str	r3, [r7, #4]
 8001f9a:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <HAL_MspInit+0x4c>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	4a0f      	ldr	r2, [pc, #60]	; (8001fdc <HAL_MspInit+0x4c>)
 8001fa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa6:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <HAL_MspInit+0x4c>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fae:	607b      	str	r3, [r7, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	603b      	str	r3, [r7, #0]
 8001fb6:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <HAL_MspInit+0x4c>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	4a08      	ldr	r2, [pc, #32]	; (8001fdc <HAL_MspInit+0x4c>)
 8001fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc2:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <HAL_MspInit+0x4c>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fca:	603b      	str	r3, [r7, #0]
 8001fcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40023800 	.word	0x40023800

08001fe0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08a      	sub	sp, #40	; 0x28
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe8:	f107 0314 	add.w	r3, r7, #20
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a1d      	ldr	r2, [pc, #116]	; (8002074 <HAL_UART_MspInit+0x94>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d134      	bne.n	800206c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	4b1c      	ldr	r3, [pc, #112]	; (8002078 <HAL_UART_MspInit+0x98>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	4a1b      	ldr	r2, [pc, #108]	; (8002078 <HAL_UART_MspInit+0x98>)
 800200c:	f043 0310 	orr.w	r3, r3, #16
 8002010:	6453      	str	r3, [r2, #68]	; 0x44
 8002012:	4b19      	ldr	r3, [pc, #100]	; (8002078 <HAL_UART_MspInit+0x98>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	f003 0310 	and.w	r3, r3, #16
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	4b15      	ldr	r3, [pc, #84]	; (8002078 <HAL_UART_MspInit+0x98>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	4a14      	ldr	r2, [pc, #80]	; (8002078 <HAL_UART_MspInit+0x98>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	6313      	str	r3, [r2, #48]	; 0x30
 800202e:	4b12      	ldr	r3, [pc, #72]	; (8002078 <HAL_UART_MspInit+0x98>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800203a:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 800203e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002040:	2302      	movs	r3, #2
 8002042:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002048:	2303      	movs	r3, #3
 800204a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800204c:	2307      	movs	r3, #7
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002050:	f107 0314 	add.w	r3, r7, #20
 8002054:	4619      	mov	r1, r3
 8002056:	4809      	ldr	r0, [pc, #36]	; (800207c <HAL_UART_MspInit+0x9c>)
 8002058:	f000 fa98 	bl	800258c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800205c:	2200      	movs	r2, #0
 800205e:	2100      	movs	r1, #0
 8002060:	2025      	movs	r0, #37	; 0x25
 8002062:	f000 f9ca 	bl	80023fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002066:	2025      	movs	r0, #37	; 0x25
 8002068:	f000 f9e3 	bl	8002432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800206c:	bf00      	nop
 800206e:	3728      	adds	r7, #40	; 0x28
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40011000 	.word	0x40011000
 8002078:	40023800 	.word	0x40023800
 800207c:	40020000 	.word	0x40020000

08002080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002084:	e7fe      	b.n	8002084 <NMI_Handler+0x4>

08002086 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800208a:	e7fe      	b.n	800208a <HardFault_Handler+0x4>

0800208c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002090:	e7fe      	b.n	8002090 <MemManage_Handler+0x4>

08002092 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002092:	b480      	push	{r7}
 8002094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002096:	e7fe      	b.n	8002096 <BusFault_Handler+0x4>

08002098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800209c:	e7fe      	b.n	800209c <UsageFault_Handler+0x4>

0800209e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020ba:	b480      	push	{r7}
 80020bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020cc:	f000 f89a 	bl	8002204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020d0:	bf00      	nop
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020d8:	4802      	ldr	r0, [pc, #8]	; (80020e4 <USART1_IRQHandler+0x10>)
 80020da:	f001 f95d 	bl	8003398 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000604 	.word	0x20000604

080020e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <SystemInit+0x20>)
 80020ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f2:	4a05      	ldr	r2, [pc, #20]	; (8002108 <SystemInit+0x20>)
 80020f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800210c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002144 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002110:	480d      	ldr	r0, [pc, #52]	; (8002148 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002112:	490e      	ldr	r1, [pc, #56]	; (800214c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002114:	4a0e      	ldr	r2, [pc, #56]	; (8002150 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002118:	e002      	b.n	8002120 <LoopCopyDataInit>

0800211a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800211a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800211c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800211e:	3304      	adds	r3, #4

08002120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002124:	d3f9      	bcc.n	800211a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002126:	4a0b      	ldr	r2, [pc, #44]	; (8002154 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002128:	4c0b      	ldr	r4, [pc, #44]	; (8002158 <LoopFillZerobss+0x26>)
  movs r3, #0
 800212a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800212c:	e001      	b.n	8002132 <LoopFillZerobss>

0800212e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800212e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002130:	3204      	adds	r2, #4

08002132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002134:	d3fb      	bcc.n	800212e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002136:	f7ff ffd7 	bl	80020e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800213a:	f002 f895 	bl	8004268 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800213e:	f7fe fdc9 	bl	8000cd4 <main>
  bx  lr    
 8002142:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002144:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002148:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800214c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002150:	08004368 	.word	0x08004368
  ldr r2, =_sbss
 8002154:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8002158:	2000076c 	.word	0x2000076c

0800215c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800215c:	e7fe      	b.n	800215c <ADC_IRQHandler>
	...

08002160 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002164:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <HAL_Init+0x40>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a0d      	ldr	r2, [pc, #52]	; (80021a0 <HAL_Init+0x40>)
 800216a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800216e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002170:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <HAL_Init+0x40>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a0a      	ldr	r2, [pc, #40]	; (80021a0 <HAL_Init+0x40>)
 8002176:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800217a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800217c:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <HAL_Init+0x40>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a07      	ldr	r2, [pc, #28]	; (80021a0 <HAL_Init+0x40>)
 8002182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002186:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002188:	2003      	movs	r0, #3
 800218a:	f000 f92b 	bl	80023e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800218e:	200f      	movs	r0, #15
 8002190:	f000 f808 	bl	80021a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002194:	f7ff fefc 	bl	8001f90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40023c00 	.word	0x40023c00

080021a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021ac:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <HAL_InitTick+0x54>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	4b12      	ldr	r3, [pc, #72]	; (80021fc <HAL_InitTick+0x58>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	4619      	mov	r1, r3
 80021b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80021be:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 f943 	bl	800244e <HAL_SYSTICK_Config>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e00e      	b.n	80021f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b0f      	cmp	r3, #15
 80021d6:	d80a      	bhi.n	80021ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021d8:	2200      	movs	r2, #0
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	f04f 30ff 	mov.w	r0, #4294967295
 80021e0:	f000 f90b 	bl	80023fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021e4:	4a06      	ldr	r2, [pc, #24]	; (8002200 <HAL_InitTick+0x5c>)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
 80021ec:	e000      	b.n	80021f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20000008 	.word	0x20000008
 80021fc:	20000010 	.word	0x20000010
 8002200:	2000000c 	.word	0x2000000c

08002204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_IncTick+0x20>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	461a      	mov	r2, r3
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <HAL_IncTick+0x24>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4413      	add	r3, r2
 8002214:	4a04      	ldr	r2, [pc, #16]	; (8002228 <HAL_IncTick+0x24>)
 8002216:	6013      	str	r3, [r2, #0]
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	20000010 	.word	0x20000010
 8002228:	20000768 	.word	0x20000768

0800222c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return uwTick;
 8002230:	4b03      	ldr	r3, [pc, #12]	; (8002240 <HAL_GetTick+0x14>)
 8002232:	681b      	ldr	r3, [r3, #0]
}
 8002234:	4618      	mov	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	20000768 	.word	0x20000768

08002244 <__NVIC_SetPriorityGrouping>:
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002254:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <__NVIC_SetPriorityGrouping+0x44>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002260:	4013      	ands	r3, r2
 8002262:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800226c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002276:	4a04      	ldr	r2, [pc, #16]	; (8002288 <__NVIC_SetPriorityGrouping+0x44>)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	60d3      	str	r3, [r2, #12]
}
 800227c:	bf00      	nop
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <__NVIC_GetPriorityGrouping>:
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002290:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	0a1b      	lsrs	r3, r3, #8
 8002296:	f003 0307 	and.w	r3, r3, #7
}
 800229a:	4618      	mov	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <__NVIC_EnableIRQ>:
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	db0b      	blt.n	80022d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	f003 021f 	and.w	r2, r3, #31
 80022c0:	4907      	ldr	r1, [pc, #28]	; (80022e0 <__NVIC_EnableIRQ+0x38>)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	095b      	lsrs	r3, r3, #5
 80022c8:	2001      	movs	r0, #1
 80022ca:	fa00 f202 	lsl.w	r2, r0, r2
 80022ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	e000e100 	.word	0xe000e100

080022e4 <__NVIC_SetPriority>:
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	6039      	str	r1, [r7, #0]
 80022ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	db0a      	blt.n	800230e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	490c      	ldr	r1, [pc, #48]	; (8002330 <__NVIC_SetPriority+0x4c>)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	0112      	lsls	r2, r2, #4
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	440b      	add	r3, r1
 8002308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800230c:	e00a      	b.n	8002324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	b2da      	uxtb	r2, r3
 8002312:	4908      	ldr	r1, [pc, #32]	; (8002334 <__NVIC_SetPriority+0x50>)
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	3b04      	subs	r3, #4
 800231c:	0112      	lsls	r2, r2, #4
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	440b      	add	r3, r1
 8002322:	761a      	strb	r2, [r3, #24]
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	e000e100 	.word	0xe000e100
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002338:	b480      	push	{r7}
 800233a:	b089      	sub	sp, #36	; 0x24
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f1c3 0307 	rsb	r3, r3, #7
 8002352:	2b04      	cmp	r3, #4
 8002354:	bf28      	it	cs
 8002356:	2304      	movcs	r3, #4
 8002358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3304      	adds	r3, #4
 800235e:	2b06      	cmp	r3, #6
 8002360:	d902      	bls.n	8002368 <NVIC_EncodePriority+0x30>
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3b03      	subs	r3, #3
 8002366:	e000      	b.n	800236a <NVIC_EncodePriority+0x32>
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800236c:	f04f 32ff 	mov.w	r2, #4294967295
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43da      	mvns	r2, r3
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	401a      	ands	r2, r3
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002380:	f04f 31ff 	mov.w	r1, #4294967295
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	fa01 f303 	lsl.w	r3, r1, r3
 800238a:	43d9      	mvns	r1, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002390:	4313      	orrs	r3, r2
         );
}
 8002392:	4618      	mov	r0, r3
 8002394:	3724      	adds	r7, #36	; 0x24
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
	...

080023a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023b0:	d301      	bcc.n	80023b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023b2:	2301      	movs	r3, #1
 80023b4:	e00f      	b.n	80023d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023b6:	4a0a      	ldr	r2, [pc, #40]	; (80023e0 <SysTick_Config+0x40>)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023be:	210f      	movs	r1, #15
 80023c0:	f04f 30ff 	mov.w	r0, #4294967295
 80023c4:	f7ff ff8e 	bl	80022e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023c8:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <SysTick_Config+0x40>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ce:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <SysTick_Config+0x40>)
 80023d0:	2207      	movs	r2, #7
 80023d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	e000e010 	.word	0xe000e010

080023e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7ff ff29 	bl	8002244 <__NVIC_SetPriorityGrouping>
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b086      	sub	sp, #24
 80023fe:	af00      	add	r7, sp, #0
 8002400:	4603      	mov	r3, r0
 8002402:	60b9      	str	r1, [r7, #8]
 8002404:	607a      	str	r2, [r7, #4]
 8002406:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800240c:	f7ff ff3e 	bl	800228c <__NVIC_GetPriorityGrouping>
 8002410:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	68b9      	ldr	r1, [r7, #8]
 8002416:	6978      	ldr	r0, [r7, #20]
 8002418:	f7ff ff8e 	bl	8002338 <NVIC_EncodePriority>
 800241c:	4602      	mov	r2, r0
 800241e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002422:	4611      	mov	r1, r2
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff ff5d 	bl	80022e4 <__NVIC_SetPriority>
}
 800242a:	bf00      	nop
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b082      	sub	sp, #8
 8002436:	af00      	add	r7, sp, #0
 8002438:	4603      	mov	r3, r0
 800243a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800243c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff ff31 	bl	80022a8 <__NVIC_EnableIRQ>
}
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff ffa2 	bl	80023a0 <SysTick_Config>
 800245c:	4603      	mov	r3, r0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b084      	sub	sp, #16
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002472:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002474:	f7ff feda 	bl	800222c <HAL_GetTick>
 8002478:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d008      	beq.n	8002498 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2280      	movs	r2, #128	; 0x80
 800248a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e052      	b.n	800253e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0216 	bic.w	r2, r2, #22
 80024a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	695a      	ldr	r2, [r3, #20]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024b6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d103      	bne.n	80024c8 <HAL_DMA_Abort+0x62>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d007      	beq.n	80024d8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0208 	bic.w	r2, r2, #8
 80024d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0201 	bic.w	r2, r2, #1
 80024e6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024e8:	e013      	b.n	8002512 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024ea:	f7ff fe9f 	bl	800222c <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b05      	cmp	r3, #5
 80024f6:	d90c      	bls.n	8002512 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2220      	movs	r2, #32
 80024fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2203      	movs	r2, #3
 8002502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e015      	b.n	800253e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1e4      	bne.n	80024ea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002524:	223f      	movs	r2, #63	; 0x3f
 8002526:	409a      	lsls	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d004      	beq.n	8002564 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2280      	movs	r2, #128	; 0x80
 800255e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e00c      	b.n	800257e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2205      	movs	r2, #5
 8002568:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0201 	bic.w	r2, r2, #1
 800257a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
	...

0800258c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800258c:	b480      	push	{r7}
 800258e:	b089      	sub	sp, #36	; 0x24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800259a:	2300      	movs	r3, #0
 800259c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800259e:	2300      	movs	r3, #0
 80025a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025a2:	2300      	movs	r3, #0
 80025a4:	61fb      	str	r3, [r7, #28]
 80025a6:	e159      	b.n	800285c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025a8:	2201      	movs	r2, #1
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	4013      	ands	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	f040 8148 	bne.w	8002856 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d005      	beq.n	80025de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d130      	bne.n	8002640 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	2203      	movs	r2, #3
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43db      	mvns	r3, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4013      	ands	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4313      	orrs	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002614:	2201      	movs	r2, #1
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	091b      	lsrs	r3, r3, #4
 800262a:	f003 0201 	and.w	r2, r3, #1
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4313      	orrs	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	2b03      	cmp	r3, #3
 800264a:	d017      	beq.n	800267c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	2203      	movs	r2, #3
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4313      	orrs	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f003 0303 	and.w	r3, r3, #3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d123      	bne.n	80026d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	08da      	lsrs	r2, r3, #3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3208      	adds	r2, #8
 8002690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002694:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	220f      	movs	r2, #15
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	691a      	ldr	r2, [r3, #16]
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	08da      	lsrs	r2, r3, #3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	3208      	adds	r2, #8
 80026ca:	69b9      	ldr	r1, [r7, #24]
 80026cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	2203      	movs	r2, #3
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 0203 	and.w	r2, r3, #3
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 80a2 	beq.w	8002856 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	4b57      	ldr	r3, [pc, #348]	; (8002874 <HAL_GPIO_Init+0x2e8>)
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	4a56      	ldr	r2, [pc, #344]	; (8002874 <HAL_GPIO_Init+0x2e8>)
 800271c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002720:	6453      	str	r3, [r2, #68]	; 0x44
 8002722:	4b54      	ldr	r3, [pc, #336]	; (8002874 <HAL_GPIO_Init+0x2e8>)
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800272e:	4a52      	ldr	r2, [pc, #328]	; (8002878 <HAL_GPIO_Init+0x2ec>)
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	089b      	lsrs	r3, r3, #2
 8002734:	3302      	adds	r3, #2
 8002736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	220f      	movs	r2, #15
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43db      	mvns	r3, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4013      	ands	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a49      	ldr	r2, [pc, #292]	; (800287c <HAL_GPIO_Init+0x2f0>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d019      	beq.n	800278e <HAL_GPIO_Init+0x202>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a48      	ldr	r2, [pc, #288]	; (8002880 <HAL_GPIO_Init+0x2f4>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d013      	beq.n	800278a <HAL_GPIO_Init+0x1fe>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a47      	ldr	r2, [pc, #284]	; (8002884 <HAL_GPIO_Init+0x2f8>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d00d      	beq.n	8002786 <HAL_GPIO_Init+0x1fa>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a46      	ldr	r2, [pc, #280]	; (8002888 <HAL_GPIO_Init+0x2fc>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d007      	beq.n	8002782 <HAL_GPIO_Init+0x1f6>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a45      	ldr	r2, [pc, #276]	; (800288c <HAL_GPIO_Init+0x300>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d101      	bne.n	800277e <HAL_GPIO_Init+0x1f2>
 800277a:	2304      	movs	r3, #4
 800277c:	e008      	b.n	8002790 <HAL_GPIO_Init+0x204>
 800277e:	2307      	movs	r3, #7
 8002780:	e006      	b.n	8002790 <HAL_GPIO_Init+0x204>
 8002782:	2303      	movs	r3, #3
 8002784:	e004      	b.n	8002790 <HAL_GPIO_Init+0x204>
 8002786:	2302      	movs	r3, #2
 8002788:	e002      	b.n	8002790 <HAL_GPIO_Init+0x204>
 800278a:	2301      	movs	r3, #1
 800278c:	e000      	b.n	8002790 <HAL_GPIO_Init+0x204>
 800278e:	2300      	movs	r3, #0
 8002790:	69fa      	ldr	r2, [r7, #28]
 8002792:	f002 0203 	and.w	r2, r2, #3
 8002796:	0092      	lsls	r2, r2, #2
 8002798:	4093      	lsls	r3, r2
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027a0:	4935      	ldr	r1, [pc, #212]	; (8002878 <HAL_GPIO_Init+0x2ec>)
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	089b      	lsrs	r3, r3, #2
 80027a6:	3302      	adds	r3, #2
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ae:	4b38      	ldr	r3, [pc, #224]	; (8002890 <HAL_GPIO_Init+0x304>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	43db      	mvns	r3, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4013      	ands	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027d2:	4a2f      	ldr	r2, [pc, #188]	; (8002890 <HAL_GPIO_Init+0x304>)
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027d8:	4b2d      	ldr	r3, [pc, #180]	; (8002890 <HAL_GPIO_Init+0x304>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	43db      	mvns	r3, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4013      	ands	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027fc:	4a24      	ldr	r2, [pc, #144]	; (8002890 <HAL_GPIO_Init+0x304>)
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002802:	4b23      	ldr	r3, [pc, #140]	; (8002890 <HAL_GPIO_Init+0x304>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	43db      	mvns	r3, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4013      	ands	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002826:	4a1a      	ldr	r2, [pc, #104]	; (8002890 <HAL_GPIO_Init+0x304>)
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800282c:	4b18      	ldr	r3, [pc, #96]	; (8002890 <HAL_GPIO_Init+0x304>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	43db      	mvns	r3, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4013      	ands	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d003      	beq.n	8002850 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	4313      	orrs	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002850:	4a0f      	ldr	r2, [pc, #60]	; (8002890 <HAL_GPIO_Init+0x304>)
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	3301      	adds	r3, #1
 800285a:	61fb      	str	r3, [r7, #28]
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	2b0f      	cmp	r3, #15
 8002860:	f67f aea2 	bls.w	80025a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002864:	bf00      	nop
 8002866:	bf00      	nop
 8002868:	3724      	adds	r7, #36	; 0x24
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40023800 	.word	0x40023800
 8002878:	40013800 	.word	0x40013800
 800287c:	40020000 	.word	0x40020000
 8002880:	40020400 	.word	0x40020400
 8002884:	40020800 	.word	0x40020800
 8002888:	40020c00 	.word	0x40020c00
 800288c:	40021000 	.word	0x40021000
 8002890:	40013c00 	.word	0x40013c00

08002894 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	807b      	strh	r3, [r7, #2]
 80028a0:	4613      	mov	r3, r2
 80028a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028a4:	787b      	ldrb	r3, [r7, #1]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028aa:	887a      	ldrh	r2, [r7, #2]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028b0:	e003      	b.n	80028ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028b2:	887b      	ldrh	r3, [r7, #2]
 80028b4:	041a      	lsls	r2, r3, #16
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	619a      	str	r2, [r3, #24]
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
	...

080028c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e267      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d075      	beq.n	80029d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028e6:	4b88      	ldr	r3, [pc, #544]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 030c 	and.w	r3, r3, #12
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d00c      	beq.n	800290c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028f2:	4b85      	ldr	r3, [pc, #532]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d112      	bne.n	8002924 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028fe:	4b82      	ldr	r3, [pc, #520]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800290a:	d10b      	bne.n	8002924 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800290c:	4b7e      	ldr	r3, [pc, #504]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d05b      	beq.n	80029d0 <HAL_RCC_OscConfig+0x108>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d157      	bne.n	80029d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e242      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800292c:	d106      	bne.n	800293c <HAL_RCC_OscConfig+0x74>
 800292e:	4b76      	ldr	r3, [pc, #472]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a75      	ldr	r2, [pc, #468]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002938:	6013      	str	r3, [r2, #0]
 800293a:	e01d      	b.n	8002978 <HAL_RCC_OscConfig+0xb0>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002944:	d10c      	bne.n	8002960 <HAL_RCC_OscConfig+0x98>
 8002946:	4b70      	ldr	r3, [pc, #448]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a6f      	ldr	r2, [pc, #444]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 800294c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	4b6d      	ldr	r3, [pc, #436]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a6c      	ldr	r2, [pc, #432]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	e00b      	b.n	8002978 <HAL_RCC_OscConfig+0xb0>
 8002960:	4b69      	ldr	r3, [pc, #420]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a68      	ldr	r2, [pc, #416]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800296a:	6013      	str	r3, [r2, #0]
 800296c:	4b66      	ldr	r3, [pc, #408]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a65      	ldr	r2, [pc, #404]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002976:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d013      	beq.n	80029a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002980:	f7ff fc54 	bl	800222c <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002988:	f7ff fc50 	bl	800222c <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b64      	cmp	r3, #100	; 0x64
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e207      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299a:	4b5b      	ldr	r3, [pc, #364]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0f0      	beq.n	8002988 <HAL_RCC_OscConfig+0xc0>
 80029a6:	e014      	b.n	80029d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a8:	f7ff fc40 	bl	800222c <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029b0:	f7ff fc3c 	bl	800222c <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b64      	cmp	r3, #100	; 0x64
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e1f3      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029c2:	4b51      	ldr	r3, [pc, #324]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f0      	bne.n	80029b0 <HAL_RCC_OscConfig+0xe8>
 80029ce:	e000      	b.n	80029d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d063      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029de:	4b4a      	ldr	r3, [pc, #296]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 030c 	and.w	r3, r3, #12
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00b      	beq.n	8002a02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ea:	4b47      	ldr	r3, [pc, #284]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029f2:	2b08      	cmp	r3, #8
 80029f4:	d11c      	bne.n	8002a30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029f6:	4b44      	ldr	r3, [pc, #272]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d116      	bne.n	8002a30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a02:	4b41      	ldr	r3, [pc, #260]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d005      	beq.n	8002a1a <HAL_RCC_OscConfig+0x152>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d001      	beq.n	8002a1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e1c7      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a1a:	4b3b      	ldr	r3, [pc, #236]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	4937      	ldr	r1, [pc, #220]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a2e:	e03a      	b.n	8002aa6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d020      	beq.n	8002a7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a38:	4b34      	ldr	r3, [pc, #208]	; (8002b0c <HAL_RCC_OscConfig+0x244>)
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3e:	f7ff fbf5 	bl	800222c <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a46:	f7ff fbf1 	bl	800222c <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e1a8      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a58:	4b2b      	ldr	r3, [pc, #172]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0f0      	beq.n	8002a46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a64:	4b28      	ldr	r3, [pc, #160]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	4925      	ldr	r1, [pc, #148]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	600b      	str	r3, [r1, #0]
 8002a78:	e015      	b.n	8002aa6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a7a:	4b24      	ldr	r3, [pc, #144]	; (8002b0c <HAL_RCC_OscConfig+0x244>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a80:	f7ff fbd4 	bl	800222c <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a88:	f7ff fbd0 	bl	800222c <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e187      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a9a:	4b1b      	ldr	r3, [pc, #108]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f0      	bne.n	8002a88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d036      	beq.n	8002b20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d016      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aba:	4b15      	ldr	r3, [pc, #84]	; (8002b10 <HAL_RCC_OscConfig+0x248>)
 8002abc:	2201      	movs	r2, #1
 8002abe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac0:	f7ff fbb4 	bl	800222c <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ac8:	f7ff fbb0 	bl	800222c <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e167      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ada:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0f0      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x200>
 8002ae6:	e01b      	b.n	8002b20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ae8:	4b09      	ldr	r3, [pc, #36]	; (8002b10 <HAL_RCC_OscConfig+0x248>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aee:	f7ff fb9d 	bl	800222c <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af4:	e00e      	b.n	8002b14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002af6:	f7ff fb99 	bl	800222c <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d907      	bls.n	8002b14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e150      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	42470000 	.word	0x42470000
 8002b10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b14:	4b88      	ldr	r3, [pc, #544]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002b16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1ea      	bne.n	8002af6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 8097 	beq.w	8002c5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b32:	4b81      	ldr	r3, [pc, #516]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10f      	bne.n	8002b5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60bb      	str	r3, [r7, #8]
 8002b42:	4b7d      	ldr	r3, [pc, #500]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	4a7c      	ldr	r2, [pc, #496]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b4e:	4b7a      	ldr	r3, [pc, #488]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b56:	60bb      	str	r3, [r7, #8]
 8002b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5e:	4b77      	ldr	r3, [pc, #476]	; (8002d3c <HAL_RCC_OscConfig+0x474>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d118      	bne.n	8002b9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b6a:	4b74      	ldr	r3, [pc, #464]	; (8002d3c <HAL_RCC_OscConfig+0x474>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a73      	ldr	r2, [pc, #460]	; (8002d3c <HAL_RCC_OscConfig+0x474>)
 8002b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b76:	f7ff fb59 	bl	800222c <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b7e:	f7ff fb55 	bl	800222c <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e10c      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b90:	4b6a      	ldr	r3, [pc, #424]	; (8002d3c <HAL_RCC_OscConfig+0x474>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0f0      	beq.n	8002b7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d106      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x2ea>
 8002ba4:	4b64      	ldr	r3, [pc, #400]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba8:	4a63      	ldr	r2, [pc, #396]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002baa:	f043 0301 	orr.w	r3, r3, #1
 8002bae:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb0:	e01c      	b.n	8002bec <HAL_RCC_OscConfig+0x324>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	2b05      	cmp	r3, #5
 8002bb8:	d10c      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x30c>
 8002bba:	4b5f      	ldr	r3, [pc, #380]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bbe:	4a5e      	ldr	r2, [pc, #376]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002bc0:	f043 0304 	orr.w	r3, r3, #4
 8002bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc6:	4b5c      	ldr	r3, [pc, #368]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bca:	4a5b      	ldr	r2, [pc, #364]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd2:	e00b      	b.n	8002bec <HAL_RCC_OscConfig+0x324>
 8002bd4:	4b58      	ldr	r3, [pc, #352]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd8:	4a57      	ldr	r2, [pc, #348]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002bda:	f023 0301 	bic.w	r3, r3, #1
 8002bde:	6713      	str	r3, [r2, #112]	; 0x70
 8002be0:	4b55      	ldr	r3, [pc, #340]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be4:	4a54      	ldr	r2, [pc, #336]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002be6:	f023 0304 	bic.w	r3, r3, #4
 8002bea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d015      	beq.n	8002c20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf4:	f7ff fb1a 	bl	800222c <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bfa:	e00a      	b.n	8002c12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bfc:	f7ff fb16 	bl	800222c <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e0cb      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c12:	4b49      	ldr	r3, [pc, #292]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0ee      	beq.n	8002bfc <HAL_RCC_OscConfig+0x334>
 8002c1e:	e014      	b.n	8002c4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c20:	f7ff fb04 	bl	800222c <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c26:	e00a      	b.n	8002c3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c28:	f7ff fb00 	bl	800222c <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e0b5      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c3e:	4b3e      	ldr	r3, [pc, #248]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1ee      	bne.n	8002c28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c4a:	7dfb      	ldrb	r3, [r7, #23]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d105      	bne.n	8002c5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c50:	4b39      	ldr	r3, [pc, #228]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	4a38      	ldr	r2, [pc, #224]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002c56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 80a1 	beq.w	8002da8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c66:	4b34      	ldr	r3, [pc, #208]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	d05c      	beq.n	8002d2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d141      	bne.n	8002cfe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7a:	4b31      	ldr	r3, [pc, #196]	; (8002d40 <HAL_RCC_OscConfig+0x478>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c80:	f7ff fad4 	bl	800222c <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c88:	f7ff fad0 	bl	800222c <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e087      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9a:	4b27      	ldr	r3, [pc, #156]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f0      	bne.n	8002c88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69da      	ldr	r2, [r3, #28]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	019b      	lsls	r3, r3, #6
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbc:	085b      	lsrs	r3, r3, #1
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	041b      	lsls	r3, r3, #16
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc8:	061b      	lsls	r3, r3, #24
 8002cca:	491b      	ldr	r1, [pc, #108]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cd0:	4b1b      	ldr	r3, [pc, #108]	; (8002d40 <HAL_RCC_OscConfig+0x478>)
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd6:	f7ff faa9 	bl	800222c <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cde:	f7ff faa5 	bl	800222c <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e05c      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf0:	4b11      	ldr	r3, [pc, #68]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0f0      	beq.n	8002cde <HAL_RCC_OscConfig+0x416>
 8002cfc:	e054      	b.n	8002da8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cfe:	4b10      	ldr	r3, [pc, #64]	; (8002d40 <HAL_RCC_OscConfig+0x478>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d04:	f7ff fa92 	bl	800222c <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d0c:	f7ff fa8e 	bl	800222c <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e045      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1e:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1f0      	bne.n	8002d0c <HAL_RCC_OscConfig+0x444>
 8002d2a:	e03d      	b.n	8002da8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d107      	bne.n	8002d44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e038      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	40007000 	.word	0x40007000
 8002d40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d44:	4b1b      	ldr	r3, [pc, #108]	; (8002db4 <HAL_RCC_OscConfig+0x4ec>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d028      	beq.n	8002da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d121      	bne.n	8002da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d11a      	bne.n	8002da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d74:	4013      	ands	r3, r2
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d111      	bne.n	8002da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8a:	085b      	lsrs	r3, r3, #1
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d107      	bne.n	8002da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d001      	beq.n	8002da8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e000      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40023800 	.word	0x40023800

08002db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e0cc      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dcc:	4b68      	ldr	r3, [pc, #416]	; (8002f70 <HAL_RCC_ClockConfig+0x1b8>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d90c      	bls.n	8002df4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dda:	4b65      	ldr	r3, [pc, #404]	; (8002f70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de2:	4b63      	ldr	r3, [pc, #396]	; (8002f70 <HAL_RCC_ClockConfig+0x1b8>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d001      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e0b8      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d020      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e0c:	4b59      	ldr	r3, [pc, #356]	; (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	4a58      	ldr	r2, [pc, #352]	; (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0308 	and.w	r3, r3, #8
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e24:	4b53      	ldr	r3, [pc, #332]	; (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	4a52      	ldr	r2, [pc, #328]	; (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e30:	4b50      	ldr	r3, [pc, #320]	; (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	494d      	ldr	r1, [pc, #308]	; (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d044      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d107      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e56:	4b47      	ldr	r3, [pc, #284]	; (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d119      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e07f      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d003      	beq.n	8002e76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e72:	2b03      	cmp	r3, #3
 8002e74:	d107      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e76:	4b3f      	ldr	r3, [pc, #252]	; (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d109      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e06f      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e86:	4b3b      	ldr	r3, [pc, #236]	; (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e067      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e96:	4b37      	ldr	r3, [pc, #220]	; (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f023 0203 	bic.w	r2, r3, #3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	4934      	ldr	r1, [pc, #208]	; (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ea8:	f7ff f9c0 	bl	800222c <HAL_GetTick>
 8002eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eae:	e00a      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eb0:	f7ff f9bc 	bl	800222c <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e04f      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec6:	4b2b      	ldr	r3, [pc, #172]	; (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 020c 	and.w	r2, r3, #12
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d1eb      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ed8:	4b25      	ldr	r3, [pc, #148]	; (8002f70 <HAL_RCC_ClockConfig+0x1b8>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d20c      	bcs.n	8002f00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee6:	4b22      	ldr	r3, [pc, #136]	; (8002f70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eee:	4b20      	ldr	r3, [pc, #128]	; (8002f70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d001      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e032      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d008      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f0c:	4b19      	ldr	r3, [pc, #100]	; (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	4916      	ldr	r1, [pc, #88]	; (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d009      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f2a:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	490e      	ldr	r1, [pc, #56]	; (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f3e:	f000 f821 	bl	8002f84 <HAL_RCC_GetSysClockFreq>
 8002f42:	4602      	mov	r2, r0
 8002f44:	4b0b      	ldr	r3, [pc, #44]	; (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	091b      	lsrs	r3, r3, #4
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	490a      	ldr	r1, [pc, #40]	; (8002f78 <HAL_RCC_ClockConfig+0x1c0>)
 8002f50:	5ccb      	ldrb	r3, [r1, r3]
 8002f52:	fa22 f303 	lsr.w	r3, r2, r3
 8002f56:	4a09      	ldr	r2, [pc, #36]	; (8002f7c <HAL_RCC_ClockConfig+0x1c4>)
 8002f58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f5a:	4b09      	ldr	r3, [pc, #36]	; (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff f920 	bl	80021a4 <HAL_InitTick>

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	40023c00 	.word	0x40023c00
 8002f74:	40023800 	.word	0x40023800
 8002f78:	08004340 	.word	0x08004340
 8002f7c:	20000008 	.word	0x20000008
 8002f80:	2000000c 	.word	0x2000000c

08002f84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f88:	b090      	sub	sp, #64	; 0x40
 8002f8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	637b      	str	r3, [r7, #52]	; 0x34
 8002f90:	2300      	movs	r3, #0
 8002f92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f94:	2300      	movs	r3, #0
 8002f96:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f9c:	4b59      	ldr	r3, [pc, #356]	; (8003104 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 030c 	and.w	r3, r3, #12
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d00d      	beq.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x40>
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	f200 80a1 	bhi.w	80030f0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d002      	beq.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x34>
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d003      	beq.n	8002fbe <HAL_RCC_GetSysClockFreq+0x3a>
 8002fb6:	e09b      	b.n	80030f0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fb8:	4b53      	ldr	r3, [pc, #332]	; (8003108 <HAL_RCC_GetSysClockFreq+0x184>)
 8002fba:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002fbc:	e09b      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fbe:	4b53      	ldr	r3, [pc, #332]	; (800310c <HAL_RCC_GetSysClockFreq+0x188>)
 8002fc0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002fc2:	e098      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fc4:	4b4f      	ldr	r3, [pc, #316]	; (8003104 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fcc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fce:	4b4d      	ldr	r3, [pc, #308]	; (8003104 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d028      	beq.n	800302c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fda:	4b4a      	ldr	r3, [pc, #296]	; (8003104 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	099b      	lsrs	r3, r3, #6
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	623b      	str	r3, [r7, #32]
 8002fe4:	627a      	str	r2, [r7, #36]	; 0x24
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002fec:	2100      	movs	r1, #0
 8002fee:	4b47      	ldr	r3, [pc, #284]	; (800310c <HAL_RCC_GetSysClockFreq+0x188>)
 8002ff0:	fb03 f201 	mul.w	r2, r3, r1
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	fb00 f303 	mul.w	r3, r0, r3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	4a43      	ldr	r2, [pc, #268]	; (800310c <HAL_RCC_GetSysClockFreq+0x188>)
 8002ffe:	fba0 1202 	umull	r1, r2, r0, r2
 8003002:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003004:	460a      	mov	r2, r1
 8003006:	62ba      	str	r2, [r7, #40]	; 0x28
 8003008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800300a:	4413      	add	r3, r2
 800300c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800300e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003010:	2200      	movs	r2, #0
 8003012:	61bb      	str	r3, [r7, #24]
 8003014:	61fa      	str	r2, [r7, #28]
 8003016:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800301a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800301e:	f7fd f8db 	bl	80001d8 <__aeabi_uldivmod>
 8003022:	4602      	mov	r2, r0
 8003024:	460b      	mov	r3, r1
 8003026:	4613      	mov	r3, r2
 8003028:	63fb      	str	r3, [r7, #60]	; 0x3c
 800302a:	e053      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800302c:	4b35      	ldr	r3, [pc, #212]	; (8003104 <HAL_RCC_GetSysClockFreq+0x180>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	099b      	lsrs	r3, r3, #6
 8003032:	2200      	movs	r2, #0
 8003034:	613b      	str	r3, [r7, #16]
 8003036:	617a      	str	r2, [r7, #20]
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800303e:	f04f 0b00 	mov.w	fp, #0
 8003042:	4652      	mov	r2, sl
 8003044:	465b      	mov	r3, fp
 8003046:	f04f 0000 	mov.w	r0, #0
 800304a:	f04f 0100 	mov.w	r1, #0
 800304e:	0159      	lsls	r1, r3, #5
 8003050:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003054:	0150      	lsls	r0, r2, #5
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	ebb2 080a 	subs.w	r8, r2, sl
 800305e:	eb63 090b 	sbc.w	r9, r3, fp
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	f04f 0300 	mov.w	r3, #0
 800306a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800306e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003072:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003076:	ebb2 0408 	subs.w	r4, r2, r8
 800307a:	eb63 0509 	sbc.w	r5, r3, r9
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	00eb      	lsls	r3, r5, #3
 8003088:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800308c:	00e2      	lsls	r2, r4, #3
 800308e:	4614      	mov	r4, r2
 8003090:	461d      	mov	r5, r3
 8003092:	eb14 030a 	adds.w	r3, r4, sl
 8003096:	603b      	str	r3, [r7, #0]
 8003098:	eb45 030b 	adc.w	r3, r5, fp
 800309c:	607b      	str	r3, [r7, #4]
 800309e:	f04f 0200 	mov.w	r2, #0
 80030a2:	f04f 0300 	mov.w	r3, #0
 80030a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030aa:	4629      	mov	r1, r5
 80030ac:	028b      	lsls	r3, r1, #10
 80030ae:	4621      	mov	r1, r4
 80030b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030b4:	4621      	mov	r1, r4
 80030b6:	028a      	lsls	r2, r1, #10
 80030b8:	4610      	mov	r0, r2
 80030ba:	4619      	mov	r1, r3
 80030bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030be:	2200      	movs	r2, #0
 80030c0:	60bb      	str	r3, [r7, #8]
 80030c2:	60fa      	str	r2, [r7, #12]
 80030c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030c8:	f7fd f886 	bl	80001d8 <__aeabi_uldivmod>
 80030cc:	4602      	mov	r2, r0
 80030ce:	460b      	mov	r3, r1
 80030d0:	4613      	mov	r3, r2
 80030d2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030d4:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <HAL_RCC_GetSysClockFreq+0x180>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	0c1b      	lsrs	r3, r3, #16
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	3301      	adds	r3, #1
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80030e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030ee:	e002      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030f0:	4b05      	ldr	r3, [pc, #20]	; (8003108 <HAL_RCC_GetSysClockFreq+0x184>)
 80030f2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3740      	adds	r7, #64	; 0x40
 80030fc:	46bd      	mov	sp, r7
 80030fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003102:	bf00      	nop
 8003104:	40023800 	.word	0x40023800
 8003108:	00f42400 	.word	0x00f42400
 800310c:	017d7840 	.word	0x017d7840

08003110 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003114:	4b03      	ldr	r3, [pc, #12]	; (8003124 <HAL_RCC_GetHCLKFreq+0x14>)
 8003116:	681b      	ldr	r3, [r3, #0]
}
 8003118:	4618      	mov	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	20000008 	.word	0x20000008

08003128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800312c:	f7ff fff0 	bl	8003110 <HAL_RCC_GetHCLKFreq>
 8003130:	4602      	mov	r2, r0
 8003132:	4b05      	ldr	r3, [pc, #20]	; (8003148 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	0a9b      	lsrs	r3, r3, #10
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	4903      	ldr	r1, [pc, #12]	; (800314c <HAL_RCC_GetPCLK1Freq+0x24>)
 800313e:	5ccb      	ldrb	r3, [r1, r3]
 8003140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003144:	4618      	mov	r0, r3
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40023800 	.word	0x40023800
 800314c:	08004350 	.word	0x08004350

08003150 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003154:	f7ff ffdc 	bl	8003110 <HAL_RCC_GetHCLKFreq>
 8003158:	4602      	mov	r2, r0
 800315a:	4b05      	ldr	r3, [pc, #20]	; (8003170 <HAL_RCC_GetPCLK2Freq+0x20>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	0b5b      	lsrs	r3, r3, #13
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	4903      	ldr	r1, [pc, #12]	; (8003174 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003166:	5ccb      	ldrb	r3, [r1, r3]
 8003168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800316c:	4618      	mov	r0, r3
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40023800 	.word	0x40023800
 8003174:	08004350 	.word	0x08004350

08003178 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e03f      	b.n	800320a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d106      	bne.n	80031a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7fe ff1e 	bl	8001fe0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2224      	movs	r2, #36	; 0x24
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 fddf 	bl	8003d80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	691a      	ldr	r2, [r3, #16]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695a      	ldr	r2, [r3, #20]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b08a      	sub	sp, #40	; 0x28
 8003216:	af02      	add	r7, sp, #8
 8003218:	60f8      	str	r0, [r7, #12]
 800321a:	60b9      	str	r1, [r7, #8]
 800321c:	603b      	str	r3, [r7, #0]
 800321e:	4613      	mov	r3, r2
 8003220:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003222:	2300      	movs	r3, #0
 8003224:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b20      	cmp	r3, #32
 8003230:	d17c      	bne.n	800332c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <HAL_UART_Transmit+0x2c>
 8003238:	88fb      	ldrh	r3, [r7, #6]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e075      	b.n	800332e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <HAL_UART_Transmit+0x3e>
 800324c:	2302      	movs	r3, #2
 800324e:	e06e      	b.n	800332e <HAL_UART_Transmit+0x11c>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2221      	movs	r2, #33	; 0x21
 8003262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003266:	f7fe ffe1 	bl	800222c <HAL_GetTick>
 800326a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	88fa      	ldrh	r2, [r7, #6]
 8003270:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	88fa      	ldrh	r2, [r7, #6]
 8003276:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003280:	d108      	bne.n	8003294 <HAL_UART_Transmit+0x82>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d104      	bne.n	8003294 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800328a:	2300      	movs	r3, #0
 800328c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	61bb      	str	r3, [r7, #24]
 8003292:	e003      	b.n	800329c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003298:	2300      	movs	r3, #0
 800329a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80032a4:	e02a      	b.n	80032fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	2200      	movs	r2, #0
 80032ae:	2180      	movs	r1, #128	; 0x80
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f000 fb1f 	bl	80038f4 <UART_WaitOnFlagUntilTimeout>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e036      	b.n	800332e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10b      	bne.n	80032de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	881b      	ldrh	r3, [r3, #0]
 80032ca:	461a      	mov	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	3302      	adds	r3, #2
 80032da:	61bb      	str	r3, [r7, #24]
 80032dc:	e007      	b.n	80032ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	781a      	ldrb	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	3301      	adds	r3, #1
 80032ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	3b01      	subs	r3, #1
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003300:	b29b      	uxth	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1cf      	bne.n	80032a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2200      	movs	r2, #0
 800330e:	2140      	movs	r1, #64	; 0x40
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 faef 	bl	80038f4 <UART_WaitOnFlagUntilTimeout>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e006      	b.n	800332e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2220      	movs	r2, #32
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003328:	2300      	movs	r3, #0
 800332a:	e000      	b.n	800332e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800332c:	2302      	movs	r3, #2
  }
}
 800332e:	4618      	mov	r0, r3
 8003330:	3720      	adds	r7, #32
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b084      	sub	sp, #16
 800333a:	af00      	add	r7, sp, #0
 800333c:	60f8      	str	r0, [r7, #12]
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	4613      	mov	r3, r2
 8003342:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b20      	cmp	r3, #32
 800334e:	d11d      	bne.n	800338c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d002      	beq.n	800335c <HAL_UART_Receive_IT+0x26>
 8003356:	88fb      	ldrh	r3, [r7, #6]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e016      	b.n	800338e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003366:	2b01      	cmp	r3, #1
 8003368:	d101      	bne.n	800336e <HAL_UART_Receive_IT+0x38>
 800336a:	2302      	movs	r3, #2
 800336c:	e00f      	b.n	800338e <HAL_UART_Receive_IT+0x58>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800337c:	88fb      	ldrh	r3, [r7, #6]
 800337e:	461a      	mov	r2, r3
 8003380:	68b9      	ldr	r1, [r7, #8]
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 fb24 	bl	80039d0 <UART_Start_Receive_IT>
 8003388:	4603      	mov	r3, r0
 800338a:	e000      	b.n	800338e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800338c:	2302      	movs	r3, #2
  }
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
	...

08003398 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b0ba      	sub	sp, #232	; 0xe8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80033be:	2300      	movs	r3, #0
 80033c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80033ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80033d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10f      	bne.n	80033fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033e2:	f003 0320 	and.w	r3, r3, #32
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d009      	beq.n	80033fe <HAL_UART_IRQHandler+0x66>
 80033ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033ee:	f003 0320 	and.w	r3, r3, #32
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 fc07 	bl	8003c0a <UART_Receive_IT>
      return;
 80033fc:	e256      	b.n	80038ac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80033fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 80de 	beq.w	80035c4 <HAL_UART_IRQHandler+0x22c>
 8003408:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b00      	cmp	r3, #0
 8003412:	d106      	bne.n	8003422 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003418:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 80d1 	beq.w	80035c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00b      	beq.n	8003446 <HAL_UART_IRQHandler+0xae>
 800342e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003436:	2b00      	cmp	r3, #0
 8003438:	d005      	beq.n	8003446 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f043 0201 	orr.w	r2, r3, #1
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800344a:	f003 0304 	and.w	r3, r3, #4
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00b      	beq.n	800346a <HAL_UART_IRQHandler+0xd2>
 8003452:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d005      	beq.n	800346a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	f043 0202 	orr.w	r2, r3, #2
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800346a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00b      	beq.n	800348e <HAL_UART_IRQHandler+0xf6>
 8003476:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d005      	beq.n	800348e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	f043 0204 	orr.w	r2, r3, #4
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800348e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	2b00      	cmp	r3, #0
 8003498:	d011      	beq.n	80034be <HAL_UART_IRQHandler+0x126>
 800349a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800349e:	f003 0320 	and.w	r3, r3, #32
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d105      	bne.n	80034b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80034a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d005      	beq.n	80034be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	f043 0208 	orr.w	r2, r3, #8
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 81ed 	beq.w	80038a2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034cc:	f003 0320 	and.w	r3, r3, #32
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <HAL_UART_IRQHandler+0x14e>
 80034d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034d8:	f003 0320 	and.w	r3, r3, #32
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 fb92 	bl	8003c0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f0:	2b40      	cmp	r3, #64	; 0x40
 80034f2:	bf0c      	ite	eq
 80034f4:	2301      	moveq	r3, #1
 80034f6:	2300      	movne	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d103      	bne.n	8003512 <HAL_UART_IRQHandler+0x17a>
 800350a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800350e:	2b00      	cmp	r3, #0
 8003510:	d04f      	beq.n	80035b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 fa9a 	bl	8003a4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003522:	2b40      	cmp	r3, #64	; 0x40
 8003524:	d141      	bne.n	80035aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	3314      	adds	r3, #20
 800352c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003530:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003534:	e853 3f00 	ldrex	r3, [r3]
 8003538:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800353c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003540:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003544:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	3314      	adds	r3, #20
 800354e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003552:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003556:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800355e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003562:	e841 2300 	strex	r3, r2, [r1]
 8003566:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800356a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1d9      	bne.n	8003526 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003576:	2b00      	cmp	r3, #0
 8003578:	d013      	beq.n	80035a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357e:	4a7d      	ldr	r2, [pc, #500]	; (8003774 <HAL_UART_IRQHandler+0x3dc>)
 8003580:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003586:	4618      	mov	r0, r3
 8003588:	f7fe ffdd 	bl	8002546 <HAL_DMA_Abort_IT>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d016      	beq.n	80035c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800359c:	4610      	mov	r0, r2
 800359e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a0:	e00e      	b.n	80035c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f990 	bl	80038c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a8:	e00a      	b.n	80035c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f98c 	bl	80038c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b0:	e006      	b.n	80035c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f988 	bl	80038c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80035be:	e170      	b.n	80038a2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c0:	bf00      	nop
    return;
 80035c2:	e16e      	b.n	80038a2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	f040 814a 	bne.w	8003862 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80035ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035d2:	f003 0310 	and.w	r3, r3, #16
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 8143 	beq.w	8003862 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80035dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035e0:	f003 0310 	and.w	r3, r3, #16
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 813c 	beq.w	8003862 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035ea:	2300      	movs	r3, #0
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	60bb      	str	r3, [r7, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	60bb      	str	r3, [r7, #8]
 80035fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360a:	2b40      	cmp	r3, #64	; 0x40
 800360c:	f040 80b4 	bne.w	8003778 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800361c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 8140 	beq.w	80038a6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800362a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800362e:	429a      	cmp	r2, r3
 8003630:	f080 8139 	bcs.w	80038a6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800363a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003646:	f000 8088 	beq.w	800375a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	330c      	adds	r3, #12
 8003650:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003654:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003658:	e853 3f00 	ldrex	r3, [r3]
 800365c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003660:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003668:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	330c      	adds	r3, #12
 8003672:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003676:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800367a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003682:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003686:	e841 2300 	strex	r3, r2, [r1]
 800368a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800368e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1d9      	bne.n	800364a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	3314      	adds	r3, #20
 800369c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036a0:	e853 3f00 	ldrex	r3, [r3]
 80036a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80036a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036a8:	f023 0301 	bic.w	r3, r3, #1
 80036ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3314      	adds	r3, #20
 80036b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80036be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80036c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80036c6:	e841 2300 	strex	r3, r2, [r1]
 80036ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80036cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1e1      	bne.n	8003696 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	3314      	adds	r3, #20
 80036d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036dc:	e853 3f00 	ldrex	r3, [r3]
 80036e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80036e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	3314      	adds	r3, #20
 80036f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80036f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80036f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80036fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80036fe:	e841 2300 	strex	r3, r2, [r1]
 8003702:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003704:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1e3      	bne.n	80036d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2220      	movs	r2, #32
 800370e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	330c      	adds	r3, #12
 800371e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003722:	e853 3f00 	ldrex	r3, [r3]
 8003726:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800372a:	f023 0310 	bic.w	r3, r3, #16
 800372e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	330c      	adds	r3, #12
 8003738:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800373c:	65ba      	str	r2, [r7, #88]	; 0x58
 800373e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003740:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003742:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003744:	e841 2300 	strex	r3, r2, [r1]
 8003748:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800374a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1e3      	bne.n	8003718 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003754:	4618      	mov	r0, r3
 8003756:	f7fe fe86 	bl	8002466 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003762:	b29b      	uxth	r3, r3
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	b29b      	uxth	r3, r3
 8003768:	4619      	mov	r1, r3
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f8b6 	bl	80038dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003770:	e099      	b.n	80038a6 <HAL_UART_IRQHandler+0x50e>
 8003772:	bf00      	nop
 8003774:	08003b13 	.word	0x08003b13
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003780:	b29b      	uxth	r3, r3
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800378c:	b29b      	uxth	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 808b 	beq.w	80038aa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003794:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 8086 	beq.w	80038aa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	330c      	adds	r3, #12
 80037a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a8:	e853 3f00 	ldrex	r3, [r3]
 80037ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80037ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	330c      	adds	r3, #12
 80037be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80037c2:	647a      	str	r2, [r7, #68]	; 0x44
 80037c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037ca:	e841 2300 	strex	r3, r2, [r1]
 80037ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80037d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1e3      	bne.n	800379e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	3314      	adds	r3, #20
 80037dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	e853 3f00 	ldrex	r3, [r3]
 80037e4:	623b      	str	r3, [r7, #32]
   return(result);
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	f023 0301 	bic.w	r3, r3, #1
 80037ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3314      	adds	r3, #20
 80037f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80037fa:	633a      	str	r2, [r7, #48]	; 0x30
 80037fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003802:	e841 2300 	strex	r3, r2, [r1]
 8003806:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1e3      	bne.n	80037d6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2220      	movs	r2, #32
 8003812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	330c      	adds	r3, #12
 8003822:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	e853 3f00 	ldrex	r3, [r3]
 800382a:	60fb      	str	r3, [r7, #12]
   return(result);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f023 0310 	bic.w	r3, r3, #16
 8003832:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	330c      	adds	r3, #12
 800383c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003840:	61fa      	str	r2, [r7, #28]
 8003842:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003844:	69b9      	ldr	r1, [r7, #24]
 8003846:	69fa      	ldr	r2, [r7, #28]
 8003848:	e841 2300 	strex	r3, r2, [r1]
 800384c:	617b      	str	r3, [r7, #20]
   return(result);
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1e3      	bne.n	800381c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003854:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003858:	4619      	mov	r1, r3
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f83e 	bl	80038dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003860:	e023      	b.n	80038aa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800386a:	2b00      	cmp	r3, #0
 800386c:	d009      	beq.n	8003882 <HAL_UART_IRQHandler+0x4ea>
 800386e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f95d 	bl	8003b3a <UART_Transmit_IT>
    return;
 8003880:	e014      	b.n	80038ac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00e      	beq.n	80038ac <HAL_UART_IRQHandler+0x514>
 800388e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003896:	2b00      	cmp	r3, #0
 8003898:	d008      	beq.n	80038ac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f99d 	bl	8003bda <UART_EndTransmit_IT>
    return;
 80038a0:	e004      	b.n	80038ac <HAL_UART_IRQHandler+0x514>
    return;
 80038a2:	bf00      	nop
 80038a4:	e002      	b.n	80038ac <HAL_UART_IRQHandler+0x514>
      return;
 80038a6:	bf00      	nop
 80038a8:	e000      	b.n	80038ac <HAL_UART_IRQHandler+0x514>
      return;
 80038aa:	bf00      	nop
  }
}
 80038ac:	37e8      	adds	r7, #232	; 0xe8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop

080038b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	460b      	mov	r3, r1
 80038e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b090      	sub	sp, #64	; 0x40
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	603b      	str	r3, [r7, #0]
 8003900:	4613      	mov	r3, r2
 8003902:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003904:	e050      	b.n	80039a8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003906:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390c:	d04c      	beq.n	80039a8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800390e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003910:	2b00      	cmp	r3, #0
 8003912:	d007      	beq.n	8003924 <UART_WaitOnFlagUntilTimeout+0x30>
 8003914:	f7fe fc8a 	bl	800222c <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003920:	429a      	cmp	r2, r3
 8003922:	d241      	bcs.n	80039a8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	330c      	adds	r3, #12
 800392a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392e:	e853 3f00 	ldrex	r3, [r3]
 8003932:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800393a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	330c      	adds	r3, #12
 8003942:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003944:	637a      	str	r2, [r7, #52]	; 0x34
 8003946:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003948:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800394a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800394c:	e841 2300 	strex	r3, r2, [r1]
 8003950:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1e5      	bne.n	8003924 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	3314      	adds	r3, #20
 800395e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	e853 3f00 	ldrex	r3, [r3]
 8003966:	613b      	str	r3, [r7, #16]
   return(result);
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	f023 0301 	bic.w	r3, r3, #1
 800396e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	3314      	adds	r3, #20
 8003976:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003978:	623a      	str	r2, [r7, #32]
 800397a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397c:	69f9      	ldr	r1, [r7, #28]
 800397e:	6a3a      	ldr	r2, [r7, #32]
 8003980:	e841 2300 	strex	r3, r2, [r1]
 8003984:	61bb      	str	r3, [r7, #24]
   return(result);
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1e5      	bne.n	8003958 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2220      	movs	r2, #32
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2220      	movs	r2, #32
 8003998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e00f      	b.n	80039c8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	4013      	ands	r3, r2
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	bf0c      	ite	eq
 80039b8:	2301      	moveq	r3, #1
 80039ba:	2300      	movne	r3, #0
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	461a      	mov	r2, r3
 80039c0:	79fb      	ldrb	r3, [r7, #7]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d09f      	beq.n	8003906 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3740      	adds	r7, #64	; 0x40
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	4613      	mov	r3, r2
 80039dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	88fa      	ldrh	r2, [r7, #6]
 80039e8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	88fa      	ldrh	r2, [r7, #6]
 80039ee:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2222      	movs	r2, #34	; 0x22
 80039fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d007      	beq.n	8003a1e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68da      	ldr	r2, [r3, #12]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a1c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695a      	ldr	r2, [r3, #20]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f042 0201 	orr.w	r2, r2, #1
 8003a2c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68da      	ldr	r2, [r3, #12]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f042 0220 	orr.w	r2, r2, #32
 8003a3c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3714      	adds	r7, #20
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b095      	sub	sp, #84	; 0x54
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	330c      	adds	r3, #12
 8003a5a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a5e:	e853 3f00 	ldrex	r3, [r3]
 8003a62:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	330c      	adds	r3, #12
 8003a72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a74:	643a      	str	r2, [r7, #64]	; 0x40
 8003a76:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a7c:	e841 2300 	strex	r3, r2, [r1]
 8003a80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1e5      	bne.n	8003a54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	3314      	adds	r3, #20
 8003a8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	e853 3f00 	ldrex	r3, [r3]
 8003a96:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f023 0301 	bic.w	r3, r3, #1
 8003a9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	3314      	adds	r3, #20
 8003aa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003aa8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003aaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003aae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ab0:	e841 2300 	strex	r3, r2, [r1]
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1e5      	bne.n	8003a88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d119      	bne.n	8003af8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	330c      	adds	r3, #12
 8003aca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	e853 3f00 	ldrex	r3, [r3]
 8003ad2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f023 0310 	bic.w	r3, r3, #16
 8003ada:	647b      	str	r3, [r7, #68]	; 0x44
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	330c      	adds	r3, #12
 8003ae2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ae4:	61ba      	str	r2, [r7, #24]
 8003ae6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae8:	6979      	ldr	r1, [r7, #20]
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	e841 2300 	strex	r3, r2, [r1]
 8003af0:	613b      	str	r3, [r7, #16]
   return(result);
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1e5      	bne.n	8003ac4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003b06:	bf00      	nop
 8003b08:	3754      	adds	r7, #84	; 0x54
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b084      	sub	sp, #16
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f7ff fecb 	bl	80038c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b32:	bf00      	nop
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b085      	sub	sp, #20
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b21      	cmp	r3, #33	; 0x21
 8003b4c:	d13e      	bne.n	8003bcc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b56:	d114      	bne.n	8003b82 <UART_Transmit_IT+0x48>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d110      	bne.n	8003b82 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	881b      	ldrh	r3, [r3, #0]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b74:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	1c9a      	adds	r2, r3, #2
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	621a      	str	r2, [r3, #32]
 8003b80:	e008      	b.n	8003b94 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	1c59      	adds	r1, r3, #1
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6211      	str	r1, [r2, #32]
 8003b8c:	781a      	ldrb	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10f      	bne.n	8003bc8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bb6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68da      	ldr	r2, [r3, #12]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bc6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	e000      	b.n	8003bce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003bcc:	2302      	movs	r3, #2
  }
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b082      	sub	sp, #8
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68da      	ldr	r2, [r3, #12]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bf0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7ff fe5a 	bl	80038b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b08c      	sub	sp, #48	; 0x30
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b22      	cmp	r3, #34	; 0x22
 8003c1c:	f040 80ab 	bne.w	8003d76 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c28:	d117      	bne.n	8003c5a <UART_Receive_IT+0x50>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d113      	bne.n	8003c5a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c32:	2300      	movs	r3, #0
 8003c34:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c52:	1c9a      	adds	r2, r3, #2
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	629a      	str	r2, [r3, #40]	; 0x28
 8003c58:	e026      	b.n	8003ca8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003c60:	2300      	movs	r3, #0
 8003c62:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c6c:	d007      	beq.n	8003c7e <UART_Receive_IT+0x74>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10a      	bne.n	8003c8c <UART_Receive_IT+0x82>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d106      	bne.n	8003c8c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c88:	701a      	strb	r2, [r3, #0]
 8003c8a:	e008      	b.n	8003c9e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d15a      	bne.n	8003d72 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0220 	bic.w	r2, r2, #32
 8003cca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695a      	ldr	r2, [r3, #20]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 0201 	bic.w	r2, r2, #1
 8003cea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d135      	bne.n	8003d68 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	330c      	adds	r3, #12
 8003d08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	e853 3f00 	ldrex	r3, [r3]
 8003d10:	613b      	str	r3, [r7, #16]
   return(result);
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f023 0310 	bic.w	r3, r3, #16
 8003d18:	627b      	str	r3, [r7, #36]	; 0x24
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	330c      	adds	r3, #12
 8003d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d22:	623a      	str	r2, [r7, #32]
 8003d24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d26:	69f9      	ldr	r1, [r7, #28]
 8003d28:	6a3a      	ldr	r2, [r7, #32]
 8003d2a:	e841 2300 	strex	r3, r2, [r1]
 8003d2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1e5      	bne.n	8003d02 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0310 	and.w	r3, r3, #16
 8003d40:	2b10      	cmp	r3, #16
 8003d42:	d10a      	bne.n	8003d5a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d44:	2300      	movs	r3, #0
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	60fb      	str	r3, [r7, #12]
 8003d58:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d5e:	4619      	mov	r1, r3
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7ff fdbb 	bl	80038dc <HAL_UARTEx_RxEventCallback>
 8003d66:	e002      	b.n	8003d6e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7fc ff19 	bl	8000ba0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	e002      	b.n	8003d78 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003d72:	2300      	movs	r3, #0
 8003d74:	e000      	b.n	8003d78 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003d76:	2302      	movs	r3, #2
  }
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3730      	adds	r7, #48	; 0x30
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d84:	b0c0      	sub	sp, #256	; 0x100
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d9c:	68d9      	ldr	r1, [r3, #12]
 8003d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	ea40 0301 	orr.w	r3, r0, r1
 8003da8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	431a      	orrs	r2, r3
 8003db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003dd8:	f021 010c 	bic.w	r1, r1, #12
 8003ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003de6:	430b      	orrs	r3, r1
 8003de8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dfa:	6999      	ldr	r1, [r3, #24]
 8003dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	ea40 0301 	orr.w	r3, r0, r1
 8003e06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	4b8f      	ldr	r3, [pc, #572]	; (800404c <UART_SetConfig+0x2cc>)
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d005      	beq.n	8003e20 <UART_SetConfig+0xa0>
 8003e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	4b8d      	ldr	r3, [pc, #564]	; (8004050 <UART_SetConfig+0x2d0>)
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d104      	bne.n	8003e2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e20:	f7ff f996 	bl	8003150 <HAL_RCC_GetPCLK2Freq>
 8003e24:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003e28:	e003      	b.n	8003e32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e2a:	f7ff f97d 	bl	8003128 <HAL_RCC_GetPCLK1Freq>
 8003e2e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e3c:	f040 810c 	bne.w	8004058 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e44:	2200      	movs	r2, #0
 8003e46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e4a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003e4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003e52:	4622      	mov	r2, r4
 8003e54:	462b      	mov	r3, r5
 8003e56:	1891      	adds	r1, r2, r2
 8003e58:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e5a:	415b      	adcs	r3, r3
 8003e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e62:	4621      	mov	r1, r4
 8003e64:	eb12 0801 	adds.w	r8, r2, r1
 8003e68:	4629      	mov	r1, r5
 8003e6a:	eb43 0901 	adc.w	r9, r3, r1
 8003e6e:	f04f 0200 	mov.w	r2, #0
 8003e72:	f04f 0300 	mov.w	r3, #0
 8003e76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e82:	4690      	mov	r8, r2
 8003e84:	4699      	mov	r9, r3
 8003e86:	4623      	mov	r3, r4
 8003e88:	eb18 0303 	adds.w	r3, r8, r3
 8003e8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e90:	462b      	mov	r3, r5
 8003e92:	eb49 0303 	adc.w	r3, r9, r3
 8003e96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ea6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003eaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003eae:	460b      	mov	r3, r1
 8003eb0:	18db      	adds	r3, r3, r3
 8003eb2:	653b      	str	r3, [r7, #80]	; 0x50
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	eb42 0303 	adc.w	r3, r2, r3
 8003eba:	657b      	str	r3, [r7, #84]	; 0x54
 8003ebc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ec0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ec4:	f7fc f988 	bl	80001d8 <__aeabi_uldivmod>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	460b      	mov	r3, r1
 8003ecc:	4b61      	ldr	r3, [pc, #388]	; (8004054 <UART_SetConfig+0x2d4>)
 8003ece:	fba3 2302 	umull	r2, r3, r3, r2
 8003ed2:	095b      	lsrs	r3, r3, #5
 8003ed4:	011c      	lsls	r4, r3, #4
 8003ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003eda:	2200      	movs	r2, #0
 8003edc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ee0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ee4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ee8:	4642      	mov	r2, r8
 8003eea:	464b      	mov	r3, r9
 8003eec:	1891      	adds	r1, r2, r2
 8003eee:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ef0:	415b      	adcs	r3, r3
 8003ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ef4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ef8:	4641      	mov	r1, r8
 8003efa:	eb12 0a01 	adds.w	sl, r2, r1
 8003efe:	4649      	mov	r1, r9
 8003f00:	eb43 0b01 	adc.w	fp, r3, r1
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	f04f 0300 	mov.w	r3, #0
 8003f0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f18:	4692      	mov	sl, r2
 8003f1a:	469b      	mov	fp, r3
 8003f1c:	4643      	mov	r3, r8
 8003f1e:	eb1a 0303 	adds.w	r3, sl, r3
 8003f22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f26:	464b      	mov	r3, r9
 8003f28:	eb4b 0303 	adc.w	r3, fp, r3
 8003f2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f3c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003f40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f44:	460b      	mov	r3, r1
 8003f46:	18db      	adds	r3, r3, r3
 8003f48:	643b      	str	r3, [r7, #64]	; 0x40
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	eb42 0303 	adc.w	r3, r2, r3
 8003f50:	647b      	str	r3, [r7, #68]	; 0x44
 8003f52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003f5a:	f7fc f93d 	bl	80001d8 <__aeabi_uldivmod>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	460b      	mov	r3, r1
 8003f62:	4611      	mov	r1, r2
 8003f64:	4b3b      	ldr	r3, [pc, #236]	; (8004054 <UART_SetConfig+0x2d4>)
 8003f66:	fba3 2301 	umull	r2, r3, r3, r1
 8003f6a:	095b      	lsrs	r3, r3, #5
 8003f6c:	2264      	movs	r2, #100	; 0x64
 8003f6e:	fb02 f303 	mul.w	r3, r2, r3
 8003f72:	1acb      	subs	r3, r1, r3
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f7a:	4b36      	ldr	r3, [pc, #216]	; (8004054 <UART_SetConfig+0x2d4>)
 8003f7c:	fba3 2302 	umull	r2, r3, r3, r2
 8003f80:	095b      	lsrs	r3, r3, #5
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f88:	441c      	add	r4, r3
 8003f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f94:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f9c:	4642      	mov	r2, r8
 8003f9e:	464b      	mov	r3, r9
 8003fa0:	1891      	adds	r1, r2, r2
 8003fa2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003fa4:	415b      	adcs	r3, r3
 8003fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fa8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003fac:	4641      	mov	r1, r8
 8003fae:	1851      	adds	r1, r2, r1
 8003fb0:	6339      	str	r1, [r7, #48]	; 0x30
 8003fb2:	4649      	mov	r1, r9
 8003fb4:	414b      	adcs	r3, r1
 8003fb6:	637b      	str	r3, [r7, #52]	; 0x34
 8003fb8:	f04f 0200 	mov.w	r2, #0
 8003fbc:	f04f 0300 	mov.w	r3, #0
 8003fc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003fc4:	4659      	mov	r1, fp
 8003fc6:	00cb      	lsls	r3, r1, #3
 8003fc8:	4651      	mov	r1, sl
 8003fca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fce:	4651      	mov	r1, sl
 8003fd0:	00ca      	lsls	r2, r1, #3
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	4642      	mov	r2, r8
 8003fda:	189b      	adds	r3, r3, r2
 8003fdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fe0:	464b      	mov	r3, r9
 8003fe2:	460a      	mov	r2, r1
 8003fe4:	eb42 0303 	adc.w	r3, r2, r3
 8003fe8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ff8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ffc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004000:	460b      	mov	r3, r1
 8004002:	18db      	adds	r3, r3, r3
 8004004:	62bb      	str	r3, [r7, #40]	; 0x28
 8004006:	4613      	mov	r3, r2
 8004008:	eb42 0303 	adc.w	r3, r2, r3
 800400c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800400e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004012:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004016:	f7fc f8df 	bl	80001d8 <__aeabi_uldivmod>
 800401a:	4602      	mov	r2, r0
 800401c:	460b      	mov	r3, r1
 800401e:	4b0d      	ldr	r3, [pc, #52]	; (8004054 <UART_SetConfig+0x2d4>)
 8004020:	fba3 1302 	umull	r1, r3, r3, r2
 8004024:	095b      	lsrs	r3, r3, #5
 8004026:	2164      	movs	r1, #100	; 0x64
 8004028:	fb01 f303 	mul.w	r3, r1, r3
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	3332      	adds	r3, #50	; 0x32
 8004032:	4a08      	ldr	r2, [pc, #32]	; (8004054 <UART_SetConfig+0x2d4>)
 8004034:	fba2 2303 	umull	r2, r3, r2, r3
 8004038:	095b      	lsrs	r3, r3, #5
 800403a:	f003 0207 	and.w	r2, r3, #7
 800403e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4422      	add	r2, r4
 8004046:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004048:	e105      	b.n	8004256 <UART_SetConfig+0x4d6>
 800404a:	bf00      	nop
 800404c:	40011000 	.word	0x40011000
 8004050:	40011400 	.word	0x40011400
 8004054:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800405c:	2200      	movs	r2, #0
 800405e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004062:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004066:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800406a:	4642      	mov	r2, r8
 800406c:	464b      	mov	r3, r9
 800406e:	1891      	adds	r1, r2, r2
 8004070:	6239      	str	r1, [r7, #32]
 8004072:	415b      	adcs	r3, r3
 8004074:	627b      	str	r3, [r7, #36]	; 0x24
 8004076:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800407a:	4641      	mov	r1, r8
 800407c:	1854      	adds	r4, r2, r1
 800407e:	4649      	mov	r1, r9
 8004080:	eb43 0501 	adc.w	r5, r3, r1
 8004084:	f04f 0200 	mov.w	r2, #0
 8004088:	f04f 0300 	mov.w	r3, #0
 800408c:	00eb      	lsls	r3, r5, #3
 800408e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004092:	00e2      	lsls	r2, r4, #3
 8004094:	4614      	mov	r4, r2
 8004096:	461d      	mov	r5, r3
 8004098:	4643      	mov	r3, r8
 800409a:	18e3      	adds	r3, r4, r3
 800409c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80040a0:	464b      	mov	r3, r9
 80040a2:	eb45 0303 	adc.w	r3, r5, r3
 80040a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80040aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80040b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80040ba:	f04f 0200 	mov.w	r2, #0
 80040be:	f04f 0300 	mov.w	r3, #0
 80040c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80040c6:	4629      	mov	r1, r5
 80040c8:	008b      	lsls	r3, r1, #2
 80040ca:	4621      	mov	r1, r4
 80040cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040d0:	4621      	mov	r1, r4
 80040d2:	008a      	lsls	r2, r1, #2
 80040d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80040d8:	f7fc f87e 	bl	80001d8 <__aeabi_uldivmod>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4b60      	ldr	r3, [pc, #384]	; (8004264 <UART_SetConfig+0x4e4>)
 80040e2:	fba3 2302 	umull	r2, r3, r3, r2
 80040e6:	095b      	lsrs	r3, r3, #5
 80040e8:	011c      	lsls	r4, r3, #4
 80040ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040ee:	2200      	movs	r2, #0
 80040f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80040f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80040f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80040fc:	4642      	mov	r2, r8
 80040fe:	464b      	mov	r3, r9
 8004100:	1891      	adds	r1, r2, r2
 8004102:	61b9      	str	r1, [r7, #24]
 8004104:	415b      	adcs	r3, r3
 8004106:	61fb      	str	r3, [r7, #28]
 8004108:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800410c:	4641      	mov	r1, r8
 800410e:	1851      	adds	r1, r2, r1
 8004110:	6139      	str	r1, [r7, #16]
 8004112:	4649      	mov	r1, r9
 8004114:	414b      	adcs	r3, r1
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	f04f 0300 	mov.w	r3, #0
 8004120:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004124:	4659      	mov	r1, fp
 8004126:	00cb      	lsls	r3, r1, #3
 8004128:	4651      	mov	r1, sl
 800412a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800412e:	4651      	mov	r1, sl
 8004130:	00ca      	lsls	r2, r1, #3
 8004132:	4610      	mov	r0, r2
 8004134:	4619      	mov	r1, r3
 8004136:	4603      	mov	r3, r0
 8004138:	4642      	mov	r2, r8
 800413a:	189b      	adds	r3, r3, r2
 800413c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004140:	464b      	mov	r3, r9
 8004142:	460a      	mov	r2, r1
 8004144:	eb42 0303 	adc.w	r3, r2, r3
 8004148:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800414c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	67bb      	str	r3, [r7, #120]	; 0x78
 8004156:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004158:	f04f 0200 	mov.w	r2, #0
 800415c:	f04f 0300 	mov.w	r3, #0
 8004160:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004164:	4649      	mov	r1, r9
 8004166:	008b      	lsls	r3, r1, #2
 8004168:	4641      	mov	r1, r8
 800416a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800416e:	4641      	mov	r1, r8
 8004170:	008a      	lsls	r2, r1, #2
 8004172:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004176:	f7fc f82f 	bl	80001d8 <__aeabi_uldivmod>
 800417a:	4602      	mov	r2, r0
 800417c:	460b      	mov	r3, r1
 800417e:	4b39      	ldr	r3, [pc, #228]	; (8004264 <UART_SetConfig+0x4e4>)
 8004180:	fba3 1302 	umull	r1, r3, r3, r2
 8004184:	095b      	lsrs	r3, r3, #5
 8004186:	2164      	movs	r1, #100	; 0x64
 8004188:	fb01 f303 	mul.w	r3, r1, r3
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	3332      	adds	r3, #50	; 0x32
 8004192:	4a34      	ldr	r2, [pc, #208]	; (8004264 <UART_SetConfig+0x4e4>)
 8004194:	fba2 2303 	umull	r2, r3, r2, r3
 8004198:	095b      	lsrs	r3, r3, #5
 800419a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800419e:	441c      	add	r4, r3
 80041a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041a4:	2200      	movs	r2, #0
 80041a6:	673b      	str	r3, [r7, #112]	; 0x70
 80041a8:	677a      	str	r2, [r7, #116]	; 0x74
 80041aa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80041ae:	4642      	mov	r2, r8
 80041b0:	464b      	mov	r3, r9
 80041b2:	1891      	adds	r1, r2, r2
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	415b      	adcs	r3, r3
 80041b8:	60fb      	str	r3, [r7, #12]
 80041ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041be:	4641      	mov	r1, r8
 80041c0:	1851      	adds	r1, r2, r1
 80041c2:	6039      	str	r1, [r7, #0]
 80041c4:	4649      	mov	r1, r9
 80041c6:	414b      	adcs	r3, r1
 80041c8:	607b      	str	r3, [r7, #4]
 80041ca:	f04f 0200 	mov.w	r2, #0
 80041ce:	f04f 0300 	mov.w	r3, #0
 80041d2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041d6:	4659      	mov	r1, fp
 80041d8:	00cb      	lsls	r3, r1, #3
 80041da:	4651      	mov	r1, sl
 80041dc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041e0:	4651      	mov	r1, sl
 80041e2:	00ca      	lsls	r2, r1, #3
 80041e4:	4610      	mov	r0, r2
 80041e6:	4619      	mov	r1, r3
 80041e8:	4603      	mov	r3, r0
 80041ea:	4642      	mov	r2, r8
 80041ec:	189b      	adds	r3, r3, r2
 80041ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80041f0:	464b      	mov	r3, r9
 80041f2:	460a      	mov	r2, r1
 80041f4:	eb42 0303 	adc.w	r3, r2, r3
 80041f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	663b      	str	r3, [r7, #96]	; 0x60
 8004204:	667a      	str	r2, [r7, #100]	; 0x64
 8004206:	f04f 0200 	mov.w	r2, #0
 800420a:	f04f 0300 	mov.w	r3, #0
 800420e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004212:	4649      	mov	r1, r9
 8004214:	008b      	lsls	r3, r1, #2
 8004216:	4641      	mov	r1, r8
 8004218:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800421c:	4641      	mov	r1, r8
 800421e:	008a      	lsls	r2, r1, #2
 8004220:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004224:	f7fb ffd8 	bl	80001d8 <__aeabi_uldivmod>
 8004228:	4602      	mov	r2, r0
 800422a:	460b      	mov	r3, r1
 800422c:	4b0d      	ldr	r3, [pc, #52]	; (8004264 <UART_SetConfig+0x4e4>)
 800422e:	fba3 1302 	umull	r1, r3, r3, r2
 8004232:	095b      	lsrs	r3, r3, #5
 8004234:	2164      	movs	r1, #100	; 0x64
 8004236:	fb01 f303 	mul.w	r3, r1, r3
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	3332      	adds	r3, #50	; 0x32
 8004240:	4a08      	ldr	r2, [pc, #32]	; (8004264 <UART_SetConfig+0x4e4>)
 8004242:	fba2 2303 	umull	r2, r3, r2, r3
 8004246:	095b      	lsrs	r3, r3, #5
 8004248:	f003 020f 	and.w	r2, r3, #15
 800424c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4422      	add	r2, r4
 8004254:	609a      	str	r2, [r3, #8]
}
 8004256:	bf00      	nop
 8004258:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800425c:	46bd      	mov	sp, r7
 800425e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004262:	bf00      	nop
 8004264:	51eb851f 	.word	0x51eb851f

08004268 <__libc_init_array>:
 8004268:	b570      	push	{r4, r5, r6, lr}
 800426a:	4d0d      	ldr	r5, [pc, #52]	; (80042a0 <__libc_init_array+0x38>)
 800426c:	4c0d      	ldr	r4, [pc, #52]	; (80042a4 <__libc_init_array+0x3c>)
 800426e:	1b64      	subs	r4, r4, r5
 8004270:	10a4      	asrs	r4, r4, #2
 8004272:	2600      	movs	r6, #0
 8004274:	42a6      	cmp	r6, r4
 8004276:	d109      	bne.n	800428c <__libc_init_array+0x24>
 8004278:	4d0b      	ldr	r5, [pc, #44]	; (80042a8 <__libc_init_array+0x40>)
 800427a:	4c0c      	ldr	r4, [pc, #48]	; (80042ac <__libc_init_array+0x44>)
 800427c:	f000 f820 	bl	80042c0 <_init>
 8004280:	1b64      	subs	r4, r4, r5
 8004282:	10a4      	asrs	r4, r4, #2
 8004284:	2600      	movs	r6, #0
 8004286:	42a6      	cmp	r6, r4
 8004288:	d105      	bne.n	8004296 <__libc_init_array+0x2e>
 800428a:	bd70      	pop	{r4, r5, r6, pc}
 800428c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004290:	4798      	blx	r3
 8004292:	3601      	adds	r6, #1
 8004294:	e7ee      	b.n	8004274 <__libc_init_array+0xc>
 8004296:	f855 3b04 	ldr.w	r3, [r5], #4
 800429a:	4798      	blx	r3
 800429c:	3601      	adds	r6, #1
 800429e:	e7f2      	b.n	8004286 <__libc_init_array+0x1e>
 80042a0:	08004360 	.word	0x08004360
 80042a4:	08004360 	.word	0x08004360
 80042a8:	08004360 	.word	0x08004360
 80042ac:	08004364 	.word	0x08004364

080042b0 <memset>:
 80042b0:	4402      	add	r2, r0
 80042b2:	4603      	mov	r3, r0
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d100      	bne.n	80042ba <memset+0xa>
 80042b8:	4770      	bx	lr
 80042ba:	f803 1b01 	strb.w	r1, [r3], #1
 80042be:	e7f9      	b.n	80042b4 <memset+0x4>

080042c0 <_init>:
 80042c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c2:	bf00      	nop
 80042c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042c6:	bc08      	pop	{r3}
 80042c8:	469e      	mov	lr, r3
 80042ca:	4770      	bx	lr

080042cc <_fini>:
 80042cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ce:	bf00      	nop
 80042d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042d2:	bc08      	pop	{r3}
 80042d4:	469e      	mov	lr, r3
 80042d6:	4770      	bx	lr
